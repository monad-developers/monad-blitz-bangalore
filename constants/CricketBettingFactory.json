{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"fallback","stateMutability":"payable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"activeGames","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"createGame","inputs":[{"name":"_teamA","type":"string","internalType":"string"},{"name":"_teamB","type":"string","internalType":"string"},{"name":"_matchId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"getActiveGames","inputs":[],"outputs":[{"name":"","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"getBalance","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isValidGame","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"removeGame","inputs":[{"name":"_gameAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"GameCreated","inputs":[{"name":"gameAddress","type":"address","indexed":true,"internalType":"address"},{"name":"teamA","type":"string","indexed":false,"internalType":"string"},{"name":"teamB","type":"string","indexed":false,"internalType":"string"},{"name":"matchId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x6080604052348015600e575f5ffd5b50335f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061611b8061005b5f395ff3fe608060405260043610610073575f3560e01c806352897beb1161004d57806352897beb146101065780638da5cb5b1461014257806391898efd1461016c578063bce24669146101a857610074565b806312065fe01461007657806313e4c714146100a05780631b76929c146100dc57610074565b5b005b348015610081575f5ffd5b5061008a6101d0565b60405161009791906107ee565b60405180910390f35b3480156100ab575f5ffd5b506100c660048036038101906100c19190610842565b6101d7565b6040516100d391906108ac565b60405180910390f35b3480156100e7575f5ffd5b506100f0610212565b6040516100fd919061097c565b60405180910390f35b348015610111575f5ffd5b5061012c600480360381019061012791906109c6565b61029d565b6040516101399190610a0b565b60405180910390f35b34801561014d575f5ffd5b506101566102ba565b60405161016391906108ac565b60405180910390f35b348015610177575f5ffd5b50610192600480360381019061018d9190610b60565b6102de565b60405161019f91906108ac565b60405180910390f35b3480156101b3575f5ffd5b506101ce60048036038101906101c991906109c6565b6104e0565b005b5f47905090565b600181815481106101e6575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600180548060200260200160405190810160405280929190818152602001828054801561029357602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161024a575b5050505050905090565b6002602052805f5260405f205f915054906101000a900460ff1681565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036490610c68565b60405180910390fd5b5f8484845f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161039e906107c9565b6103ab9493929190610cd6565b604051809103905ff0801580156103c4573d5f5f3e3d5ffd5b5090505f819050600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f3d5e0af43dbb292d0bab61d6d56e071c8ff5001e3ec50053339fac781d3df670878787426040516104cc9493929190610d27565b60405180910390a280925050509392505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461056e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056590610c68565b60405180910390fd5b60025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee90610dc2565b60405180910390fd5b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505f5f90505b6001805490508110156107c5578173ffffffffffffffffffffffffffffffffffffffff166001828154811061068857610687610de0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107b85760018080805490506106dd9190610e3a565b815481106106ee576106ed610de0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001828154811061072a57610729610de0565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061078157610780610e6d565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556107c5565b8080600101915050610650565b5050565b61524b80610e9b83390190565b5f819050919050565b6107e8816107d6565b82525050565b5f6020820190506108015f8301846107df565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b610821816107d6565b811461082b575f5ffd5b50565b5f8135905061083c81610818565b92915050565b5f6020828403121561085757610856610810565b5b5f6108648482850161082e565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108968261086d565b9050919050565b6108a68161088c565b82525050565b5f6020820190506108bf5f83018461089d565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6108f78161088c565b82525050565b5f61090883836108ee565b60208301905092915050565b5f602082019050919050565b5f61092a826108c5565b61093481856108cf565b935061093f836108df565b805f5b8381101561096f57815161095688826108fd565b975061096183610914565b925050600181019050610942565b5085935050505092915050565b5f6020820190508181035f8301526109948184610920565b905092915050565b6109a58161088c565b81146109af575f5ffd5b50565b5f813590506109c08161099c565b92915050565b5f602082840312156109db576109da610810565b5b5f6109e8848285016109b2565b91505092915050565b5f8115159050919050565b610a05816109f1565b82525050565b5f602082019050610a1e5f8301846109fc565b92915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610a7282610a2c565b810181811067ffffffffffffffff82111715610a9157610a90610a3c565b5b80604052505050565b5f610aa3610807565b9050610aaf8282610a69565b919050565b5f67ffffffffffffffff821115610ace57610acd610a3c565b5b610ad782610a2c565b9050602081019050919050565b828183375f83830152505050565b5f610b04610aff84610ab4565b610a9a565b905082815260208101848484011115610b2057610b1f610a28565b5b610b2b848285610ae4565b509392505050565b5f82601f830112610b4757610b46610a24565b5b8135610b57848260208601610af2565b91505092915050565b5f5f5f60608486031215610b7757610b76610810565b5b5f84013567ffffffffffffffff811115610b9457610b93610814565b5b610ba086828701610b33565b935050602084013567ffffffffffffffff811115610bc157610bc0610814565b5b610bcd86828701610b33565b9250506040610bde8682870161082e565b9150509250925092565b5f82825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f5f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f610c52602183610be8565b9150610c5d82610bf8565b604082019050919050565b5f6020820190508181035f830152610c7f81610c46565b9050919050565b5f81519050919050565b8281835e5f83830152505050565b5f610ca882610c86565b610cb28185610be8565b9350610cc2818560208601610c90565b610ccb81610a2c565b840191505092915050565b5f6080820190508181035f830152610cee8187610c9e565b90508181036020830152610d028186610c9e565b9050610d1160408301856107df565b610d1e606083018461089d565b95945050505050565b5f6080820190508181035f830152610d3f8187610c9e565b90508181036020830152610d538186610c9e565b9050610d6260408301856107df565b610d6f60608301846107df565b95945050505050565b7f496e76616c69642067616d6520616464726573730000000000000000000000005f82015250565b5f610dac601483610be8565b9150610db782610d78565b602082019050919050565b5f6020820190508181035f830152610dd981610da0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610e44826107d6565b9150610e4f836107d6565b9250828203905081811115610e6757610e66610e0d565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfe60806040525f600555348015610013575f5ffd5b5060405161524b38038061524b833981810160405281019061003591906102be565b83600290816100449190610561565b5082600390816100549190610561565b5081600481905550805f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050610630565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610143826100fd565b810181811067ffffffffffffffff821117156101625761016161010d565b5b80604052505050565b5f6101746100e4565b9050610180828261013a565b919050565b5f67ffffffffffffffff82111561019f5761019e61010d565b5b6101a8826100fd565b9050602081019050919050565b8281835e5f83830152505050565b5f6101d56101d084610185565b61016b565b9050828152602081018484840111156101f1576101f06100f9565b5b6101fc8482856101b5565b509392505050565b5f82601f830112610218576102176100f5565b5b81516102288482602086016101c3565b91505092915050565b5f819050919050565b61024381610231565b811461024d575f5ffd5b50565b5f8151905061025e8161023a565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61028d82610264565b9050919050565b61029d81610283565b81146102a7575f5ffd5b50565b5f815190506102b881610294565b92915050565b5f5f5f5f608085870312156102d6576102d56100ed565b5b5f85015167ffffffffffffffff8111156102f3576102f26100f1565b5b6102ff87828801610204565b945050602085015167ffffffffffffffff8111156103205761031f6100f1565b5b61032c87828801610204565b935050604061033d87828801610250565b925050606061034e878288016102aa565b91505092959194509250565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806103a857607f821691505b6020821081036103bb576103ba610364565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261041d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826103e2565b61042786836103e2565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61046261045d61045884610231565b61043f565b610231565b9050919050565b5f819050919050565b61047b83610448565b61048f61048782610469565b8484546103ee565b825550505050565b5f5f905090565b6104a6610497565b6104b1818484610472565b505050565b5b818110156104d4576104c95f8261049e565b6001810190506104b7565b5050565b601f821115610519576104ea816103c1565b6104f3846103d3565b81016020851015610502578190505b61051661050e856103d3565b8301826104b6565b50505b505050565b5f82821c905092915050565b5f6105395f198460080261051e565b1980831691505092915050565b5f610551838361052a565b9150826002028217905092915050565b61056a8261035a565b67ffffffffffffffff8111156105835761058261010d565b5b61058d8254610391565b6105988282856104d8565b5f60209050601f8311600181146105c9575f84156105b7578287015190505b6105c18582610546565b865550610628565b601f1984166105d7866103c1565b5f5b828110156105fe578489015182556001820191506020850194506020810190506105d9565b8683101561061b5784890151610617601f89168261052a565b8355505b6001600288020188555050505b505050505050565b614c0e8061063d5f395ff3fe608060405260043610610180575f3560e01c80636c21e514116100d057806390004781116100895780639e4f372b116100635780639e4f372b1461057f578063c45a0155146105bb578063dba71be6146105e5578063edfbcba31461060f57610180565b806390004781146104e957806398c40f351461052b57806399892e471461055557610180565b80636c21e514146103dd5780636e777921146104055780636f9fb98a14610441578063826df9aa1461046b5780638aa7c3e8146104955780638da5cb5b146104bf57610180565b80633e98275f1161013d57806351858e271161011757806351858e271461032157806353be326a1461033757806355b006371461037957806367d85375146103b557610180565b80633e98275f1461028b57806342c4ee5d146102c957806347734892146102e557610180565b806303edf91414610184578063063c67c2146101a0578063162523b3146101ce57806326224c64146101f65780633371c0bf146102325780633ccfd60b14610275575b5f5ffd5b61019e6004803603810190610199919061356c565b610637565b005b3480156101ab575f5ffd5b506101b4610ae2565b6040516101c5959493929190613629565b60405180910390f35b3480156101d9575f5ffd5b506101f460048036038101906101ef9190613688565b610c19565b005b348015610201575f5ffd5b5061021c6004803603810190610217919061370d565b610df5565b6040516102299190613738565b60405180910390f35b34801561023d575f5ffd5b5061025860048036038101906102539190613688565b610e0a565b60405161026c989796959493929190613751565b60405180910390f35b348015610280575f5ffd5b50610289610ff2565b005b348015610296575f5ffd5b506102b160048036038101906102ac91906137cd565b6110fe565b6040516102c093929190613abb565b60405180910390f35b6102e360048036038101906102de9190613d05565b611383565b005b3480156102f0575f5ffd5b5061030b6004803603810190610306919061370d565b6119cf565b6040516103189190613738565b60405180910390f35b34801561032c575f5ffd5b50610335611a15565b005b348015610342575f5ffd5b5061035d60048036038101906103589190613688565b611aa5565b6040516103709796959493929190613e44565b60405180910390f35b348015610384575f5ffd5b5061039f600480360381019061039a9190613eb5565b611d03565b6040516103ac9190613738565b60405180910390f35b3480156103c0575f5ffd5b506103db60048036038101906103d69190613fb5565b611de1565b005b3480156103e8575f5ffd5b5061040360048036038101906103fe9190613688565b612019565b005b348015610410575f5ffd5b5061042b6004803603810190610426919061400f565b6122a0565b6040516104389190613738565b60405180910390f35b34801561044c575f5ffd5b50610455612612565b6040516104629190613738565b60405180910390f35b348015610476575f5ffd5b5061047f612619565b60405161048c919061404d565b60405180910390f35b3480156104a0575f5ffd5b506104a96126a5565b6040516104b6919061404d565b60405180910390f35b3480156104ca575f5ffd5b506104d3612731565b6040516104e0919061407c565b60405180910390f35b3480156104f4575f5ffd5b5061050f600480360381019061050a9190613688565b612755565b6040516105229796959493929190614095565b60405180910390f35b348015610536575f5ffd5b5061053f6127c5565b60405161054c9190613738565b60405180910390f35b348015610560575f5ffd5b506105696127cb565b6040516105769190613738565b60405180910390f35b34801561058a575f5ffd5b506105a560048036038101906105a09190614102565b6127d1565b6040516105b2919061404d565b60405180910390f35b3480156105c6575f5ffd5b506105cf612a86565b6040516105dc919061407c565b60405180910390f35b3480156105f0575f5ffd5b506105f9612aab565b6040516106069190613738565b60405180910390f35b34801561061a575f5ffd5b506106356004803603810190610630919061356c565b612ab0565b005b815f81118015610648575060788111155b610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90614177565b60405180910390fd5b5f34116106c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c090614205565b60405180910390fd5b600160028111156106dd576106dc613834565b5b60065f8581526020019081526020015f206001015f9054906101000a900460ff1660028111156107105761070f613834565b5b14610750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107479061426d565b60405180910390fd5b5f600681111561076357610762613834565b5b82600681111561077657610775613834565b5b036107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad906142d5565b60405180910390fd5b5f60065f8581526020019081526020015f209050806005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661088b576001816005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f81548092919061088590614320565b91905055505b5f816004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8560068111156108df576108de613834565b5b60068111156108f1576108f0613834565b5b81526020019081526020015f20540361099a57806003015f84600681111561091c5761091b613834565b5b600681111561092e5761092d613834565b5b81526020019081526020015f2033908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34816004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8560068111156109ee576109ed613834565b5b6006811115610a00576109ff613834565b5b81526020019081526020015f205f828254610a1b9190614367565b9250508190555034816002015f856006811115610a3b57610a3a613834565b5b6006811115610a4d57610a4c613834565b5b81526020019081526020015f205f828254610a689190614367565b9250508190555034816006015f828254610a829190614367565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847fbfcd8f4e47cc529f86cdc7eab8fb80e015a298e021fcaee72df1f76dd57cf487853442604051610ad49392919061439a565b60405180910390a350505050565b6060805f5f5f600260036004546005546078848054610b00906143fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2c906143fc565b8015610b775780601f10610b4e57610100808354040283529160200191610b77565b820191905f5260205f20905b815481529060010190602001808311610b5a57829003601f168201915b50505050509450838054610b8a906143fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb6906143fc565b8015610c015780601f10610bd857610100808354040283529160200191610c01565b820191905f5260205f20905b815481529060010190602001808311610be457829003601f168201915b50505050509350945094509450945094509091929394565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e9061449c565b60405180910390fd5b805f81118015610cb8575060788111155b610cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cee90614177565b60405180910390fd5b60016002811115610d0b57610d0a613834565b5b60065f8481526020019081526020015f206001015f9054906101000a900460ff166002811115610d3e57610d3d613834565b5b14610d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7590614504565b60405180910390fd5b5f60065f8481526020019081526020015f206001015f6101000a81548160ff02191690836002811115610db457610db3613834565b5b0217905550817f6991db13c9034e0bcafe7f947720e92c4729153910eb3238c69a912b7fa16adc42604051610de99190613738565b60405180910390a25050565b6007602052805f5260405f205f915090505481565b5f5f5f5f5f5f5f5f885f81118015610e23575060788111155b610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5990614177565b60405180910390fd5b5f60065f8c81526020019081526020015f209050806002015f60016006811115610e8f57610e8e613834565b5b6006811115610ea157610ea0613834565b5b81526020019081526020015f20549950806002015f60026006811115610eca57610ec9613834565b5b6006811115610edc57610edb613834565b5b81526020019081526020015f20549850806002015f60036006811115610f0557610f04613834565b5b6006811115610f1757610f16613834565b5b81526020019081526020015f20549750806002015f60046006811115610f4057610f3f613834565b5b6006811115610f5257610f51613834565b5b81526020019081526020015f20549650806002015f60056006811115610f7b57610f7a613834565b5b6006811115610f8d57610f8c613834565b5b81526020019081526020015f20549550806002015f600680811115610fb557610fb4613834565b5b6006811115610fc757610fc6613834565b5b81526020019081526020015f2054945080600601549350806007015492505050919395975091939597565b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f8111611075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106c9061456c565b60405180910390fd5b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f193505050501580156110fa573d5f5f3e3d5ffd5b5050565b6060806060838511158015611114575060788411155b611153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114a906145d4565b60405180910390fd5b5f6001868661116291906145f2565b61116c9190614367565b90508067ffffffffffffffff81111561118857611187613b09565b5b6040519080825280602002602001820160405280156111b65781602001602082028036833780820191505090505b5093508067ffffffffffffffff8111156111d3576111d2613b09565b5b6040519080825280602002602001820160405280156112015781602001602082028036833780820191505090505b5092508067ffffffffffffffff81111561121e5761121d613b09565b5b60405190808252806020026020018201604052801561124c5781602001602082028036833780820191505090505b5091505f5f90505b8181101561137a575f81886112699190614367565b905060065f8281526020019081526020015f206001015f9054906101000a900460ff1686838151811061129f5761129e614625565b5b602002602001019060028111156112b9576112b8613834565b5b908160028111156112cd576112cc613834565b5b8152505060065f8281526020019081526020015f2060010160019054906101000a900460ff1685838151811061130657611305614625565b5b602002602001019060068111156113205761131f613834565b5b9081600681111561133457611333613834565b5b8152505060065f8281526020019081526020015f20600601548483815181106113605761135f614625565b5b602002602001018181525050508080600101915050611254565b50509250925092565b825f81118015611394575060788111155b6113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca90614177565b60405180910390fd5b8151835114611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e9061469c565b60405180910390fd5b5f83511161145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190614704565b60405180910390fd5b6001600281111561146e5761146d613834565b5b60065f8681526020019081526020015f206001015f9054906101000a900460ff1660028111156114a1576114a0613834565b5b146114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d89061426d565b60405180910390fd5b5f5f90505f5f90505b8351811015611604575f84828151811061150757611506614625565b5b60200260200101511161154f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154690614792565b60405180910390fd5b5f600681111561156257611561613834565b5b85828151811061157557611574614625565b5b6020026020010151600681111561158f5761158e613834565b5b036115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c6906142d5565b60405180910390fd5b8381815181106115e2576115e1614625565b5b6020026020010151826115f59190614367565b915080806001019150506114ea565b50803414611647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163e90614820565b60405180910390fd5b5f60065f8781526020019081526020015f209050806005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661171c576001816005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f81548092919061171690614320565b91905055505b5f5f90505b85518110156119c6575f86828151811061173e5761173d614625565b5b602002602001015190505f86838151811061175c5761175b614625565b5b602002602001015190505f846004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460068111156117ba576117b9613834565b5b60068111156117cc576117cb613834565b5b81526020019081526020015f20540361187557836003015f8360068111156117f7576117f6613834565b5b600681111561180957611808613834565b5b81526020019081526020015f2033908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80846004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460068111156118c9576118c8613834565b5b60068111156118db576118da613834565b5b81526020019081526020015f205f8282546118f69190614367565b9250508190555080846002015f84600681111561191657611915613834565b5b600681111561192857611927613834565b5b81526020019081526020015f205f8282546119439190614367565b9250508190555080846006015f82825461195d9190614367565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16897fbfcd8f4e47cc529f86cdc7eab8fb80e015a298e021fcaee72df1f76dd57cf4878484426040516119af9392919061439a565b60405180910390a350508080600101915050611721565b50505050505050565b5f60075f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9a9061449c565b60405180910390fd5b565b5f5f5f611ab06134e3565b5f5f5f875f81118015611ac4575060788111155b611b03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afa90614177565b60405180910390fd5b5f60065f8b81526020019081526020015f2090505f6040518060c00160405280836002015f60016006811115611b3c57611b3b613834565b5b6006811115611b4e57611b4d613834565b5b81526020019081526020015f20548152602001836002015f60026006811115611b7a57611b79613834565b5b6006811115611b8c57611b8b613834565b5b81526020019081526020015f20548152602001836002015f60036006811115611bb857611bb7613834565b5b6006811115611bca57611bc9613834565b5b81526020019081526020015f20548152602001836002015f60046006811115611bf657611bf5613834565b5b6006811115611c0857611c07613834565b5b81526020019081526020015f20548152602001836002015f60056006811115611c3457611c33613834565b5b6006811115611c4657611c45613834565b5b81526020019081526020015f20548152602001836002015f600680811115611c7157611c70613834565b5b6006811115611c8357611c82613834565b5b81526020019081526020015f20548152509050816001015f9054906101000a900460ff168260010160019054906101000a900460ff168360060154838560070154866008015f9054906101000a900460ff168760080160019054906101000a900460ff169950995099509950995099509950505050919395979092949650565b5f835f81118015611d15575060788111155b611d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4b90614177565b60405180910390fd5b60065f8681526020019081526020015f206004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f846006811115611db757611db6613834565b5b6006811115611dc957611dc8613834565b5b81526020019081526020015f20549150509392505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e669061449c565b60405180910390fd5b815f81118015611e80575060788111155b611ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb690614177565b60405180910390fd5b5f6002811115611ed257611ed1613834565b5b60065f8581526020019081526020015f206001015f9054906101000a900460ff166002811115611f0557611f04613834565b5b14611f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3c90614888565b60405180910390fd5b60065f8481526020019081526020015f206008015f9054906101000a900460ff16158015611f92575060065f8481526020019081526020015f2060080160019054906101000a900460ff16155b611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc8906148f0565b60405180910390fd5b827f818240b4f0ccf86739623af73c82fa4df6484f69ac1d3bb0771f238793eafda5834260405161200392919061490e565b60405180910390a261201483612dc6565b505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209e9061449c565b60405180910390fd5b805f811180156120b8575060788111155b6120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90614177565b60405180910390fd5b5f600281111561210a57612109613834565b5b60065f8481526020019081526020015f206001015f9054906101000a900460ff16600281111561213d5761213c613834565b5b1461217d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217490614986565b60405180910390fd5b600160055461218c9190614367565b82146121cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c4906149ee565b60405180910390fd5b8160065f8481526020019081526020015f205f0181905550600160065f8481526020019081526020015f206001015f6101000a81548160ff0219169083600281111561221c5761221b613834565b5b02179055505f60065f8481526020019081526020015f2060010160016101000a81548160ff0219169083600681111561225857612257613834565b5b021790555081600581905550817f291d1b83f3b43aa0636b68ee4730403e7972b8ba37cc917ed6d8a6008d291c57426040516122949190613738565b60405180910390a25050565b5f825f811180156122b2575060788111155b6122f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e890614177565b60405180910390fd5b5f60065f8681526020019081526020015f209050806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6001600681111561235957612358613834565b5b600681111561236b5761236a613834565b5b81526020019081526020015f2054836123849190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600260068111156123da576123d9613834565b5b60068111156123ec576123eb613834565b5b81526020019081526020015f2054836124059190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6003600681111561245b5761245a613834565b5b600681111561246d5761246c613834565b5b81526020019081526020015f2054836124869190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600460068111156124dc576124db613834565b5b60068111156124ee576124ed613834565b5b81526020019081526020015f2054836125079190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6005600681111561255d5761255c613834565b5b600681111561256f5761256e613834565b5b81526020019081526020015f2054836125889190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6006808111156125dd576125dc613834565b5b60068111156125ef576125ee613834565b5b81526020019081526020015f2054836126089190614367565b9250505092915050565b5f47905090565b60028054612626906143fc565b80601f0160208091040260200160405190810160405280929190818152602001828054612652906143fc565b801561269d5780601f106126745761010080835404028352916020019161269d565b820191905f5260205f20905b81548152906001019060200180831161268057829003601f168201915b505050505081565b600380546126b2906143fc565b80601f01602080910402602001604051908101604052809291908181526020018280546126de906143fc565b80156127295780601f1061270057610100808354040283529160200191612729565b820191905f5260205f20905b81548152906001019060200180831161270c57829003601f168201915b505050505081565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052805f5260405f205f91509050805f015490806001015f9054906101000a900460ff16908060010160019054906101000a900460ff1690806006015490806007015490806008015f9054906101000a900460ff16908060080160019054906101000a900460ff16905087565b60055481565b60045481565b6060600160068111156127e7576127e6613834565b5b8260068111156127fa576127f9613834565b5b0361283c576040518060400160405280600e81526020017f426f756e646172792028342f36290000000000000000000000000000000000008152509050612a81565b600260068111156128505761284f613834565b5b82600681111561286357612862613834565b5b036128a5576040518060400160405280600681526020017f5769636b657400000000000000000000000000000000000000000000000000008152509050612a81565b600360068111156128b9576128b8613834565b5b8260068111156128cc576128cb613834565b5b0361290e576040518060400160405280600881526020017f446f742042616c6c0000000000000000000000000000000000000000000000008152509050612a81565b6004600681111561292257612921613834565b5b82600681111561293557612934613834565b5b03612977576040518060400160405280600581526020017f312052756e0000000000000000000000000000000000000000000000000000008152509050612a81565b6005600681111561298b5761298a613834565b5b82600681111561299e5761299d613834565b5b036129e0576040518060400160405280600681526020017f322052756e7300000000000000000000000000000000000000000000000000008152509050612a81565b6006808111156129f3576129f2613834565b5b826006811115612a0657612a05613834565b5b03612a48576040518060400160405280601581526020017f4578747261732028576964652f4e6f2042616c6c2900000000000000000000008152509050612a81565b6040518060400160405280600781526020017f50656e64696e670000000000000000000000000000000000000000000000000081525090505b919050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b607881565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b359061449c565b60405180910390fd5b815f81118015612b4f575060788111155b612b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8590614177565b60405180910390fd5b5f6002811115612ba157612ba0613834565b5b60065f8581526020019081526020015f206001015f9054906101000a900460ff166002811115612bd457612bd3613834565b5b14612c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0b90614888565b60405180910390fd5b5f6006811115612c2757612c26613834565b5b826006811115612c3a57612c39613834565b5b03612c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7190614a56565b60405180910390fd5b60065f8481526020019081526020015f206008015f9054906101000a900460ff16158015612cc7575060065f8481526020019081526020015f2060080160019054906101000a900460ff16155b612d06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cfd906148f0565b60405180910390fd5b8160065f8581526020019081526020015f2060010160016101000a81548160ff02191690836006811115612d3d57612d3c613834565b5b0217905550600260065f8581526020019081526020015f206001015f6101000a81548160ff02191690836002811115612d7957612d78613834565b5b0217905550827f5211f9be544837238a73fb7e20c869b0ded382cced50128e806ac599e47e45198342604051612db0929190614a74565b60405180910390a2612dc18361316e565b505050565b5f60065f8381526020019081526020015f2090505f5f90505f5f90505f6040518060c0016040528060016006811115612e0257612e01613834565b5b6006811115612e1457612e13613834565b5b815260200160026006811115612e2d57612e2c613834565b5b6006811115612e3f57612e3e613834565b5b815260200160036006811115612e5857612e57613834565b5b6006811115612e6a57612e69613834565b5b815260200160046006811115612e8357612e82613834565b5b6006811115612e9557612e94613834565b5b815260200160056006811115612eae57612ead613834565b5b6006811115612ec057612ebf613834565b5b8152602001600680811115612ed857612ed7613834565b5b6006811115612eea57612ee9613834565b5b81525090505f5f90505b600681101561310d575f828260068110612f1157612f10614625565b5b602002015190505f866003015f836006811115612f3157612f30613834565b5b6006811115612f4357612f42613834565b5b81526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015612fcd57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612f84575b505050505090505f5f90505b81518110156130fd575f828281518110612ff657612ff5614625565b5b602002602001015190505f896004015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f86600681111561305457613053613834565b5b600681111561306657613065613834565b5b81526020019081526020015f205490505f8111156130ee578060075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546130ca9190614367565b9250508190555080896130dd9190614367565b985087806130ea90614320565b9850505b50508080600101915050612fd9565b5050508080600101915050612ef4565b5060018460080160016101000a81548160ff021916908315150217905550847f0b807bbd7b57312d116372fed998c55b214f5eaaddf6bd9ee33de5b739b9fcde84844260405161315f93929190614a9b565b60405180910390a25050505050565b5f60065f8381526020019081526020015f2090505f8160010160019054906101000a900460ff1690505f826002015f8360068111156131b0576131af613834565b5b60068111156131c2576131c1613834565b5b81526020019081526020015f2054036131e5576131de83612dc6565b50506131f1565b6131ee836131f4565b50505b50565b5f60065f8381526020019081526020015f2090505f8160010160019054906101000a900460ff1690505f826003015f83600681111561323657613235613834565b5b600681111561324857613247613834565b5b81526020019081526020015f208054806020026020016040519081016040528092919081815260200182805480156132d257602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613289575b505050505090505f836002015f8460068111156132f2576132f1613834565b5b600681111561330457613303613834565b5b81526020019081526020015f205490505f846006015490505f5f90505b835181101561343b575f84828151811061333e5761333d614625565b5b602002602001015190505f876004015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f88600681111561339c5761339b613834565b5b60068111156133ae576133ad613834565b5b81526020019081526020015f205490505f8585836133cc9190614ad0565b6133d69190614b3e565b90508060075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546134249190614367565b925050819055505050508080600101915050613321565b506001856008015f6101000a81548160ff021916908315150217905550857fc61d96cd192999e5e90d09489a76a97d62f3fa653cf753163b1aa7f668dadd5b858386514260405161348f9493929190614b6e565b60405180910390a2607886036134db577f991e491269dfe69f420335bc2b25883adb8c195c28e0a0670809b390145cb056600454426040516134d2929190614bb1565b60405180910390a15b505050505050565b6040518060c00160405280600690602082028036833780820191505090505090565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b61352881613516565b8114613532575f5ffd5b50565b5f813590506135438161351f565b92915050565b60078110613555575f5ffd5b50565b5f8135905061356681613549565b92915050565b5f5f604083850312156135825761358161350e565b5b5f61358f85828601613535565b92505060206135a085828601613558565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6135ec826135aa565b6135f681856135b4565b93506136068185602086016135c4565b61360f816135d2565b840191505092915050565b61362381613516565b82525050565b5f60a0820190508181035f83015261364181886135e2565b9050818103602083015261365581876135e2565b9050613664604083018661361a565b613671606083018561361a565b61367e608083018461361a565b9695505050505050565b5f6020828403121561369d5761369c61350e565b5b5f6136aa84828501613535565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6136dc826136b3565b9050919050565b6136ec816136d2565b81146136f6575f5ffd5b50565b5f81359050613707816136e3565b92915050565b5f602082840312156137225761372161350e565b5b5f61372f848285016136f9565b91505092915050565b5f60208201905061374b5f83018461361a565b92915050565b5f610100820190506137655f83018b61361a565b613772602083018a61361a565b61377f604083018961361a565b61378c606083018861361a565b613799608083018761361a565b6137a660a083018661361a565b6137b360c083018561361a565b6137c060e083018461361a565b9998505050505050505050565b5f5f604083850312156137e3576137e261350e565b5b5f6137f085828601613535565b925050602061380185828601613535565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003811061387257613871613834565b5b50565b5f81905061388282613861565b919050565b5f61389182613875565b9050919050565b6138a181613887565b82525050565b5f6138b28383613898565b60208301905092915050565b5f602082019050919050565b5f6138d48261380b565b6138de8185613815565b93506138e983613825565b805f5b8381101561391957815161390088826138a7565b975061390b836138be565b9250506001810190506138ec565b5085935050505092915050565b5f81519050919050565b5f819050602082019050919050565b600781106139505761394f613834565b5b50565b5f8190506139608261393f565b919050565b5f61396f82613953565b9050919050565b61397f81613965565b82525050565b5f6139908383613976565b60208301905092915050565b5f602082019050919050565b5f6139b282613926565b6139bc8185613815565b93506139c783613930565b805f5b838110156139f75781516139de8882613985565b97506139e98361399c565b9250506001810190506139ca565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b613a3681613516565b82525050565b5f613a478383613a2d565b60208301905092915050565b5f602082019050919050565b5f613a6982613a04565b613a738185613a0e565b9350613a7e83613a1e565b805f5b83811015613aae578151613a958882613a3c565b9750613aa083613a53565b925050600181019050613a81565b5085935050505092915050565b5f6060820190508181035f830152613ad381866138ca565b90508181036020830152613ae781856139a8565b90508181036040830152613afb8184613a5f565b9050949350505050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b613b3f826135d2565b810181811067ffffffffffffffff82111715613b5e57613b5d613b09565b5b80604052505050565b5f613b70613505565b9050613b7c8282613b36565b919050565b5f67ffffffffffffffff821115613b9b57613b9a613b09565b5b602082029050602081019050919050565b5f5ffd5b5f613bc2613bbd84613b81565b613b67565b90508083825260208201905060208402830185811115613be557613be4613bac565b5b835b81811015613c0e5780613bfa8882613558565b845260208401935050602081019050613be7565b5050509392505050565b5f82601f830112613c2c57613c2b613b05565b5b8135613c3c848260208601613bb0565b91505092915050565b5f67ffffffffffffffff821115613c5f57613c5e613b09565b5b602082029050602081019050919050565b5f613c82613c7d84613c45565b613b67565b90508083825260208201905060208402830185811115613ca557613ca4613bac565b5b835b81811015613cce5780613cba8882613535565b845260208401935050602081019050613ca7565b5050509392505050565b5f82601f830112613cec57613ceb613b05565b5b8135613cfc848260208601613c70565b91505092915050565b5f5f5f60608486031215613d1c57613d1b61350e565b5b5f613d2986828701613535565b935050602084013567ffffffffffffffff811115613d4a57613d49613512565b5b613d5686828701613c18565b925050604084013567ffffffffffffffff811115613d7757613d76613512565b5b613d8386828701613cd8565b9150509250925092565b613d9681613887565b82525050565b613da581613965565b82525050565b5f60069050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b613ddd81613dab565b613de78184613db5565b9250613df282613dbf565b805f5b83811015613e22578151613e098782613a3c565b9650613e1483613dc8565b925050600181019050613df5565b505050505050565b5f8115159050919050565b613e3e81613e2a565b82525050565b5f61018082019050613e585f83018a613d8d565b613e656020830189613d9c565b613e72604083018861361a565b613e7f6060830187613dd4565b613e8d61012083018661361a565b613e9b610140830185613e35565b613ea9610160830184613e35565b98975050505050505050565b5f5f5f60608486031215613ecc57613ecb61350e565b5b5f613ed986828701613535565b9350506020613eea868287016136f9565b9250506040613efb86828701613558565b9150509250925092565b5f5ffd5b5f67ffffffffffffffff821115613f2357613f22613b09565b5b613f2c826135d2565b9050602081019050919050565b828183375f83830152505050565b5f613f59613f5484613f09565b613b67565b905082815260208101848484011115613f7557613f74613f05565b5b613f80848285613f39565b509392505050565b5f82601f830112613f9c57613f9b613b05565b5b8135613fac848260208601613f47565b91505092915050565b5f5f60408385031215613fcb57613fca61350e565b5b5f613fd885828601613535565b925050602083013567ffffffffffffffff811115613ff957613ff8613512565b5b61400585828601613f88565b9150509250929050565b5f5f604083850312156140255761402461350e565b5b5f61403285828601613535565b9250506020614043858286016136f9565b9150509250929050565b5f6020820190508181035f83015261406581846135e2565b905092915050565b614076816136d2565b82525050565b5f60208201905061408f5f83018461406d565b92915050565b5f60e0820190506140a85f83018a61361a565b6140b56020830189613d8d565b6140c26040830188613d9c565b6140cf606083018761361a565b6140dc608083018661361a565b6140e960a0830185613e35565b6140f660c0830184613e35565b98975050505050505050565b5f602082840312156141175761411661350e565b5b5f61412484828501613558565b91505092915050565b7f496e76616c69642062616c6c206e756d626572000000000000000000000000005f82015250565b5f6141616013836135b4565b915061416c8261412d565b602082019050919050565b5f6020820190508181035f83015261418e81614155565b9050919050565b7f42657420616d6f756e74206d7573742062652067726561746572207468616e205f8201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b5f6141ef6021836135b4565b91506141fa82614195565b604082019050919050565b5f6020820190508181035f83015261421c816141e3565b9050919050565b7f42657474696e67206e6f74206f70656e20666f7220746869732062616c6c00005f82015250565b5f614257601e836135b4565b915061426282614223565b602082019050919050565b5f6020820190508181035f8301526142848161424b565b9050919050565b7f43616e6e6f7420626574206f6e2050454e44494e47206f7574636f6d650000005f82015250565b5f6142bf601d836135b4565b91506142ca8261428b565b602082019050919050565b5f6020820190508181035f8301526142ec816142b3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61432a82613516565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361435c5761435b6142f3565b5b600182019050919050565b5f61437182613516565b915061437c83613516565b9250828201905080821115614394576143936142f3565b5b92915050565b5f6060820190506143ad5f830186613d9c565b6143ba602083018561361a565b6143c7604083018461361a565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061441357607f821691505b602082108103614426576144256143cf565b5b50919050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f5f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f6144866021836135b4565b91506144918261442c565b604082019050919050565b5f6020820190508181035f8301526144b38161447a565b9050919050565b7f42616c6c206e6f74206f70656e20666f722062657474696e67000000000000005f82015250565b5f6144ee6019836135b4565b91506144f9826144ba565b602082019050919050565b5f6020820190508181035f83015261451b816144e2565b9050919050565b7f4e6f2062616c616e636520746f207769746864726177000000000000000000005f82015250565b5f6145566016836135b4565b915061456182614522565b602082019050919050565b5f6020820190508181035f8301526145838161454a565b9050919050565b7f496e76616c69642072616e6765000000000000000000000000000000000000005f82015250565b5f6145be600d836135b4565b91506145c98261458a565b602082019050919050565b5f6020820190508181035f8301526145eb816145b2565b9050919050565b5f6145fc82613516565b915061460783613516565b925082820390508181111561461f5761461e6142f3565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f417272617973206c656e677468206d69736d61746368000000000000000000005f82015250565b5f6146866016836135b4565b915061469182614652565b602082019050919050565b5f6020820190508181035f8301526146b38161467a565b9050919050565b7f4e6f2062657473207370656369666965640000000000000000000000000000005f82015250565b5f6146ee6011836135b4565b91506146f9826146ba565b602082019050919050565b5f6020820190508181035f83015261471b816146e2565b9050919050565b7f416c6c2062657420616d6f756e7473206d7573742062652067726561746572205f8201527f7468616e20300000000000000000000000000000000000000000000000000000602082015250565b5f61477c6026836135b4565b915061478782614722565b604082019050919050565b5f6020820190508181035f8301526147a981614770565b9050919050565b7f53656e742076616c756520646f65736e2774206d6174636820746f74616c20625f8201527f657420616d6f756e747300000000000000000000000000000000000000000000602082015250565b5f61480a602a836135b4565b9150614815826147b0565b604082019050919050565b5f6020820190508181035f830152614837816147fe565b9050919050565b7f42616c6c206d75737420626520636c6f736564206669727374000000000000005f82015250565b5f6148726019836135b4565b915061487d8261483e565b602082019050919050565b5f6020820190508181035f83015261489f81614866565b9050919050565b7f416c72656164792070726f6365737365640000000000000000000000000000005f82015250565b5f6148da6011836135b4565b91506148e5826148a6565b602082019050919050565b5f6020820190508181035f830152614907816148ce565b9050919050565b5f6040820190508181035f83015261492681856135e2565b9050614935602083018461361a565b9392505050565b7f42616c6c20616c7265616479206f70656e6564206f72207265736f6c766564005f82015250565b5f614970601f836135b4565b915061497b8261493c565b602082019050919050565b5f6020820190508181035f83015261499d81614964565b9050919050565b7f4d757374206f70656e2062616c6c7320696e2073657175656e636500000000005f82015250565b5f6149d8601b836135b4565b91506149e3826149a4565b602082019050919050565b5f6020820190508181035f830152614a05816149cc565b9050919050565b7f526573756c742063616e6e6f742062652050454e44494e4700000000000000005f82015250565b5f614a406018836135b4565b9150614a4b82614a0c565b602082019050919050565b5f6020820190508181035f830152614a6d81614a34565b9050919050565b5f604082019050614a875f830185613d9c565b614a94602083018461361a565b9392505050565b5f606082019050614aae5f83018661361a565b614abb602083018561361a565b614ac8604083018461361a565b949350505050565b5f614ada82613516565b9150614ae583613516565b9250828202614af381613516565b91508282048414831517614b0a57614b096142f3565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f614b4882613516565b9150614b5383613516565b925082614b6357614b62614b11565b5b828204905092915050565b5f608082019050614b815f830187613d9c565b614b8e602083018661361a565b614b9b604083018561361a565b614ba8606083018461361a565b95945050505050565b5f604082019050614bc45f83018561361a565b614bd1602083018461361a565b939250505056fea26469706673582212206c575f14dad1a9f1c98b0a6b87c46a88510a5b2240656d119d96d5059e4d39bc64736f6c634300081e0033a26469706673582212203dcfbdf08a92dedb5e688e59ad6efbc4750351eeae1b3073ec4f4877f0fc5bcc64736f6c634300081e0033","sourceMap":"94:2032:16:-:0;;;524:49;;;;;;;;;;556:10;548:5;;:18;;;;;;;;;;;;;;;;;;94:2032;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405260043610610073575f3560e01c806352897beb1161004d57806352897beb146101065780638da5cb5b1461014257806391898efd1461016c578063bce24669146101a857610074565b806312065fe01461007657806313e4c714146100a05780631b76929c146100dc57610074565b5b005b348015610081575f5ffd5b5061008a6101d0565b60405161009791906107ee565b60405180910390f35b3480156100ab575f5ffd5b506100c660048036038101906100c19190610842565b6101d7565b6040516100d391906108ac565b60405180910390f35b3480156100e7575f5ffd5b506100f0610212565b6040516100fd919061097c565b60405180910390f35b348015610111575f5ffd5b5061012c600480360381019061012791906109c6565b61029d565b6040516101399190610a0b565b60405180910390f35b34801561014d575f5ffd5b506101566102ba565b60405161016391906108ac565b60405180910390f35b348015610177575f5ffd5b50610192600480360381019061018d9190610b60565b6102de565b60405161019f91906108ac565b60405180910390f35b3480156101b3575f5ffd5b506101ce60048036038101906101c991906109c6565b6104e0565b005b5f47905090565b600181815481106101e6575f80fd5b905f5260205f20015f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600180548060200260200160405190810160405280929190818152602001828054801561029357602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161024a575b5050505050905090565b6002602052805f5260405f205f915054906101000a900460ff1681565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036490610c68565b60405180910390fd5b5f8484845f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161039e906107c9565b6103ab9493929190610cd6565b604051809103905ff0801580156103c4573d5f5f3e3d5ffd5b5090505f819050600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f3d5e0af43dbb292d0bab61d6d56e071c8ff5001e3ec50053339fac781d3df670878787426040516104cc9493929190610d27565b60405180910390a280925050509392505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461056e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056590610c68565b60405180910390fd5b60025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee90610dc2565b60405180910390fd5b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505f5f90505b6001805490508110156107c5578173ffffffffffffffffffffffffffffffffffffffff166001828154811061068857610687610de0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036107b85760018080805490506106dd9190610e3a565b815481106106ee576106ed610de0565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001828154811061072a57610729610de0565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061078157610780610e6d565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556107c5565b8080600101915050610650565b5050565b61524b80610e9b83390190565b5f819050919050565b6107e8816107d6565b82525050565b5f6020820190506108015f8301846107df565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b610821816107d6565b811461082b575f5ffd5b50565b5f8135905061083c81610818565b92915050565b5f6020828403121561085757610856610810565b5b5f6108648482850161082e565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108968261086d565b9050919050565b6108a68161088c565b82525050565b5f6020820190506108bf5f83018461089d565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6108f78161088c565b82525050565b5f61090883836108ee565b60208301905092915050565b5f602082019050919050565b5f61092a826108c5565b61093481856108cf565b935061093f836108df565b805f5b8381101561096f57815161095688826108fd565b975061096183610914565b925050600181019050610942565b5085935050505092915050565b5f6020820190508181035f8301526109948184610920565b905092915050565b6109a58161088c565b81146109af575f5ffd5b50565b5f813590506109c08161099c565b92915050565b5f602082840312156109db576109da610810565b5b5f6109e8848285016109b2565b91505092915050565b5f8115159050919050565b610a05816109f1565b82525050565b5f602082019050610a1e5f8301846109fc565b92915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610a7282610a2c565b810181811067ffffffffffffffff82111715610a9157610a90610a3c565b5b80604052505050565b5f610aa3610807565b9050610aaf8282610a69565b919050565b5f67ffffffffffffffff821115610ace57610acd610a3c565b5b610ad782610a2c565b9050602081019050919050565b828183375f83830152505050565b5f610b04610aff84610ab4565b610a9a565b905082815260208101848484011115610b2057610b1f610a28565b5b610b2b848285610ae4565b509392505050565b5f82601f830112610b4757610b46610a24565b5b8135610b57848260208601610af2565b91505092915050565b5f5f5f60608486031215610b7757610b76610810565b5b5f84013567ffffffffffffffff811115610b9457610b93610814565b5b610ba086828701610b33565b935050602084013567ffffffffffffffff811115610bc157610bc0610814565b5b610bcd86828701610b33565b9250506040610bde8682870161082e565b9150509250925092565b5f82825260208201905092915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f5f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f610c52602183610be8565b9150610c5d82610bf8565b604082019050919050565b5f6020820190508181035f830152610c7f81610c46565b9050919050565b5f81519050919050565b8281835e5f83830152505050565b5f610ca882610c86565b610cb28185610be8565b9350610cc2818560208601610c90565b610ccb81610a2c565b840191505092915050565b5f6080820190508181035f830152610cee8187610c9e565b90508181036020830152610d028186610c9e565b9050610d1160408301856107df565b610d1e606083018461089d565b95945050505050565b5f6080820190508181035f830152610d3f8187610c9e565b90508181036020830152610d538186610c9e565b9050610d6260408301856107df565b610d6f60608301846107df565b95945050505050565b7f496e76616c69642067616d6520616464726573730000000000000000000000005f82015250565b5f610dac601483610be8565b9150610db782610d78565b602082019050919050565b5f6020820190508181035f830152610dd981610da0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610e44826107d6565b9150610e4f836107d6565b9250828203905081811115610e6757610e66610e0d565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfe60806040525f600555348015610013575f5ffd5b5060405161524b38038061524b833981810160405281019061003591906102be565b83600290816100449190610561565b5082600390816100549190610561565b5081600481905550805f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050610630565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610143826100fd565b810181811067ffffffffffffffff821117156101625761016161010d565b5b80604052505050565b5f6101746100e4565b9050610180828261013a565b919050565b5f67ffffffffffffffff82111561019f5761019e61010d565b5b6101a8826100fd565b9050602081019050919050565b8281835e5f83830152505050565b5f6101d56101d084610185565b61016b565b9050828152602081018484840111156101f1576101f06100f9565b5b6101fc8482856101b5565b509392505050565b5f82601f830112610218576102176100f5565b5b81516102288482602086016101c3565b91505092915050565b5f819050919050565b61024381610231565b811461024d575f5ffd5b50565b5f8151905061025e8161023a565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61028d82610264565b9050919050565b61029d81610283565b81146102a7575f5ffd5b50565b5f815190506102b881610294565b92915050565b5f5f5f5f608085870312156102d6576102d56100ed565b5b5f85015167ffffffffffffffff8111156102f3576102f26100f1565b5b6102ff87828801610204565b945050602085015167ffffffffffffffff8111156103205761031f6100f1565b5b61032c87828801610204565b935050604061033d87828801610250565b925050606061034e878288016102aa565b91505092959194509250565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806103a857607f821691505b6020821081036103bb576103ba610364565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261041d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826103e2565b61042786836103e2565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61046261045d61045884610231565b61043f565b610231565b9050919050565b5f819050919050565b61047b83610448565b61048f61048782610469565b8484546103ee565b825550505050565b5f5f905090565b6104a6610497565b6104b1818484610472565b505050565b5b818110156104d4576104c95f8261049e565b6001810190506104b7565b5050565b601f821115610519576104ea816103c1565b6104f3846103d3565b81016020851015610502578190505b61051661050e856103d3565b8301826104b6565b50505b505050565b5f82821c905092915050565b5f6105395f198460080261051e565b1980831691505092915050565b5f610551838361052a565b9150826002028217905092915050565b61056a8261035a565b67ffffffffffffffff8111156105835761058261010d565b5b61058d8254610391565b6105988282856104d8565b5f60209050601f8311600181146105c9575f84156105b7578287015190505b6105c18582610546565b865550610628565b601f1984166105d7866103c1565b5f5b828110156105fe578489015182556001820191506020850194506020810190506105d9565b8683101561061b5784890151610617601f89168261052a565b8355505b6001600288020188555050505b505050505050565b614c0e8061063d5f395ff3fe608060405260043610610180575f3560e01c80636c21e514116100d057806390004781116100895780639e4f372b116100635780639e4f372b1461057f578063c45a0155146105bb578063dba71be6146105e5578063edfbcba31461060f57610180565b806390004781146104e957806398c40f351461052b57806399892e471461055557610180565b80636c21e514146103dd5780636e777921146104055780636f9fb98a14610441578063826df9aa1461046b5780638aa7c3e8146104955780638da5cb5b146104bf57610180565b80633e98275f1161013d57806351858e271161011757806351858e271461032157806353be326a1461033757806355b006371461037957806367d85375146103b557610180565b80633e98275f1461028b57806342c4ee5d146102c957806347734892146102e557610180565b806303edf91414610184578063063c67c2146101a0578063162523b3146101ce57806326224c64146101f65780633371c0bf146102325780633ccfd60b14610275575b5f5ffd5b61019e6004803603810190610199919061356c565b610637565b005b3480156101ab575f5ffd5b506101b4610ae2565b6040516101c5959493929190613629565b60405180910390f35b3480156101d9575f5ffd5b506101f460048036038101906101ef9190613688565b610c19565b005b348015610201575f5ffd5b5061021c6004803603810190610217919061370d565b610df5565b6040516102299190613738565b60405180910390f35b34801561023d575f5ffd5b5061025860048036038101906102539190613688565b610e0a565b60405161026c989796959493929190613751565b60405180910390f35b348015610280575f5ffd5b50610289610ff2565b005b348015610296575f5ffd5b506102b160048036038101906102ac91906137cd565b6110fe565b6040516102c093929190613abb565b60405180910390f35b6102e360048036038101906102de9190613d05565b611383565b005b3480156102f0575f5ffd5b5061030b6004803603810190610306919061370d565b6119cf565b6040516103189190613738565b60405180910390f35b34801561032c575f5ffd5b50610335611a15565b005b348015610342575f5ffd5b5061035d60048036038101906103589190613688565b611aa5565b6040516103709796959493929190613e44565b60405180910390f35b348015610384575f5ffd5b5061039f600480360381019061039a9190613eb5565b611d03565b6040516103ac9190613738565b60405180910390f35b3480156103c0575f5ffd5b506103db60048036038101906103d69190613fb5565b611de1565b005b3480156103e8575f5ffd5b5061040360048036038101906103fe9190613688565b612019565b005b348015610410575f5ffd5b5061042b6004803603810190610426919061400f565b6122a0565b6040516104389190613738565b60405180910390f35b34801561044c575f5ffd5b50610455612612565b6040516104629190613738565b60405180910390f35b348015610476575f5ffd5b5061047f612619565b60405161048c919061404d565b60405180910390f35b3480156104a0575f5ffd5b506104a96126a5565b6040516104b6919061404d565b60405180910390f35b3480156104ca575f5ffd5b506104d3612731565b6040516104e0919061407c565b60405180910390f35b3480156104f4575f5ffd5b5061050f600480360381019061050a9190613688565b612755565b6040516105229796959493929190614095565b60405180910390f35b348015610536575f5ffd5b5061053f6127c5565b60405161054c9190613738565b60405180910390f35b348015610560575f5ffd5b506105696127cb565b6040516105769190613738565b60405180910390f35b34801561058a575f5ffd5b506105a560048036038101906105a09190614102565b6127d1565b6040516105b2919061404d565b60405180910390f35b3480156105c6575f5ffd5b506105cf612a86565b6040516105dc919061407c565b60405180910390f35b3480156105f0575f5ffd5b506105f9612aab565b6040516106069190613738565b60405180910390f35b34801561061a575f5ffd5b506106356004803603810190610630919061356c565b612ab0565b005b815f81118015610648575060788111155b610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90614177565b60405180910390fd5b5f34116106c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c090614205565b60405180910390fd5b600160028111156106dd576106dc613834565b5b60065f8581526020019081526020015f206001015f9054906101000a900460ff1660028111156107105761070f613834565b5b14610750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107479061426d565b60405180910390fd5b5f600681111561076357610762613834565b5b82600681111561077657610775613834565b5b036107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad906142d5565b60405180910390fd5b5f60065f8581526020019081526020015f209050806005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661088b576001816005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f81548092919061088590614320565b91905055505b5f816004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8560068111156108df576108de613834565b5b60068111156108f1576108f0613834565b5b81526020019081526020015f20540361099a57806003015f84600681111561091c5761091b613834565b5b600681111561092e5761092d613834565b5b81526020019081526020015f2033908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34816004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8560068111156109ee576109ed613834565b5b6006811115610a00576109ff613834565b5b81526020019081526020015f205f828254610a1b9190614367565b9250508190555034816002015f856006811115610a3b57610a3a613834565b5b6006811115610a4d57610a4c613834565b5b81526020019081526020015f205f828254610a689190614367565b9250508190555034816006015f828254610a829190614367565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847fbfcd8f4e47cc529f86cdc7eab8fb80e015a298e021fcaee72df1f76dd57cf487853442604051610ad49392919061439a565b60405180910390a350505050565b6060805f5f5f600260036004546005546078848054610b00906143fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2c906143fc565b8015610b775780601f10610b4e57610100808354040283529160200191610b77565b820191905f5260205f20905b815481529060010190602001808311610b5a57829003601f168201915b50505050509450838054610b8a906143fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb6906143fc565b8015610c015780601f10610bd857610100808354040283529160200191610c01565b820191905f5260205f20905b815481529060010190602001808311610be457829003601f168201915b50505050509350945094509450945094509091929394565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e9061449c565b60405180910390fd5b805f81118015610cb8575060788111155b610cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cee90614177565b60405180910390fd5b60016002811115610d0b57610d0a613834565b5b60065f8481526020019081526020015f206001015f9054906101000a900460ff166002811115610d3e57610d3d613834565b5b14610d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7590614504565b60405180910390fd5b5f60065f8481526020019081526020015f206001015f6101000a81548160ff02191690836002811115610db457610db3613834565b5b0217905550817f6991db13c9034e0bcafe7f947720e92c4729153910eb3238c69a912b7fa16adc42604051610de99190613738565b60405180910390a25050565b6007602052805f5260405f205f915090505481565b5f5f5f5f5f5f5f5f885f81118015610e23575060788111155b610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5990614177565b60405180910390fd5b5f60065f8c81526020019081526020015f209050806002015f60016006811115610e8f57610e8e613834565b5b6006811115610ea157610ea0613834565b5b81526020019081526020015f20549950806002015f60026006811115610eca57610ec9613834565b5b6006811115610edc57610edb613834565b5b81526020019081526020015f20549850806002015f60036006811115610f0557610f04613834565b5b6006811115610f1757610f16613834565b5b81526020019081526020015f20549750806002015f60046006811115610f4057610f3f613834565b5b6006811115610f5257610f51613834565b5b81526020019081526020015f20549650806002015f60056006811115610f7b57610f7a613834565b5b6006811115610f8d57610f8c613834565b5b81526020019081526020015f20549550806002015f600680811115610fb557610fb4613834565b5b6006811115610fc757610fc6613834565b5b81526020019081526020015f2054945080600601549350806007015492505050919395975091939597565b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f8111611075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106c9061456c565b60405180910390fd5b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f193505050501580156110fa573d5f5f3e3d5ffd5b5050565b6060806060838511158015611114575060788411155b611153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114a906145d4565b60405180910390fd5b5f6001868661116291906145f2565b61116c9190614367565b90508067ffffffffffffffff81111561118857611187613b09565b5b6040519080825280602002602001820160405280156111b65781602001602082028036833780820191505090505b5093508067ffffffffffffffff8111156111d3576111d2613b09565b5b6040519080825280602002602001820160405280156112015781602001602082028036833780820191505090505b5092508067ffffffffffffffff81111561121e5761121d613b09565b5b60405190808252806020026020018201604052801561124c5781602001602082028036833780820191505090505b5091505f5f90505b8181101561137a575f81886112699190614367565b905060065f8281526020019081526020015f206001015f9054906101000a900460ff1686838151811061129f5761129e614625565b5b602002602001019060028111156112b9576112b8613834565b5b908160028111156112cd576112cc613834565b5b8152505060065f8281526020019081526020015f2060010160019054906101000a900460ff1685838151811061130657611305614625565b5b602002602001019060068111156113205761131f613834565b5b9081600681111561133457611333613834565b5b8152505060065f8281526020019081526020015f20600601548483815181106113605761135f614625565b5b602002602001018181525050508080600101915050611254565b50509250925092565b825f81118015611394575060788111155b6113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca90614177565b60405180910390fd5b8151835114611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e9061469c565b60405180910390fd5b5f83511161145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190614704565b60405180910390fd5b6001600281111561146e5761146d613834565b5b60065f8681526020019081526020015f206001015f9054906101000a900460ff1660028111156114a1576114a0613834565b5b146114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d89061426d565b60405180910390fd5b5f5f90505f5f90505b8351811015611604575f84828151811061150757611506614625565b5b60200260200101511161154f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154690614792565b60405180910390fd5b5f600681111561156257611561613834565b5b85828151811061157557611574614625565b5b6020026020010151600681111561158f5761158e613834565b5b036115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c6906142d5565b60405180910390fd5b8381815181106115e2576115e1614625565b5b6020026020010151826115f59190614367565b915080806001019150506114ea565b50803414611647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163e90614820565b60405180910390fd5b5f60065f8781526020019081526020015f209050806005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661171c576001816005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f81548092919061171690614320565b91905055505b5f5f90505b85518110156119c6575f86828151811061173e5761173d614625565b5b602002602001015190505f86838151811061175c5761175b614625565b5b602002602001015190505f846004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460068111156117ba576117b9613834565b5b60068111156117cc576117cb613834565b5b81526020019081526020015f20540361187557836003015f8360068111156117f7576117f6613834565b5b600681111561180957611808613834565b5b81526020019081526020015f2033908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80846004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460068111156118c9576118c8613834565b5b60068111156118db576118da613834565b5b81526020019081526020015f205f8282546118f69190614367565b9250508190555080846002015f84600681111561191657611915613834565b5b600681111561192857611927613834565b5b81526020019081526020015f205f8282546119439190614367565b9250508190555080846006015f82825461195d9190614367565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16897fbfcd8f4e47cc529f86cdc7eab8fb80e015a298e021fcaee72df1f76dd57cf4878484426040516119af9392919061439a565b60405180910390a350508080600101915050611721565b50505050505050565b5f60075f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9a9061449c565b60405180910390fd5b565b5f5f5f611ab06134e3565b5f5f5f875f81118015611ac4575060788111155b611b03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afa90614177565b60405180910390fd5b5f60065f8b81526020019081526020015f2090505f6040518060c00160405280836002015f60016006811115611b3c57611b3b613834565b5b6006811115611b4e57611b4d613834565b5b81526020019081526020015f20548152602001836002015f60026006811115611b7a57611b79613834565b5b6006811115611b8c57611b8b613834565b5b81526020019081526020015f20548152602001836002015f60036006811115611bb857611bb7613834565b5b6006811115611bca57611bc9613834565b5b81526020019081526020015f20548152602001836002015f60046006811115611bf657611bf5613834565b5b6006811115611c0857611c07613834565b5b81526020019081526020015f20548152602001836002015f60056006811115611c3457611c33613834565b5b6006811115611c4657611c45613834565b5b81526020019081526020015f20548152602001836002015f600680811115611c7157611c70613834565b5b6006811115611c8357611c82613834565b5b81526020019081526020015f20548152509050816001015f9054906101000a900460ff168260010160019054906101000a900460ff168360060154838560070154866008015f9054906101000a900460ff168760080160019054906101000a900460ff169950995099509950995099509950505050919395979092949650565b5f835f81118015611d15575060788111155b611d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4b90614177565b60405180910390fd5b60065f8681526020019081526020015f206004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f846006811115611db757611db6613834565b5b6006811115611dc957611dc8613834565b5b81526020019081526020015f20549150509392505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e669061449c565b60405180910390fd5b815f81118015611e80575060788111155b611ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb690614177565b60405180910390fd5b5f6002811115611ed257611ed1613834565b5b60065f8581526020019081526020015f206001015f9054906101000a900460ff166002811115611f0557611f04613834565b5b14611f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3c90614888565b60405180910390fd5b60065f8481526020019081526020015f206008015f9054906101000a900460ff16158015611f92575060065f8481526020019081526020015f2060080160019054906101000a900460ff16155b611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc8906148f0565b60405180910390fd5b827f818240b4f0ccf86739623af73c82fa4df6484f69ac1d3bb0771f238793eafda5834260405161200392919061490e565b60405180910390a261201483612dc6565b505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209e9061449c565b60405180910390fd5b805f811180156120b8575060788111155b6120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90614177565b60405180910390fd5b5f600281111561210a57612109613834565b5b60065f8481526020019081526020015f206001015f9054906101000a900460ff16600281111561213d5761213c613834565b5b1461217d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217490614986565b60405180910390fd5b600160055461218c9190614367565b82146121cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c4906149ee565b60405180910390fd5b8160065f8481526020019081526020015f205f0181905550600160065f8481526020019081526020015f206001015f6101000a81548160ff0219169083600281111561221c5761221b613834565b5b02179055505f60065f8481526020019081526020015f2060010160016101000a81548160ff0219169083600681111561225857612257613834565b5b021790555081600581905550817f291d1b83f3b43aa0636b68ee4730403e7972b8ba37cc917ed6d8a6008d291c57426040516122949190613738565b60405180910390a25050565b5f825f811180156122b2575060788111155b6122f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e890614177565b60405180910390fd5b5f60065f8681526020019081526020015f209050806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6001600681111561235957612358613834565b5b600681111561236b5761236a613834565b5b81526020019081526020015f2054836123849190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600260068111156123da576123d9613834565b5b60068111156123ec576123eb613834565b5b81526020019081526020015f2054836124059190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6003600681111561245b5761245a613834565b5b600681111561246d5761246c613834565b5b81526020019081526020015f2054836124869190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600460068111156124dc576124db613834565b5b60068111156124ee576124ed613834565b5b81526020019081526020015f2054836125079190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6005600681111561255d5761255c613834565b5b600681111561256f5761256e613834565b5b81526020019081526020015f2054836125889190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6006808111156125dd576125dc613834565b5b60068111156125ef576125ee613834565b5b81526020019081526020015f2054836126089190614367565b9250505092915050565b5f47905090565b60028054612626906143fc565b80601f0160208091040260200160405190810160405280929190818152602001828054612652906143fc565b801561269d5780601f106126745761010080835404028352916020019161269d565b820191905f5260205f20905b81548152906001019060200180831161268057829003601f168201915b505050505081565b600380546126b2906143fc565b80601f01602080910402602001604051908101604052809291908181526020018280546126de906143fc565b80156127295780601f1061270057610100808354040283529160200191612729565b820191905f5260205f20905b81548152906001019060200180831161270c57829003601f168201915b505050505081565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052805f5260405f205f91509050805f015490806001015f9054906101000a900460ff16908060010160019054906101000a900460ff1690806006015490806007015490806008015f9054906101000a900460ff16908060080160019054906101000a900460ff16905087565b60055481565b60045481565b6060600160068111156127e7576127e6613834565b5b8260068111156127fa576127f9613834565b5b0361283c576040518060400160405280600e81526020017f426f756e646172792028342f36290000000000000000000000000000000000008152509050612a81565b600260068111156128505761284f613834565b5b82600681111561286357612862613834565b5b036128a5576040518060400160405280600681526020017f5769636b657400000000000000000000000000000000000000000000000000008152509050612a81565b600360068111156128b9576128b8613834565b5b8260068111156128cc576128cb613834565b5b0361290e576040518060400160405280600881526020017f446f742042616c6c0000000000000000000000000000000000000000000000008152509050612a81565b6004600681111561292257612921613834565b5b82600681111561293557612934613834565b5b03612977576040518060400160405280600581526020017f312052756e0000000000000000000000000000000000000000000000000000008152509050612a81565b6005600681111561298b5761298a613834565b5b82600681111561299e5761299d613834565b5b036129e0576040518060400160405280600681526020017f322052756e7300000000000000000000000000000000000000000000000000008152509050612a81565b6006808111156129f3576129f2613834565b5b826006811115612a0657612a05613834565b5b03612a48576040518060400160405280601581526020017f4578747261732028576964652f4e6f2042616c6c2900000000000000000000008152509050612a81565b6040518060400160405280600781526020017f50656e64696e670000000000000000000000000000000000000000000000000081525090505b919050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b607881565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b359061449c565b60405180910390fd5b815f81118015612b4f575060788111155b612b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8590614177565b60405180910390fd5b5f6002811115612ba157612ba0613834565b5b60065f8581526020019081526020015f206001015f9054906101000a900460ff166002811115612bd457612bd3613834565b5b14612c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0b90614888565b60405180910390fd5b5f6006811115612c2757612c26613834565b5b826006811115612c3a57612c39613834565b5b03612c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7190614a56565b60405180910390fd5b60065f8481526020019081526020015f206008015f9054906101000a900460ff16158015612cc7575060065f8481526020019081526020015f2060080160019054906101000a900460ff16155b612d06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cfd906148f0565b60405180910390fd5b8160065f8581526020019081526020015f2060010160016101000a81548160ff02191690836006811115612d3d57612d3c613834565b5b0217905550600260065f8581526020019081526020015f206001015f6101000a81548160ff02191690836002811115612d7957612d78613834565b5b0217905550827f5211f9be544837238a73fb7e20c869b0ded382cced50128e806ac599e47e45198342604051612db0929190614a74565b60405180910390a2612dc18361316e565b505050565b5f60065f8381526020019081526020015f2090505f5f90505f5f90505f6040518060c0016040528060016006811115612e0257612e01613834565b5b6006811115612e1457612e13613834565b5b815260200160026006811115612e2d57612e2c613834565b5b6006811115612e3f57612e3e613834565b5b815260200160036006811115612e5857612e57613834565b5b6006811115612e6a57612e69613834565b5b815260200160046006811115612e8357612e82613834565b5b6006811115612e9557612e94613834565b5b815260200160056006811115612eae57612ead613834565b5b6006811115612ec057612ebf613834565b5b8152602001600680811115612ed857612ed7613834565b5b6006811115612eea57612ee9613834565b5b81525090505f5f90505b600681101561310d575f828260068110612f1157612f10614625565b5b602002015190505f866003015f836006811115612f3157612f30613834565b5b6006811115612f4357612f42613834565b5b81526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015612fcd57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612f84575b505050505090505f5f90505b81518110156130fd575f828281518110612ff657612ff5614625565b5b602002602001015190505f896004015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f86600681111561305457613053613834565b5b600681111561306657613065613834565b5b81526020019081526020015f205490505f8111156130ee578060075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546130ca9190614367565b9250508190555080896130dd9190614367565b985087806130ea90614320565b9850505b50508080600101915050612fd9565b5050508080600101915050612ef4565b5060018460080160016101000a81548160ff021916908315150217905550847f0b807bbd7b57312d116372fed998c55b214f5eaaddf6bd9ee33de5b739b9fcde84844260405161315f93929190614a9b565b60405180910390a25050505050565b5f60065f8381526020019081526020015f2090505f8160010160019054906101000a900460ff1690505f826002015f8360068111156131b0576131af613834565b5b60068111156131c2576131c1613834565b5b81526020019081526020015f2054036131e5576131de83612dc6565b50506131f1565b6131ee836131f4565b50505b50565b5f60065f8381526020019081526020015f2090505f8160010160019054906101000a900460ff1690505f826003015f83600681111561323657613235613834565b5b600681111561324857613247613834565b5b81526020019081526020015f208054806020026020016040519081016040528092919081815260200182805480156132d257602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613289575b505050505090505f836002015f8460068111156132f2576132f1613834565b5b600681111561330457613303613834565b5b81526020019081526020015f205490505f846006015490505f5f90505b835181101561343b575f84828151811061333e5761333d614625565b5b602002602001015190505f876004015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f88600681111561339c5761339b613834565b5b60068111156133ae576133ad613834565b5b81526020019081526020015f205490505f8585836133cc9190614ad0565b6133d69190614b3e565b90508060075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546134249190614367565b925050819055505050508080600101915050613321565b506001856008015f6101000a81548160ff021916908315150217905550857fc61d96cd192999e5e90d09489a76a97d62f3fa653cf753163b1aa7f668dadd5b858386514260405161348f9493929190614b6e565b60405180910390a2607886036134db577f991e491269dfe69f420335bc2b25883adb8c195c28e0a0670809b390145cb056600454426040516134d2929190614bb1565b60405180910390a15b505050505050565b6040518060c00160405280600690602082028036833780820191505090505090565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b61352881613516565b8114613532575f5ffd5b50565b5f813590506135438161351f565b92915050565b60078110613555575f5ffd5b50565b5f8135905061356681613549565b92915050565b5f5f604083850312156135825761358161350e565b5b5f61358f85828601613535565b92505060206135a085828601613558565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6135ec826135aa565b6135f681856135b4565b93506136068185602086016135c4565b61360f816135d2565b840191505092915050565b61362381613516565b82525050565b5f60a0820190508181035f83015261364181886135e2565b9050818103602083015261365581876135e2565b9050613664604083018661361a565b613671606083018561361a565b61367e608083018461361a565b9695505050505050565b5f6020828403121561369d5761369c61350e565b5b5f6136aa84828501613535565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6136dc826136b3565b9050919050565b6136ec816136d2565b81146136f6575f5ffd5b50565b5f81359050613707816136e3565b92915050565b5f602082840312156137225761372161350e565b5b5f61372f848285016136f9565b91505092915050565b5f60208201905061374b5f83018461361a565b92915050565b5f610100820190506137655f83018b61361a565b613772602083018a61361a565b61377f604083018961361a565b61378c606083018861361a565b613799608083018761361a565b6137a660a083018661361a565b6137b360c083018561361a565b6137c060e083018461361a565b9998505050505050505050565b5f5f604083850312156137e3576137e261350e565b5b5f6137f085828601613535565b925050602061380185828601613535565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003811061387257613871613834565b5b50565b5f81905061388282613861565b919050565b5f61389182613875565b9050919050565b6138a181613887565b82525050565b5f6138b28383613898565b60208301905092915050565b5f602082019050919050565b5f6138d48261380b565b6138de8185613815565b93506138e983613825565b805f5b8381101561391957815161390088826138a7565b975061390b836138be565b9250506001810190506138ec565b5085935050505092915050565b5f81519050919050565b5f819050602082019050919050565b600781106139505761394f613834565b5b50565b5f8190506139608261393f565b919050565b5f61396f82613953565b9050919050565b61397f81613965565b82525050565b5f6139908383613976565b60208301905092915050565b5f602082019050919050565b5f6139b282613926565b6139bc8185613815565b93506139c783613930565b805f5b838110156139f75781516139de8882613985565b97506139e98361399c565b9250506001810190506139ca565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b613a3681613516565b82525050565b5f613a478383613a2d565b60208301905092915050565b5f602082019050919050565b5f613a6982613a04565b613a738185613a0e565b9350613a7e83613a1e565b805f5b83811015613aae578151613a958882613a3c565b9750613aa083613a53565b925050600181019050613a81565b5085935050505092915050565b5f6060820190508181035f830152613ad381866138ca565b90508181036020830152613ae781856139a8565b90508181036040830152613afb8184613a5f565b9050949350505050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b613b3f826135d2565b810181811067ffffffffffffffff82111715613b5e57613b5d613b09565b5b80604052505050565b5f613b70613505565b9050613b7c8282613b36565b919050565b5f67ffffffffffffffff821115613b9b57613b9a613b09565b5b602082029050602081019050919050565b5f5ffd5b5f613bc2613bbd84613b81565b613b67565b90508083825260208201905060208402830185811115613be557613be4613bac565b5b835b81811015613c0e5780613bfa8882613558565b845260208401935050602081019050613be7565b5050509392505050565b5f82601f830112613c2c57613c2b613b05565b5b8135613c3c848260208601613bb0565b91505092915050565b5f67ffffffffffffffff821115613c5f57613c5e613b09565b5b602082029050602081019050919050565b5f613c82613c7d84613c45565b613b67565b90508083825260208201905060208402830185811115613ca557613ca4613bac565b5b835b81811015613cce5780613cba8882613535565b845260208401935050602081019050613ca7565b5050509392505050565b5f82601f830112613cec57613ceb613b05565b5b8135613cfc848260208601613c70565b91505092915050565b5f5f5f60608486031215613d1c57613d1b61350e565b5b5f613d2986828701613535565b935050602084013567ffffffffffffffff811115613d4a57613d49613512565b5b613d5686828701613c18565b925050604084013567ffffffffffffffff811115613d7757613d76613512565b5b613d8386828701613cd8565b9150509250925092565b613d9681613887565b82525050565b613da581613965565b82525050565b5f60069050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b613ddd81613dab565b613de78184613db5565b9250613df282613dbf565b805f5b83811015613e22578151613e098782613a3c565b9650613e1483613dc8565b925050600181019050613df5565b505050505050565b5f8115159050919050565b613e3e81613e2a565b82525050565b5f61018082019050613e585f83018a613d8d565b613e656020830189613d9c565b613e72604083018861361a565b613e7f6060830187613dd4565b613e8d61012083018661361a565b613e9b610140830185613e35565b613ea9610160830184613e35565b98975050505050505050565b5f5f5f60608486031215613ecc57613ecb61350e565b5b5f613ed986828701613535565b9350506020613eea868287016136f9565b9250506040613efb86828701613558565b9150509250925092565b5f5ffd5b5f67ffffffffffffffff821115613f2357613f22613b09565b5b613f2c826135d2565b9050602081019050919050565b828183375f83830152505050565b5f613f59613f5484613f09565b613b67565b905082815260208101848484011115613f7557613f74613f05565b5b613f80848285613f39565b509392505050565b5f82601f830112613f9c57613f9b613b05565b5b8135613fac848260208601613f47565b91505092915050565b5f5f60408385031215613fcb57613fca61350e565b5b5f613fd885828601613535565b925050602083013567ffffffffffffffff811115613ff957613ff8613512565b5b61400585828601613f88565b9150509250929050565b5f5f604083850312156140255761402461350e565b5b5f61403285828601613535565b9250506020614043858286016136f9565b9150509250929050565b5f6020820190508181035f83015261406581846135e2565b905092915050565b614076816136d2565b82525050565b5f60208201905061408f5f83018461406d565b92915050565b5f60e0820190506140a85f83018a61361a565b6140b56020830189613d8d565b6140c26040830188613d9c565b6140cf606083018761361a565b6140dc608083018661361a565b6140e960a0830185613e35565b6140f660c0830184613e35565b98975050505050505050565b5f602082840312156141175761411661350e565b5b5f61412484828501613558565b91505092915050565b7f496e76616c69642062616c6c206e756d626572000000000000000000000000005f82015250565b5f6141616013836135b4565b915061416c8261412d565b602082019050919050565b5f6020820190508181035f83015261418e81614155565b9050919050565b7f42657420616d6f756e74206d7573742062652067726561746572207468616e205f8201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b5f6141ef6021836135b4565b91506141fa82614195565b604082019050919050565b5f6020820190508181035f83015261421c816141e3565b9050919050565b7f42657474696e67206e6f74206f70656e20666f7220746869732062616c6c00005f82015250565b5f614257601e836135b4565b915061426282614223565b602082019050919050565b5f6020820190508181035f8301526142848161424b565b9050919050565b7f43616e6e6f7420626574206f6e2050454e44494e47206f7574636f6d650000005f82015250565b5f6142bf601d836135b4565b91506142ca8261428b565b602082019050919050565b5f6020820190508181035f8301526142ec816142b3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61432a82613516565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361435c5761435b6142f3565b5b600182019050919050565b5f61437182613516565b915061437c83613516565b9250828201905080821115614394576143936142f3565b5b92915050565b5f6060820190506143ad5f830186613d9c565b6143ba602083018561361a565b6143c7604083018461361a565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061441357607f821691505b602082108103614426576144256143cf565b5b50919050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f5f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f6144866021836135b4565b91506144918261442c565b604082019050919050565b5f6020820190508181035f8301526144b38161447a565b9050919050565b7f42616c6c206e6f74206f70656e20666f722062657474696e67000000000000005f82015250565b5f6144ee6019836135b4565b91506144f9826144ba565b602082019050919050565b5f6020820190508181035f83015261451b816144e2565b9050919050565b7f4e6f2062616c616e636520746f207769746864726177000000000000000000005f82015250565b5f6145566016836135b4565b915061456182614522565b602082019050919050565b5f6020820190508181035f8301526145838161454a565b9050919050565b7f496e76616c69642072616e6765000000000000000000000000000000000000005f82015250565b5f6145be600d836135b4565b91506145c98261458a565b602082019050919050565b5f6020820190508181035f8301526145eb816145b2565b9050919050565b5f6145fc82613516565b915061460783613516565b925082820390508181111561461f5761461e6142f3565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f417272617973206c656e677468206d69736d61746368000000000000000000005f82015250565b5f6146866016836135b4565b915061469182614652565b602082019050919050565b5f6020820190508181035f8301526146b38161467a565b9050919050565b7f4e6f2062657473207370656369666965640000000000000000000000000000005f82015250565b5f6146ee6011836135b4565b91506146f9826146ba565b602082019050919050565b5f6020820190508181035f83015261471b816146e2565b9050919050565b7f416c6c2062657420616d6f756e7473206d7573742062652067726561746572205f8201527f7468616e20300000000000000000000000000000000000000000000000000000602082015250565b5f61477c6026836135b4565b915061478782614722565b604082019050919050565b5f6020820190508181035f8301526147a981614770565b9050919050565b7f53656e742076616c756520646f65736e2774206d6174636820746f74616c20625f8201527f657420616d6f756e747300000000000000000000000000000000000000000000602082015250565b5f61480a602a836135b4565b9150614815826147b0565b604082019050919050565b5f6020820190508181035f830152614837816147fe565b9050919050565b7f42616c6c206d75737420626520636c6f736564206669727374000000000000005f82015250565b5f6148726019836135b4565b915061487d8261483e565b602082019050919050565b5f6020820190508181035f83015261489f81614866565b9050919050565b7f416c72656164792070726f6365737365640000000000000000000000000000005f82015250565b5f6148da6011836135b4565b91506148e5826148a6565b602082019050919050565b5f6020820190508181035f830152614907816148ce565b9050919050565b5f6040820190508181035f83015261492681856135e2565b9050614935602083018461361a565b9392505050565b7f42616c6c20616c7265616479206f70656e6564206f72207265736f6c766564005f82015250565b5f614970601f836135b4565b915061497b8261493c565b602082019050919050565b5f6020820190508181035f83015261499d81614964565b9050919050565b7f4d757374206f70656e2062616c6c7320696e2073657175656e636500000000005f82015250565b5f6149d8601b836135b4565b91506149e3826149a4565b602082019050919050565b5f6020820190508181035f830152614a05816149cc565b9050919050565b7f526573756c742063616e6e6f742062652050454e44494e4700000000000000005f82015250565b5f614a406018836135b4565b9150614a4b82614a0c565b602082019050919050565b5f6020820190508181035f830152614a6d81614a34565b9050919050565b5f604082019050614a875f830185613d9c565b614a94602083018461361a565b9392505050565b5f606082019050614aae5f83018661361a565b614abb602083018561361a565b614ac8604083018461361a565b949350505050565b5f614ada82613516565b9150614ae583613516565b9250828202614af381613516565b91508282048414831517614b0a57614b096142f3565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f614b4882613516565b9150614b5383613516565b925082614b6357614b62614b11565b5b828204905092915050565b5f608082019050614b815f830187613d9c565b614b8e602083018661361a565b614b9b604083018561361a565b614ba8606083018461361a565b95945050505050565b5f604082019050614bc45f83018561361a565b614bd1602083018461361a565b939250505056fea26469706673582212206c575f14dad1a9f1c98b0a6b87c46a88510a5b2240656d119d96d5059e4d39bc64736f6c634300081e0033a26469706673582212203dcfbdf08a92dedb5e688e59ad6efbc4750351eeae1b3073ec4f4877f0fc5bcc64736f6c634300081e0033","sourceMap":"94:2032:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;848:99;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;157:28;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1578:102;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;191:43;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;131:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;953:619;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1686:438;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;848:99;893:7;919:21;912:28;;848:99;:::o;157:28::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1578:102::-;1627:16;1662:11;1655:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1578:102;:::o;191:43::-;;;;;;;;;;;;;;;;;;;;;;:::o;131:20::-;;;;;;;;;;;;;:::o;953:619::-;1093:7;457:5;;;;;;;;;;;443:19;;:10;:19;;;435:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;1112:26:::1;1177:6;1197;1217:8;1239:5;;;;;;;;;;;1141:113;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;1112:142;;1265:19;1295:7;1265:38;;1313:11;1330;1313:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1379:4;1352:11;:24;1364:11;1352:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;1424:11;1399:137;;;1449:6;1469;1489:8;1511:15;1399:137;;;;;;;;;:::i;:::-;;;;;;;;1554:11;1547:18;;;;953:619:::0;;;;;:::o;1686:438::-;457:5;;;;;;;;;;;443:19;;:10;:19;;;435:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;1765:11:::1;:25;1777:12;1765:25;;;;;;;;;;;;;;;;;;;;;;;;;1757:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;1853:5;1825:11;:25;1837:12;1825:25;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1874:6;1883:1;1874:10;;1869:249;1890:11;:18;;;;1886:1;:22;1869:249;;;1951:12;1933:30;;:11;1945:1;1933:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:30;;::::0;1929:179:::1;;2000:11;2033:1:::0;2012:11;:18:::1;;;;:22;;;;:::i;:::-;2000:35;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1983:11;1995:1;1983:14;;;;;;;;:::i;:::-;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;2053:11;:17;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;2088:5;;1929:179;1910:3;;;;;;;1869:249;;;;1686:438:::0;:::o;-1:-1:-1:-;;;;;;;;:::o;7:77:18:-;44:7;73:5;62:16;;7:77;;;:::o;90:118::-;177:24;195:5;177:24;:::i;:::-;172:3;165:37;90:118;;:::o;214:222::-;307:4;345:2;334:9;330:18;322:26;;358:71;426:1;415:9;411:17;402:6;358:71;:::i;:::-;214:222;;;;:::o;442:75::-;475:6;508:2;502:9;492:19;;442:75;:::o;523:117::-;632:1;629;622:12;646:117;755:1;752;745:12;769:122;842:24;860:5;842:24;:::i;:::-;835:5;832:35;822:63;;881:1;878;871:12;822:63;769:122;:::o;897:139::-;943:5;981:6;968:20;959:29;;997:33;1024:5;997:33;:::i;:::-;897:139;;;;:::o;1042:329::-;1101:6;1150:2;1138:9;1129:7;1125:23;1121:32;1118:119;;;1156:79;;:::i;:::-;1118:119;1276:1;1301:53;1346:7;1337:6;1326:9;1322:22;1301:53;:::i;:::-;1291:63;;1247:117;1042:329;;;;:::o;1377:126::-;1414:7;1454:42;1447:5;1443:54;1432:65;;1377:126;;;:::o;1509:96::-;1546:7;1575:24;1593:5;1575:24;:::i;:::-;1564:35;;1509:96;;;:::o;1611:118::-;1698:24;1716:5;1698:24;:::i;:::-;1693:3;1686:37;1611:118;;:::o;1735:222::-;1828:4;1866:2;1855:9;1851:18;1843:26;;1879:71;1947:1;1936:9;1932:17;1923:6;1879:71;:::i;:::-;1735:222;;;;:::o;1963:114::-;2030:6;2064:5;2058:12;2048:22;;1963:114;;;:::o;2083:184::-;2182:11;2216:6;2211:3;2204:19;2256:4;2251:3;2247:14;2232:29;;2083:184;;;;:::o;2273:132::-;2340:4;2363:3;2355:11;;2393:4;2388:3;2384:14;2376:22;;2273:132;;;:::o;2411:108::-;2488:24;2506:5;2488:24;:::i;:::-;2483:3;2476:37;2411:108;;:::o;2525:179::-;2594:10;2615:46;2657:3;2649:6;2615:46;:::i;:::-;2693:4;2688:3;2684:14;2670:28;;2525:179;;;;:::o;2710:113::-;2780:4;2812;2807:3;2803:14;2795:22;;2710:113;;;:::o;2859:732::-;2978:3;3007:54;3055:5;3007:54;:::i;:::-;3077:86;3156:6;3151:3;3077:86;:::i;:::-;3070:93;;3187:56;3237:5;3187:56;:::i;:::-;3266:7;3297:1;3282:284;3307:6;3304:1;3301:13;3282:284;;;3383:6;3377:13;3410:63;3469:3;3454:13;3410:63;:::i;:::-;3403:70;;3496:60;3549:6;3496:60;:::i;:::-;3486:70;;3342:224;3329:1;3326;3322:9;3317:14;;3282:284;;;3286:14;3582:3;3575:10;;2983:608;;;2859:732;;;;:::o;3597:373::-;3740:4;3778:2;3767:9;3763:18;3755:26;;3827:9;3821:4;3817:20;3813:1;3802:9;3798:17;3791:47;3855:108;3958:4;3949:6;3855:108;:::i;:::-;3847:116;;3597:373;;;;:::o;3976:122::-;4049:24;4067:5;4049:24;:::i;:::-;4042:5;4039:35;4029:63;;4088:1;4085;4078:12;4029:63;3976:122;:::o;4104:139::-;4150:5;4188:6;4175:20;4166:29;;4204:33;4231:5;4204:33;:::i;:::-;4104:139;;;;:::o;4249:329::-;4308:6;4357:2;4345:9;4336:7;4332:23;4328:32;4325:119;;;4363:79;;:::i;:::-;4325:119;4483:1;4508:53;4553:7;4544:6;4533:9;4529:22;4508:53;:::i;:::-;4498:63;;4454:117;4249:329;;;;:::o;4584:90::-;4618:7;4661:5;4654:13;4647:21;4636:32;;4584:90;;;:::o;4680:109::-;4761:21;4776:5;4761:21;:::i;:::-;4756:3;4749:34;4680:109;;:::o;4795:210::-;4882:4;4920:2;4909:9;4905:18;4897:26;;4933:65;4995:1;4984:9;4980:17;4971:6;4933:65;:::i;:::-;4795:210;;;;:::o;5011:117::-;5120:1;5117;5110:12;5134:117;5243:1;5240;5233:12;5257:102;5298:6;5349:2;5345:7;5340:2;5333:5;5329:14;5325:28;5315:38;;5257:102;;;:::o;5365:180::-;5413:77;5410:1;5403:88;5510:4;5507:1;5500:15;5534:4;5531:1;5524:15;5551:281;5634:27;5656:4;5634:27;:::i;:::-;5626:6;5622:40;5764:6;5752:10;5749:22;5728:18;5716:10;5713:34;5710:62;5707:88;;;5775:18;;:::i;:::-;5707:88;5815:10;5811:2;5804:22;5594:238;5551:281;;:::o;5838:129::-;5872:6;5899:20;;:::i;:::-;5889:30;;5928:33;5956:4;5948:6;5928:33;:::i;:::-;5838:129;;;:::o;5973:308::-;6035:4;6125:18;6117:6;6114:30;6111:56;;;6147:18;;:::i;:::-;6111:56;6185:29;6207:6;6185:29;:::i;:::-;6177:37;;6269:4;6263;6259:15;6251:23;;5973:308;;;:::o;6287:148::-;6385:6;6380:3;6375;6362:30;6426:1;6417:6;6412:3;6408:16;6401:27;6287:148;;;:::o;6441:425::-;6519:5;6544:66;6560:49;6602:6;6560:49;:::i;:::-;6544:66;:::i;:::-;6535:75;;6633:6;6626:5;6619:21;6671:4;6664:5;6660:16;6709:3;6700:6;6695:3;6691:16;6688:25;6685:112;;;6716:79;;:::i;:::-;6685:112;6806:54;6853:6;6848:3;6843;6806:54;:::i;:::-;6525:341;6441:425;;;;;:::o;6886:340::-;6942:5;6991:3;6984:4;6976:6;6972:17;6968:27;6958:122;;6999:79;;:::i;:::-;6958:122;7116:6;7103:20;7141:79;7216:3;7208:6;7201:4;7193:6;7189:17;7141:79;:::i;:::-;7132:88;;6948:278;6886:340;;;;:::o;7232:979::-;7329:6;7337;7345;7394:2;7382:9;7373:7;7369:23;7365:32;7362:119;;;7400:79;;:::i;:::-;7362:119;7548:1;7537:9;7533:17;7520:31;7578:18;7570:6;7567:30;7564:117;;;7600:79;;:::i;:::-;7564:117;7705:63;7760:7;7751:6;7740:9;7736:22;7705:63;:::i;:::-;7695:73;;7491:287;7845:2;7834:9;7830:18;7817:32;7876:18;7868:6;7865:30;7862:117;;;7898:79;;:::i;:::-;7862:117;8003:63;8058:7;8049:6;8038:9;8034:22;8003:63;:::i;:::-;7993:73;;7788:288;8115:2;8141:53;8186:7;8177:6;8166:9;8162:22;8141:53;:::i;:::-;8131:63;;8086:118;7232:979;;;;;:::o;8217:169::-;8301:11;8335:6;8330:3;8323:19;8375:4;8370:3;8366:14;8351:29;;8217:169;;;;:::o;8392:220::-;8532:34;8528:1;8520:6;8516:14;8509:58;8601:3;8596:2;8588:6;8584:15;8577:28;8392:220;:::o;8618:366::-;8760:3;8781:67;8845:2;8840:3;8781:67;:::i;:::-;8774:74;;8857:93;8946:3;8857:93;:::i;:::-;8975:2;8970:3;8966:12;8959:19;;8618:366;;;:::o;8990:419::-;9156:4;9194:2;9183:9;9179:18;9171:26;;9243:9;9237:4;9233:20;9229:1;9218:9;9214:17;9207:47;9271:131;9397:4;9271:131;:::i;:::-;9263:139;;8990:419;;;:::o;9415:99::-;9467:6;9501:5;9495:12;9485:22;;9415:99;;;:::o;9520:139::-;9609:6;9604:3;9599;9593:23;9650:1;9641:6;9636:3;9632:16;9625:27;9520:139;;;:::o;9665:377::-;9753:3;9781:39;9814:5;9781:39;:::i;:::-;9836:71;9900:6;9895:3;9836:71;:::i;:::-;9829:78;;9916:65;9974:6;9969:3;9962:4;9955:5;9951:16;9916:65;:::i;:::-;10006:29;10028:6;10006:29;:::i;:::-;10001:3;9997:39;9990:46;;9757:285;9665:377;;;;:::o;10048:735::-;10265:4;10303:3;10292:9;10288:19;10280:27;;10353:9;10347:4;10343:20;10339:1;10328:9;10324:17;10317:47;10381:78;10454:4;10445:6;10381:78;:::i;:::-;10373:86;;10506:9;10500:4;10496:20;10491:2;10480:9;10476:18;10469:48;10534:78;10607:4;10598:6;10534:78;:::i;:::-;10526:86;;10622:72;10690:2;10679:9;10675:18;10666:6;10622:72;:::i;:::-;10704;10772:2;10761:9;10757:18;10748:6;10704:72;:::i;:::-;10048:735;;;;;;;:::o;10789:::-;11006:4;11044:3;11033:9;11029:19;11021:27;;11094:9;11088:4;11084:20;11080:1;11069:9;11065:17;11058:47;11122:78;11195:4;11186:6;11122:78;:::i;:::-;11114:86;;11247:9;11241:4;11237:20;11232:2;11221:9;11217:18;11210:48;11275:78;11348:4;11339:6;11275:78;:::i;:::-;11267:86;;11363:72;11431:2;11420:9;11416:18;11407:6;11363:72;:::i;:::-;11445;11513:2;11502:9;11498:18;11489:6;11445:72;:::i;:::-;10789:735;;;;;;;:::o;11530:170::-;11670:22;11666:1;11658:6;11654:14;11647:46;11530:170;:::o;11706:366::-;11848:3;11869:67;11933:2;11928:3;11869:67;:::i;:::-;11862:74;;11945:93;12034:3;11945:93;:::i;:::-;12063:2;12058:3;12054:12;12047:19;;11706:366;;;:::o;12078:419::-;12244:4;12282:2;12271:9;12267:18;12259:26;;12331:9;12325:4;12321:20;12317:1;12306:9;12302:17;12295:47;12359:131;12485:4;12359:131;:::i;:::-;12351:139;;12078:419;;;:::o;12503:180::-;12551:77;12548:1;12541:88;12648:4;12645:1;12638:15;12672:4;12669:1;12662:15;12689:180;12737:77;12734:1;12727:88;12834:4;12831:1;12824:15;12858:4;12855:1;12848:15;12875:194;12915:4;12935:20;12953:1;12935:20;:::i;:::-;12930:25;;12969:20;12987:1;12969:20;:::i;:::-;12964:25;;13013:1;13010;13006:9;12998:17;;13037:1;13031:4;13028:11;13025:37;;;13042:18;;:::i;:::-;13025:37;12875:194;;;;:::o;13075:180::-;13123:77;13120:1;13113:88;13220:4;13217:1;13210:15;13244:4;13241:1;13234:15","linkReferences":{}},"methodIdentifiers":{"activeGames(uint256)":"13e4c714","createGame(string,string,uint256)":"91898efd","getActiveGames()":"1b76929c","getBalance()":"12065fe0","isValidGame(address)":"52897beb","owner()":"8da5cb5b","removeGame(address)":"bce24669"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"teamA\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"teamB\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeGames\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_teamB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveGames\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"removeGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CricketBettingFactory.sol\":\"CricketBettingFactory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/CricketBettingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./CricketBettingGame.sol\\\";\\n\\ncontract CricketBettingFactory {\\n    address public owner;\\n    address[] public activeGames;\\n    mapping(address => bool) public isValidGame;\\n\\n    event GameCreated(\\n        address indexed gameAddress,\\n        string teamA,\\n        string teamB,\\n        uint256 matchId,\\n        uint256 timestamp\\n    );\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Accept MON (Monad native token)\\n    receive() external payable {\\n        // Optional: emit an event\\n        // emit FundsReceived(msg.sender, msg.value);\\n    }\\n\\n    fallback() external payable {\\n        // fallback can also accept MON if called with data\\n    }\\n\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function createGame(\\n        string memory _teamA,\\n        string memory _teamB,\\n        uint256 _matchId\\n    ) external onlyOwner returns (address) {\\n        CricketBettingGame newGame = new CricketBettingGame(\\n            _teamA,\\n            _teamB,\\n            _matchId,\\n            owner\\n        );\\n\\n        address gameAddress = address(newGame);\\n        activeGames.push(gameAddress);\\n        isValidGame[gameAddress] = true;\\n\\n        emit GameCreated(\\n            gameAddress,\\n            _teamA,\\n            _teamB,\\n            _matchId,\\n            block.timestamp\\n        );\\n\\n        return gameAddress;\\n    }\\n\\n    function getActiveGames() external view returns (address[] memory) {\\n        return activeGames;\\n    }\\n\\n    function removeGame(address _gameAddress) external onlyOwner {\\n        require(isValidGame[_gameAddress], \\\"Invalid game address\\\");\\n        isValidGame[_gameAddress] = false;\\n\\n        for (uint i = 0; i < activeGames.length; i++) {\\n            if (activeGames[i] == _gameAddress) {\\n                activeGames[i] = activeGames[activeGames.length - 1];\\n                activeGames.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54c8ff3013f05265450f08b83b55b75a5dafce16d014921d73ac4d89aabd8e6c\",\"license\":\"MIT\"},\"src/CricketBettingGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Individual Cricket Match Betting Contract\\ncontract CricketBettingGame {\\n    address public owner;\\n    address public factory;\\n\\n    string public teamA;\\n    string public teamB;\\n    uint256 public matchId;\\n\\n    uint256 public constant TOTAL_BALLS = 120; // 20 overs * 6 balls\\n    uint256 public currentBall = 0;\\n\\n    enum BallOutcome {\\n        PENDING, // 0 - Default state\\n        BOUNDARY, // 1 - 4 or 6 runs\\n        WICKET, // 2 - Batsman out\\n        DOT_BALL, // 3 - 0 runs\\n        ONE_RUN, // 4 - 1 run\\n        TWO_RUNS, // 5 - 2 runs\\n        EXTRAS // 6 - Wide or No ball\\n    }\\n\\n    enum BallState {\\n        CLOSED,\\n        OPEN,\\n        RESOLVED\\n    }\\n\\n    struct Ball {\\n        uint256 ballNumber;\\n        BallState state;\\n        BallOutcome result;\\n        mapping(BallOutcome => uint256) totalBets; // outcome => total amount\\n        mapping(BallOutcome => address[]) bettors; // outcome => list of bettors\\n        mapping(address => mapping(BallOutcome => uint256)) userBets; // user => outcome => amount\\n        mapping(address => bool) hasBet; // Track if user has bet on this ball\\n        uint256 totalPool;\\n        uint256 uniqueBettorCount;\\n        bool distributed;\\n        bool refunded;\\n    }\\n\\n    mapping(uint256 => Ball) public balls;\\n    mapping(address => uint256) public userBalances;\\n\\n    // Events for frontend consumption\\n    event BallOpened(uint256 indexed ballNumber, uint256 timestamp);\\n    event BallClosed(uint256 indexed ballNumber, uint256 timestamp);\\n    event BetPlaced(\\n        uint256 indexed ballNumber,\\n        address indexed bettor,\\n        BallOutcome outcome,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    event BallResult(\\n        uint256 indexed ballNumber,\\n        BallOutcome result,\\n        uint256 timestamp\\n    );\\n    event WinningsDistributed(\\n        uint256 indexed ballNumber,\\n        BallOutcome winningOutcome,\\n        uint256 totalPool,\\n        uint256 winnersCount,\\n        uint256 timestamp\\n    );\\n    event BetsRefunded(\\n        uint256 indexed ballNumber,\\n        uint256 totalRefunded,\\n        uint256 bettorsCount,\\n        uint256 timestamp\\n    );\\n    event MatchCompleted(uint256 matchId, uint256 timestamp);\\n    event BallCancelled(\\n        uint256 indexed ballNumber,\\n        string reason,\\n        uint256 timestamp\\n    );\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    modifier ballExists(uint256 _ballNumber) {\\n        require(\\n            _ballNumber > 0 && _ballNumber <= TOTAL_BALLS,\\n            \\\"Invalid ball number\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _teamA,\\n        string memory _teamB,\\n        uint256 _matchId,\\n        address _owner\\n    ) {\\n        teamA = _teamA;\\n        teamB = _teamB;\\n        matchId = _matchId;\\n        owner = _owner;\\n        factory = msg.sender;\\n    }\\n\\n    // Owner opens betting for a specific ball\\n    function openBall(\\n        uint256 _ballNumber\\n    ) external onlyOwner ballExists(_ballNumber) {\\n        require(\\n            balls[_ballNumber].state == BallState.CLOSED,\\n            \\\"Ball already opened or resolved\\\"\\n        );\\n        require(_ballNumber == currentBall + 1, \\\"Must open balls in sequence\\\");\\n\\n        balls[_ballNumber].ballNumber = _ballNumber;\\n        balls[_ballNumber].state = BallState.OPEN;\\n        balls[_ballNumber].result = BallOutcome.PENDING;\\n        currentBall = _ballNumber;\\n\\n        emit BallOpened(_ballNumber, block.timestamp);\\n    }\\n\\n    // Owner closes betting for a specific ball\\n    function closeBall(\\n        uint256 _ballNumber\\n    ) external onlyOwner ballExists(_ballNumber) {\\n        require(\\n            balls[_ballNumber].state == BallState.OPEN,\\n            \\\"Ball not open for betting\\\"\\n        );\\n\\n        balls[_ballNumber].state = BallState.CLOSED;\\n\\n        emit BallClosed(_ballNumber, block.timestamp);\\n    }\\n\\n    // Users place bets on a ball outcome (can bet multiple times on different outcomes)\\n    function placeBet(\\n        uint256 _ballNumber,\\n        BallOutcome _outcome\\n    ) external payable ballExists(_ballNumber) {\\n        require(msg.value > 0, \\\"Bet amount must be greater than 0\\\");\\n        require(\\n            balls[_ballNumber].state == BallState.OPEN,\\n            \\\"Betting not open for this ball\\\"\\n        );\\n        require(\\n            _outcome != BallOutcome.PENDING,\\n            \\\"Cannot bet on PENDING outcome\\\"\\n        );\\n\\n        Ball storage ball = balls[_ballNumber];\\n\\n        // Track unique bettors\\n        if (!ball.hasBet[msg.sender]) {\\n            ball.hasBet[msg.sender] = true;\\n            ball.uniqueBettorCount++;\\n        }\\n\\n        // Add to user's bet for this outcome (allows multiple bets on same outcome)\\n        if (ball.userBets[msg.sender][_outcome] == 0) {\\n            ball.bettors[_outcome].push(msg.sender);\\n        }\\n        ball.userBets[msg.sender][_outcome] += msg.value;\\n        ball.totalBets[_outcome] += msg.value;\\n        ball.totalPool += msg.value;\\n\\n        emit BetPlaced(\\n            _ballNumber,\\n            msg.sender,\\n            _outcome,\\n            msg.value,\\n            block.timestamp\\n        );\\n    }\\n\\n    // Users can place multiple bets on different outcomes in a single transaction\\n    function placeBets(\\n        uint256 _ballNumber,\\n        BallOutcome[] memory _outcomes,\\n        uint256[] memory _amounts\\n    ) external payable ballExists(_ballNumber) {\\n        require(_outcomes.length == _amounts.length, \\\"Arrays length mismatch\\\");\\n        require(_outcomes.length > 0, \\\"No bets specified\\\");\\n        require(\\n            balls[_ballNumber].state == BallState.OPEN,\\n            \\\"Betting not open for this ball\\\"\\n        );\\n\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            require(_amounts[i] > 0, \\\"All bet amounts must be greater than 0\\\");\\n            require(\\n                _outcomes[i] != BallOutcome.PENDING,\\n                \\\"Cannot bet on PENDING outcome\\\"\\n            );\\n            totalAmount += _amounts[i];\\n        }\\n        require(\\n            msg.value == totalAmount,\\n            \\\"Sent value doesn't match total bet amounts\\\"\\n        );\\n\\n        Ball storage ball = balls[_ballNumber];\\n\\n        // Track unique bettors\\n        if (!ball.hasBet[msg.sender]) {\\n            ball.hasBet[msg.sender] = true;\\n            ball.uniqueBettorCount++;\\n        }\\n\\n        // Process each bet\\n        for (uint256 i = 0; i < _outcomes.length; i++) {\\n            BallOutcome outcome = _outcomes[i];\\n            uint256 amount = _amounts[i];\\n\\n            // Add to user's bet for this outcome\\n            if (ball.userBets[msg.sender][outcome] == 0) {\\n                ball.bettors[outcome].push(msg.sender);\\n            }\\n            ball.userBets[msg.sender][outcome] += amount;\\n            ball.totalBets[outcome] += amount;\\n            ball.totalPool += amount;\\n\\n            emit BetPlaced(\\n                _ballNumber,\\n                msg.sender,\\n                outcome,\\n                amount,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // Owner reports the result of a ball\\n    function reportBallResult(\\n        uint256 _ballNumber,\\n        BallOutcome _result\\n    ) external onlyOwner ballExists(_ballNumber) {\\n        require(\\n            balls[_ballNumber].state == BallState.CLOSED,\\n            \\\"Ball must be closed first\\\"\\n        );\\n        require(_result != BallOutcome.PENDING, \\\"Result cannot be PENDING\\\");\\n        require(\\n            !balls[_ballNumber].distributed && !balls[_ballNumber].refunded,\\n            \\\"Already processed\\\"\\n        );\\n\\n        balls[_ballNumber].result = _result;\\n        balls[_ballNumber].state = BallState.RESOLVED;\\n\\n        emit BallResult(_ballNumber, _result, block.timestamp);\\n\\n        // Automatically distribute winnings or refund\\n        _processBallResult(_ballNumber);\\n    }\\n\\n    // Owner can cancel a ball and refund all bets (for situations like rain delay, technical issues)\\n    function cancelBall(\\n        uint256 _ballNumber,\\n        string memory _reason\\n    ) external onlyOwner ballExists(_ballNumber) {\\n        require(\\n            balls[_ballNumber].state == BallState.CLOSED,\\n            \\\"Ball must be closed first\\\"\\n        );\\n        require(\\n            !balls[_ballNumber].distributed && !balls[_ballNumber].refunded,\\n            \\\"Already processed\\\"\\n        );\\n\\n        emit BallCancelled(_ballNumber, _reason, block.timestamp);\\n        _refundAllBets(_ballNumber);\\n    }\\n\\n    // Internal function to process ball result (distribute or refund)\\n    function _processBallResult(uint256 _ballNumber) internal {\\n        Ball storage ball = balls[_ballNumber];\\n        BallOutcome winningOutcome = ball.result;\\n\\n        // Check if there are any winning bets\\n        if (ball.totalBets[winningOutcome] == 0) {\\n            // No winners - refund all bets\\n            _refundAllBets(_ballNumber);\\n            return;\\n        }\\n\\n        // Distribute winnings\\n        _distributeWinnings(_ballNumber);\\n    }\\n\\n    // Internal function to distribute winnings\\n    function _distributeWinnings(uint256 _ballNumber) internal {\\n        Ball storage ball = balls[_ballNumber];\\n        BallOutcome winningOutcome = ball.result;\\n\\n        address[] memory winners = ball.bettors[winningOutcome];\\n        uint256 totalWinningBets = ball.totalBets[winningOutcome];\\n        uint256 totalPool = ball.totalPool;\\n\\n        // Distribute proportionally based on bet amounts\\n        for (uint256 i = 0; i < winners.length; i++) {\\n            address winner = winners[i];\\n            uint256 userBet = ball.userBets[winner][winningOutcome];\\n            uint256 userWinnings = (userBet * totalPool) / totalWinningBets;\\n\\n            userBalances[winner] += userWinnings;\\n        }\\n\\n        ball.distributed = true;\\n\\n        emit WinningsDistributed(\\n            _ballNumber,\\n            winningOutcome,\\n            totalPool,\\n            winners.length,\\n            block.timestamp\\n        );\\n\\n        // Check if match is completed\\n        if (_ballNumber == TOTAL_BALLS) {\\n            emit MatchCompleted(matchId, block.timestamp);\\n        }\\n    }\\n\\n    // Internal function to refund all bets for a ball\\n    function _refundAllBets(uint256 _ballNumber) internal {\\n        Ball storage ball = balls[_ballNumber];\\n        uint256 totalRefunded = 0;\\n        uint256 totalBettors = 0;\\n\\n        // Refund all outcomes\\n        BallOutcome[6] memory outcomes = [\\n            BallOutcome.BOUNDARY,\\n            BallOutcome.WICKET,\\n            BallOutcome.DOT_BALL,\\n            BallOutcome.ONE_RUN,\\n            BallOutcome.TWO_RUNS,\\n            BallOutcome.EXTRAS\\n        ];\\n\\n        for (uint256 i = 0; i < outcomes.length; i++) {\\n            BallOutcome outcome = outcomes[i];\\n            address[] memory bettors = ball.bettors[outcome];\\n\\n            for (uint256 j = 0; j < bettors.length; j++) {\\n                address bettor = bettors[j];\\n                uint256 refundAmount = ball.userBets[bettor][outcome];\\n\\n                if (refundAmount > 0) {\\n                    userBalances[bettor] += refundAmount;\\n                    totalRefunded += refundAmount;\\n                    totalBettors++;\\n                }\\n            }\\n        }\\n\\n        ball.refunded = true;\\n\\n        emit BetsRefunded(\\n            _ballNumber,\\n            totalRefunded,\\n            totalBettors,\\n            block.timestamp\\n        );\\n    }\\n\\n    // Users withdraw their winnings/refunds\\n    function withdraw() external {\\n        uint256 amount = userBalances[msg.sender];\\n        require(amount > 0, \\\"No balance to withdraw\\\");\\n\\n        userBalances[msg.sender] = 0;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    // View functions for frontend\\n    function getBallInfo(\\n        uint256 _ballNumber\\n    )\\n        external\\n        view\\n        ballExists(_ballNumber)\\n        returns (\\n            BallState state,\\n            BallOutcome result,\\n            uint256 totalPool,\\n            uint256[6] memory outcomeBets, // [BOUNDARY, WICKET, DOT_BALL, ONE_RUN, TWO_RUNS, EXTRAS]\\n            uint256 uniqueBettorCount,\\n            bool distributed,\\n            bool refunded\\n        )\\n    {\\n        Ball storage ball = balls[_ballNumber];\\n        uint256[6] memory bets = [\\n            ball.totalBets[BallOutcome.BOUNDARY],\\n            ball.totalBets[BallOutcome.WICKET],\\n            ball.totalBets[BallOutcome.DOT_BALL],\\n            ball.totalBets[BallOutcome.ONE_RUN],\\n            ball.totalBets[BallOutcome.TWO_RUNS],\\n            ball.totalBets[BallOutcome.EXTRAS]\\n        ];\\n\\n        return (\\n            ball.state,\\n            ball.result,\\n            ball.totalPool,\\n            bets,\\n            ball.uniqueBettorCount,\\n            ball.distributed,\\n            ball.refunded\\n        );\\n    }\\n\\n    function getUserBetForBall(\\n        uint256 _ballNumber,\\n        address _user,\\n        BallOutcome _outcome\\n    ) external view ballExists(_ballNumber) returns (uint256) {\\n        return balls[_ballNumber].userBets[_user][_outcome];\\n    }\\n\\n    function getUserTotalBetForBall(\\n        uint256 _ballNumber,\\n        address _user\\n    ) external view ballExists(_ballNumber) returns (uint256 totalBet) {\\n        Ball storage ball = balls[_ballNumber];\\n\\n        totalBet += ball.userBets[_user][BallOutcome.BOUNDARY];\\n        totalBet += ball.userBets[_user][BallOutcome.WICKET];\\n        totalBet += ball.userBets[_user][BallOutcome.DOT_BALL];\\n        totalBet += ball.userBets[_user][BallOutcome.ONE_RUN];\\n        totalBet += ball.userBets[_user][BallOutcome.TWO_RUNS];\\n        totalBet += ball.userBets[_user][BallOutcome.EXTRAS];\\n\\n        return totalBet;\\n    }\\n\\n    function getMatchInfo()\\n        external\\n        view\\n        returns (string memory, string memory, uint256, uint256, uint256)\\n    {\\n        return (teamA, teamB, matchId, currentBall, TOTAL_BALLS);\\n    }\\n\\n    function getUserBalance(address _user) external view returns (uint256) {\\n        return userBalances[_user];\\n    }\\n\\n    function getBallOutcomeString(\\n        BallOutcome _outcome\\n    ) external pure returns (string memory) {\\n        if (_outcome == BallOutcome.BOUNDARY) return \\\"Boundary (4/6)\\\";\\n        if (_outcome == BallOutcome.WICKET) return \\\"Wicket\\\";\\n        if (_outcome == BallOutcome.DOT_BALL) return \\\"Dot Ball\\\";\\n        if (_outcome == BallOutcome.ONE_RUN) return \\\"1 Run\\\";\\n        if (_outcome == BallOutcome.TWO_RUNS) return \\\"2 Runs\\\";\\n        if (_outcome == BallOutcome.EXTRAS) return \\\"Extras (Wide/No Ball)\\\";\\n        return \\\"Pending\\\";\\n    }\\n\\n    // Get detailed betting info for a ball\\n    function getBallBettingDetails(\\n        uint256 _ballNumber\\n    )\\n        external\\n        view\\n        ballExists(_ballNumber)\\n        returns (\\n            uint256 boundaryBets,\\n            uint256 wicketBets,\\n            uint256 dotBallBets,\\n            uint256 oneRunBets,\\n            uint256 twoRunsBets,\\n            uint256 extrasBets,\\n            uint256 totalPool,\\n            uint256 totalBettors\\n        )\\n    {\\n        Ball storage ball = balls[_ballNumber];\\n\\n        boundaryBets = ball.totalBets[BallOutcome.BOUNDARY];\\n        wicketBets = ball.totalBets[BallOutcome.WICKET];\\n        dotBallBets = ball.totalBets[BallOutcome.DOT_BALL];\\n        oneRunBets = ball.totalBets[BallOutcome.ONE_RUN];\\n        twoRunsBets = ball.totalBets[BallOutcome.TWO_RUNS];\\n        extrasBets = ball.totalBets[BallOutcome.EXTRAS];\\n        totalPool = ball.totalPool;\\n\\n        // Count total bettors (now returns accurate unique count)\\n        totalBettors = ball.uniqueBettorCount;\\n\\n        return (\\n            boundaryBets,\\n            wicketBets,\\n            dotBallBets,\\n            oneRunBets,\\n            twoRunsBets,\\n            extrasBets,\\n            totalPool,\\n            totalBettors\\n        );\\n    }\\n\\n    // Emergency functions\\n    function emergencyPause() external onlyOwner {\\n        // Implementation for emergency pause functionality\\n        // Could add a paused state and modifier\\n    }\\n\\n    // Get contract balance (for owner monitoring)\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    // Batch function to get multiple balls info (for frontend efficiency)\\n    function getMultipleBallsInfo(\\n        uint256 _startBall,\\n        uint256 _endBall\\n    )\\n        external\\n        view\\n        returns (\\n            BallState[] memory states,\\n            BallOutcome[] memory results,\\n            uint256[] memory totalPools\\n        )\\n    {\\n        require(\\n            _startBall <= _endBall && _endBall <= TOTAL_BALLS,\\n            \\\"Invalid range\\\"\\n        );\\n\\n        uint256 length = _endBall - _startBall + 1;\\n        states = new BallState[](length);\\n        results = new BallOutcome[](length);\\n        totalPools = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 ballNumber = _startBall + i;\\n            states[i] = balls[ballNumber].state;\\n            results[i] = balls[ballNumber].result;\\n            totalPools[i] = balls[ballNumber].totalPool;\\n        }\\n\\n        return (states, results, totalPools);\\n    }\\n}\\n\",\"keccak256\":\"0x489873fa5f8d5fda6485ac893502ed071bbdc462b6721746d93e70cd41a03768\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"gameAddress","type":"address","indexed":true},{"internalType":"string","name":"teamA","type":"string","indexed":false},{"internalType":"string","name":"teamB","type":"string","indexed":false},{"internalType":"uint256","name":"matchId","type":"uint256","indexed":false},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false}],"type":"event","name":"GameCreated","anonymous":false},{"inputs":[],"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"activeGames","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"string","name":"_teamA","type":"string"},{"internalType":"string","name":"_teamB","type":"string"},{"internalType":"uint256","name":"_matchId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"createGame","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getActiveGames","outputs":[{"internalType":"address[]","name":"","type":"address[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"isValidGame","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"_gameAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"removeGame"},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/CricketBettingFactory.sol":"CricketBettingFactory"},"evmVersion":"cancun","libraries":{}},"sources":{"src/CricketBettingFactory.sol":{"keccak256":"0x54c8ff3013f05265450f08b83b55b75a5dafce16d014921d73ac4d89aabd8e6c","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"./CricketBettingGame.sol\";\n\ncontract CricketBettingFactory {\n    address public owner;\n    address[] public activeGames;\n    mapping(address => bool) public isValidGame;\n\n    event GameCreated(\n        address indexed gameAddress,\n        string teamA,\n        string teamB,\n        uint256 matchId,\n        uint256 timestamp\n    );\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // Accept MON (Monad native token)\n    receive() external payable {\n        // Optional: emit an event\n        // emit FundsReceived(msg.sender, msg.value);\n    }\n\n    fallback() external payable {\n        // fallback can also accept MON if called with data\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function createGame(\n        string memory _teamA,\n        string memory _teamB,\n        uint256 _matchId\n    ) external onlyOwner returns (address) {\n        CricketBettingGame newGame = new CricketBettingGame(\n            _teamA,\n            _teamB,\n            _matchId,\n            owner\n        );\n\n        address gameAddress = address(newGame);\n        activeGames.push(gameAddress);\n        isValidGame[gameAddress] = true;\n\n        emit GameCreated(\n            gameAddress,\n            _teamA,\n            _teamB,\n            _matchId,\n            block.timestamp\n        );\n\n        return gameAddress;\n    }\n\n    function getActiveGames() external view returns (address[] memory) {\n        return activeGames;\n    }\n\n    function removeGame(address _gameAddress) external onlyOwner {\n        require(isValidGame[_gameAddress], \"Invalid game address\");\n        isValidGame[_gameAddress] = false;\n\n        for (uint i = 0; i < activeGames.length; i++) {\n            if (activeGames[i] == _gameAddress) {\n                activeGames[i] = activeGames[activeGames.length - 1];\n                activeGames.pop();\n                break;\n            }\n        }\n    }\n}\n","license":"MIT"},"src/CricketBettingGame.sol":{"keccak256":"0x489873fa5f8d5fda6485ac893502ed071bbdc462b6721746d93e70cd41a03768","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n// Individual Cricket Match Betting Contract\ncontract CricketBettingGame {\n    address public owner;\n    address public factory;\n\n    string public teamA;\n    string public teamB;\n    uint256 public matchId;\n\n    uint256 public constant TOTAL_BALLS = 120; // 20 overs * 6 balls\n    uint256 public currentBall = 0;\n\n    enum BallOutcome {\n        PENDING, // 0 - Default state\n        BOUNDARY, // 1 - 4 or 6 runs\n        WICKET, // 2 - Batsman out\n        DOT_BALL, // 3 - 0 runs\n        ONE_RUN, // 4 - 1 run\n        TWO_RUNS, // 5 - 2 runs\n        EXTRAS // 6 - Wide or No ball\n    }\n\n    enum BallState {\n        CLOSED,\n        OPEN,\n        RESOLVED\n    }\n\n    struct Ball {\n        uint256 ballNumber;\n        BallState state;\n        BallOutcome result;\n        mapping(BallOutcome => uint256) totalBets; // outcome => total amount\n        mapping(BallOutcome => address[]) bettors; // outcome => list of bettors\n        mapping(address => mapping(BallOutcome => uint256)) userBets; // user => outcome => amount\n        mapping(address => bool) hasBet; // Track if user has bet on this ball\n        uint256 totalPool;\n        uint256 uniqueBettorCount;\n        bool distributed;\n        bool refunded;\n    }\n\n    mapping(uint256 => Ball) public balls;\n    mapping(address => uint256) public userBalances;\n\n    // Events for frontend consumption\n    event BallOpened(uint256 indexed ballNumber, uint256 timestamp);\n    event BallClosed(uint256 indexed ballNumber, uint256 timestamp);\n    event BetPlaced(\n        uint256 indexed ballNumber,\n        address indexed bettor,\n        BallOutcome outcome,\n        uint256 amount,\n        uint256 timestamp\n    );\n    event BallResult(\n        uint256 indexed ballNumber,\n        BallOutcome result,\n        uint256 timestamp\n    );\n    event WinningsDistributed(\n        uint256 indexed ballNumber,\n        BallOutcome winningOutcome,\n        uint256 totalPool,\n        uint256 winnersCount,\n        uint256 timestamp\n    );\n    event BetsRefunded(\n        uint256 indexed ballNumber,\n        uint256 totalRefunded,\n        uint256 bettorsCount,\n        uint256 timestamp\n    );\n    event MatchCompleted(uint256 matchId, uint256 timestamp);\n    event BallCancelled(\n        uint256 indexed ballNumber,\n        string reason,\n        uint256 timestamp\n    );\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    modifier ballExists(uint256 _ballNumber) {\n        require(\n            _ballNumber > 0 && _ballNumber <= TOTAL_BALLS,\n            \"Invalid ball number\"\n        );\n        _;\n    }\n\n    constructor(\n        string memory _teamA,\n        string memory _teamB,\n        uint256 _matchId,\n        address _owner\n    ) {\n        teamA = _teamA;\n        teamB = _teamB;\n        matchId = _matchId;\n        owner = _owner;\n        factory = msg.sender;\n    }\n\n    // Owner opens betting for a specific ball\n    function openBall(\n        uint256 _ballNumber\n    ) external onlyOwner ballExists(_ballNumber) {\n        require(\n            balls[_ballNumber].state == BallState.CLOSED,\n            \"Ball already opened or resolved\"\n        );\n        require(_ballNumber == currentBall + 1, \"Must open balls in sequence\");\n\n        balls[_ballNumber].ballNumber = _ballNumber;\n        balls[_ballNumber].state = BallState.OPEN;\n        balls[_ballNumber].result = BallOutcome.PENDING;\n        currentBall = _ballNumber;\n\n        emit BallOpened(_ballNumber, block.timestamp);\n    }\n\n    // Owner closes betting for a specific ball\n    function closeBall(\n        uint256 _ballNumber\n    ) external onlyOwner ballExists(_ballNumber) {\n        require(\n            balls[_ballNumber].state == BallState.OPEN,\n            \"Ball not open for betting\"\n        );\n\n        balls[_ballNumber].state = BallState.CLOSED;\n\n        emit BallClosed(_ballNumber, block.timestamp);\n    }\n\n    // Users place bets on a ball outcome (can bet multiple times on different outcomes)\n    function placeBet(\n        uint256 _ballNumber,\n        BallOutcome _outcome\n    ) external payable ballExists(_ballNumber) {\n        require(msg.value > 0, \"Bet amount must be greater than 0\");\n        require(\n            balls[_ballNumber].state == BallState.OPEN,\n            \"Betting not open for this ball\"\n        );\n        require(\n            _outcome != BallOutcome.PENDING,\n            \"Cannot bet on PENDING outcome\"\n        );\n\n        Ball storage ball = balls[_ballNumber];\n\n        // Track unique bettors\n        if (!ball.hasBet[msg.sender]) {\n            ball.hasBet[msg.sender] = true;\n            ball.uniqueBettorCount++;\n        }\n\n        // Add to user's bet for this outcome (allows multiple bets on same outcome)\n        if (ball.userBets[msg.sender][_outcome] == 0) {\n            ball.bettors[_outcome].push(msg.sender);\n        }\n        ball.userBets[msg.sender][_outcome] += msg.value;\n        ball.totalBets[_outcome] += msg.value;\n        ball.totalPool += msg.value;\n\n        emit BetPlaced(\n            _ballNumber,\n            msg.sender,\n            _outcome,\n            msg.value,\n            block.timestamp\n        );\n    }\n\n    // Users can place multiple bets on different outcomes in a single transaction\n    function placeBets(\n        uint256 _ballNumber,\n        BallOutcome[] memory _outcomes,\n        uint256[] memory _amounts\n    ) external payable ballExists(_ballNumber) {\n        require(_outcomes.length == _amounts.length, \"Arrays length mismatch\");\n        require(_outcomes.length > 0, \"No bets specified\");\n        require(\n            balls[_ballNumber].state == BallState.OPEN,\n            \"Betting not open for this ball\"\n        );\n\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            require(_amounts[i] > 0, \"All bet amounts must be greater than 0\");\n            require(\n                _outcomes[i] != BallOutcome.PENDING,\n                \"Cannot bet on PENDING outcome\"\n            );\n            totalAmount += _amounts[i];\n        }\n        require(\n            msg.value == totalAmount,\n            \"Sent value doesn't match total bet amounts\"\n        );\n\n        Ball storage ball = balls[_ballNumber];\n\n        // Track unique bettors\n        if (!ball.hasBet[msg.sender]) {\n            ball.hasBet[msg.sender] = true;\n            ball.uniqueBettorCount++;\n        }\n\n        // Process each bet\n        for (uint256 i = 0; i < _outcomes.length; i++) {\n            BallOutcome outcome = _outcomes[i];\n            uint256 amount = _amounts[i];\n\n            // Add to user's bet for this outcome\n            if (ball.userBets[msg.sender][outcome] == 0) {\n                ball.bettors[outcome].push(msg.sender);\n            }\n            ball.userBets[msg.sender][outcome] += amount;\n            ball.totalBets[outcome] += amount;\n            ball.totalPool += amount;\n\n            emit BetPlaced(\n                _ballNumber,\n                msg.sender,\n                outcome,\n                amount,\n                block.timestamp\n            );\n        }\n    }\n\n    // Owner reports the result of a ball\n    function reportBallResult(\n        uint256 _ballNumber,\n        BallOutcome _result\n    ) external onlyOwner ballExists(_ballNumber) {\n        require(\n            balls[_ballNumber].state == BallState.CLOSED,\n            \"Ball must be closed first\"\n        );\n        require(_result != BallOutcome.PENDING, \"Result cannot be PENDING\");\n        require(\n            !balls[_ballNumber].distributed && !balls[_ballNumber].refunded,\n            \"Already processed\"\n        );\n\n        balls[_ballNumber].result = _result;\n        balls[_ballNumber].state = BallState.RESOLVED;\n\n        emit BallResult(_ballNumber, _result, block.timestamp);\n\n        // Automatically distribute winnings or refund\n        _processBallResult(_ballNumber);\n    }\n\n    // Owner can cancel a ball and refund all bets (for situations like rain delay, technical issues)\n    function cancelBall(\n        uint256 _ballNumber,\n        string memory _reason\n    ) external onlyOwner ballExists(_ballNumber) {\n        require(\n            balls[_ballNumber].state == BallState.CLOSED,\n            \"Ball must be closed first\"\n        );\n        require(\n            !balls[_ballNumber].distributed && !balls[_ballNumber].refunded,\n            \"Already processed\"\n        );\n\n        emit BallCancelled(_ballNumber, _reason, block.timestamp);\n        _refundAllBets(_ballNumber);\n    }\n\n    // Internal function to process ball result (distribute or refund)\n    function _processBallResult(uint256 _ballNumber) internal {\n        Ball storage ball = balls[_ballNumber];\n        BallOutcome winningOutcome = ball.result;\n\n        // Check if there are any winning bets\n        if (ball.totalBets[winningOutcome] == 0) {\n            // No winners - refund all bets\n            _refundAllBets(_ballNumber);\n            return;\n        }\n\n        // Distribute winnings\n        _distributeWinnings(_ballNumber);\n    }\n\n    // Internal function to distribute winnings\n    function _distributeWinnings(uint256 _ballNumber) internal {\n        Ball storage ball = balls[_ballNumber];\n        BallOutcome winningOutcome = ball.result;\n\n        address[] memory winners = ball.bettors[winningOutcome];\n        uint256 totalWinningBets = ball.totalBets[winningOutcome];\n        uint256 totalPool = ball.totalPool;\n\n        // Distribute proportionally based on bet amounts\n        for (uint256 i = 0; i < winners.length; i++) {\n            address winner = winners[i];\n            uint256 userBet = ball.userBets[winner][winningOutcome];\n            uint256 userWinnings = (userBet * totalPool) / totalWinningBets;\n\n            userBalances[winner] += userWinnings;\n        }\n\n        ball.distributed = true;\n\n        emit WinningsDistributed(\n            _ballNumber,\n            winningOutcome,\n            totalPool,\n            winners.length,\n            block.timestamp\n        );\n\n        // Check if match is completed\n        if (_ballNumber == TOTAL_BALLS) {\n            emit MatchCompleted(matchId, block.timestamp);\n        }\n    }\n\n    // Internal function to refund all bets for a ball\n    function _refundAllBets(uint256 _ballNumber) internal {\n        Ball storage ball = balls[_ballNumber];\n        uint256 totalRefunded = 0;\n        uint256 totalBettors = 0;\n\n        // Refund all outcomes\n        BallOutcome[6] memory outcomes = [\n            BallOutcome.BOUNDARY,\n            BallOutcome.WICKET,\n            BallOutcome.DOT_BALL,\n            BallOutcome.ONE_RUN,\n            BallOutcome.TWO_RUNS,\n            BallOutcome.EXTRAS\n        ];\n\n        for (uint256 i = 0; i < outcomes.length; i++) {\n            BallOutcome outcome = outcomes[i];\n            address[] memory bettors = ball.bettors[outcome];\n\n            for (uint256 j = 0; j < bettors.length; j++) {\n                address bettor = bettors[j];\n                uint256 refundAmount = ball.userBets[bettor][outcome];\n\n                if (refundAmount > 0) {\n                    userBalances[bettor] += refundAmount;\n                    totalRefunded += refundAmount;\n                    totalBettors++;\n                }\n            }\n        }\n\n        ball.refunded = true;\n\n        emit BetsRefunded(\n            _ballNumber,\n            totalRefunded,\n            totalBettors,\n            block.timestamp\n        );\n    }\n\n    // Users withdraw their winnings/refunds\n    function withdraw() external {\n        uint256 amount = userBalances[msg.sender];\n        require(amount > 0, \"No balance to withdraw\");\n\n        userBalances[msg.sender] = 0;\n        payable(msg.sender).transfer(amount);\n    }\n\n    // View functions for frontend\n    function getBallInfo(\n        uint256 _ballNumber\n    )\n        external\n        view\n        ballExists(_ballNumber)\n        returns (\n            BallState state,\n            BallOutcome result,\n            uint256 totalPool,\n            uint256[6] memory outcomeBets, // [BOUNDARY, WICKET, DOT_BALL, ONE_RUN, TWO_RUNS, EXTRAS]\n            uint256 uniqueBettorCount,\n            bool distributed,\n            bool refunded\n        )\n    {\n        Ball storage ball = balls[_ballNumber];\n        uint256[6] memory bets = [\n            ball.totalBets[BallOutcome.BOUNDARY],\n            ball.totalBets[BallOutcome.WICKET],\n            ball.totalBets[BallOutcome.DOT_BALL],\n            ball.totalBets[BallOutcome.ONE_RUN],\n            ball.totalBets[BallOutcome.TWO_RUNS],\n            ball.totalBets[BallOutcome.EXTRAS]\n        ];\n\n        return (\n            ball.state,\n            ball.result,\n            ball.totalPool,\n            bets,\n            ball.uniqueBettorCount,\n            ball.distributed,\n            ball.refunded\n        );\n    }\n\n    function getUserBetForBall(\n        uint256 _ballNumber,\n        address _user,\n        BallOutcome _outcome\n    ) external view ballExists(_ballNumber) returns (uint256) {\n        return balls[_ballNumber].userBets[_user][_outcome];\n    }\n\n    function getUserTotalBetForBall(\n        uint256 _ballNumber,\n        address _user\n    ) external view ballExists(_ballNumber) returns (uint256 totalBet) {\n        Ball storage ball = balls[_ballNumber];\n\n        totalBet += ball.userBets[_user][BallOutcome.BOUNDARY];\n        totalBet += ball.userBets[_user][BallOutcome.WICKET];\n        totalBet += ball.userBets[_user][BallOutcome.DOT_BALL];\n        totalBet += ball.userBets[_user][BallOutcome.ONE_RUN];\n        totalBet += ball.userBets[_user][BallOutcome.TWO_RUNS];\n        totalBet += ball.userBets[_user][BallOutcome.EXTRAS];\n\n        return totalBet;\n    }\n\n    function getMatchInfo()\n        external\n        view\n        returns (string memory, string memory, uint256, uint256, uint256)\n    {\n        return (teamA, teamB, matchId, currentBall, TOTAL_BALLS);\n    }\n\n    function getUserBalance(address _user) external view returns (uint256) {\n        return userBalances[_user];\n    }\n\n    function getBallOutcomeString(\n        BallOutcome _outcome\n    ) external pure returns (string memory) {\n        if (_outcome == BallOutcome.BOUNDARY) return \"Boundary (4/6)\";\n        if (_outcome == BallOutcome.WICKET) return \"Wicket\";\n        if (_outcome == BallOutcome.DOT_BALL) return \"Dot Ball\";\n        if (_outcome == BallOutcome.ONE_RUN) return \"1 Run\";\n        if (_outcome == BallOutcome.TWO_RUNS) return \"2 Runs\";\n        if (_outcome == BallOutcome.EXTRAS) return \"Extras (Wide/No Ball)\";\n        return \"Pending\";\n    }\n\n    // Get detailed betting info for a ball\n    function getBallBettingDetails(\n        uint256 _ballNumber\n    )\n        external\n        view\n        ballExists(_ballNumber)\n        returns (\n            uint256 boundaryBets,\n            uint256 wicketBets,\n            uint256 dotBallBets,\n            uint256 oneRunBets,\n            uint256 twoRunsBets,\n            uint256 extrasBets,\n            uint256 totalPool,\n            uint256 totalBettors\n        )\n    {\n        Ball storage ball = balls[_ballNumber];\n\n        boundaryBets = ball.totalBets[BallOutcome.BOUNDARY];\n        wicketBets = ball.totalBets[BallOutcome.WICKET];\n        dotBallBets = ball.totalBets[BallOutcome.DOT_BALL];\n        oneRunBets = ball.totalBets[BallOutcome.ONE_RUN];\n        twoRunsBets = ball.totalBets[BallOutcome.TWO_RUNS];\n        extrasBets = ball.totalBets[BallOutcome.EXTRAS];\n        totalPool = ball.totalPool;\n\n        // Count total bettors (now returns accurate unique count)\n        totalBettors = ball.uniqueBettorCount;\n\n        return (\n            boundaryBets,\n            wicketBets,\n            dotBallBets,\n            oneRunBets,\n            twoRunsBets,\n            extrasBets,\n            totalPool,\n            totalBettors\n        );\n    }\n\n    // Emergency functions\n    function emergencyPause() external onlyOwner {\n        // Implementation for emergency pause functionality\n        // Could add a paused state and modifier\n    }\n\n    // Get contract balance (for owner monitoring)\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    // Batch function to get multiple balls info (for frontend efficiency)\n    function getMultipleBallsInfo(\n        uint256 _startBall,\n        uint256 _endBall\n    )\n        external\n        view\n        returns (\n            BallState[] memory states,\n            BallOutcome[] memory results,\n            uint256[] memory totalPools\n        )\n    {\n        require(\n            _startBall <= _endBall && _endBall <= TOTAL_BALLS,\n            \"Invalid range\"\n        );\n\n        uint256 length = _endBall - _startBall + 1;\n        states = new BallState[](length);\n        results = new BallOutcome[](length);\n        totalPools = new uint256[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            uint256 ballNumber = _startBall + i;\n            states[i] = balls[ballNumber].state;\n            results[i] = balls[ballNumber].result;\n            totalPools[i] = balls[ballNumber].totalPool;\n        }\n\n        return (states, results, totalPools);\n    }\n}\n","license":"MIT"}},"version":1},"id":16}