{
  "address": "0x65f38A7704Aa141f7502599DbeFeFE57bECf33fe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cleaner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        }
      ],
      "name": "CleanerAssignedToNeighborhood",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CleanerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cleaner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        }
      ],
      "name": "CleanerRemovedFromNeighborhood",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "house",
          "type": "address"
        }
      ],
      "name": "CollectionEventConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cleaner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "house",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CollectionEventCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "complaintId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "neighborhood",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        }
      ],
      "name": "ComplaintCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "ContractPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "neighborhood",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "residents",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "HouseRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "NeighborhoodAdminAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NeighborhoodRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "NeighborhoodStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PointsAwarded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleaner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "assignCleanerToNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "assignNeighborhoodAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_cleaners",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "batchAssignCleanersToNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_cleaners",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "batchRemoveCleanersFromNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cleanerNeighborhoodAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cleaners",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reputation",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collectionEvents",
      "outputs": [
        {
          "internalType": "address",
          "name": "cleaner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "house",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "confirmedByHouse",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "complaints",
      "outputs": [
        {
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "neighborhood",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "complaintId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_imageURI",
          "type": "string"
        }
      ],
      "name": "confirmGarbageCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllNeighborhoods",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRegisteredCleaners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRegisteredHouses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        }
      ],
      "name": "getCleaner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "points",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reputation",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "collectionHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "assignedNeighborhoods",
              "type": "string[]"
            }
          ],
          "internalType": "struct CleanChain.Cleaner",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        }
      ],
      "name": "getCleanerCollectionEvents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getCleanerCollectionEventsPaginated",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        }
      ],
      "name": "getCleanerCollectionStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEvents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmedEvents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmationRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        }
      ],
      "name": "getCleanerNeighborhoods",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "getCleanersInNeighborhood",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getCollectionEvent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cleaner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "house",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "imageHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "imageURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "confirmedByHouse",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "eventId",
              "type": "uint256"
            }
          ],
          "internalType": "struct CleanChain.CollectionEvent",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        }
      ],
      "name": "getHouse",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "points",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "neighborhood",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "residents",
              "type": "uint8"
            },
            {
              "internalType": "bytes32[]",
              "name": "collectionHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CleanChain.House",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        }
      ],
      "name": "getHouseCollectionEvents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getHouseCollectionEventsPaginated",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        }
      ],
      "name": "getHouseCollectionStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEvents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmedEvents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingEvents",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "getHousesInNeighborhood",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "getNeighborhood",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalHouses",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCleaners",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollections",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "confirmedCollections",
              "type": "uint256"
            }
          ],
          "internalType": "struct CleanChain.Neighborhood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "getNeighborhoodStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalHouses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCleaners",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollections",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmedCollections",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmationRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCleaners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalHouses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalNeighborhoods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "houses",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "neighborhood",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "residents",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleaner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "isCleanerAlreadyAssigned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleaner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "isCleanerAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isNeighborhoodAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isRegisteredCleaner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isRegisteredHouse",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_imageURI",
          "type": "string"
        }
      ],
      "name": "logGarbageCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "neighborhoodAdmins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "neighborhoodCleaners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "neighborhoodHouses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "neighborhoods",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalHouses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCleaners",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollections",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmedCollections",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pauseContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerCleaner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_residents",
          "type": "uint8"
        }
      ],
      "name": "registerHouse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "registerNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredCleaners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredHouses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredNeighborhoods",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleaner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "removeCleanerFromNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setNeighborhoodStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCleaners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollectionEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalComplaints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHouses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reputation",
          "type": "uint256"
        }
      ],
      "name": "updateCleanerReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_points",
          "type": "uint256"
        }
      ],
      "name": "updateHousePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "validateNeighborhoodExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6e3d371bde424ad1f17841897e04c5f6863dd19c696f89fea314c62c2bf155ef",
  "receipt": {
    "to": null,
    "from": "0x19c243C557Ac5237Da731E814B16A8E9Dc0A1Ca3",
    "contractAddress": "0x65f38A7704Aa141f7502599DbeFeFE57bECf33fe",
    "transactionIndex": 9,
    "gasUsed": "5422099",
    "logsBloom": "0x
    "blockHash": "0x75841d0b427fd143ba61b5b0e890ac072d7e400e6a098e66afbf4a89153306bd",
    "transactionHash": "0x6e3d371bde424ad1f17841897e04c5f6863dd19c696f89fea314c62c2bf155ef",
    "logs": [],
    "blockNumber": 19400280,
    "cumulativeGasUsed": "6486980",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x19c243C557Ac5237Da731E814B16A8E9Dc0A1Ca3"
  ],
  "numDeployments": 1,
  "solcInputHash": "14f4cd4da91d6fe0977f0bad92134713",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"}],\"name\":\"CleanerAssignedToNeighborhood\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CleanerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"}],\"name\":\"CleanerRemovedFromNeighborhood\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"house\",\"type\":\"address\"}],\"name\":\"CollectionEventConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"house\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CollectionEventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"complaintId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"}],\"name\":\"ComplaintCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"residents\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"HouseRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NeighborhoodAdminAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NeighborhoodRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"NeighborhoodStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PointsAwarded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleaner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"assignCleanerToNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"assignNeighborhoodAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cleaners\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"batchAssignCleanersToNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cleaners\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"batchRemoveCleanersFromNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cleanerNeighborhoodAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cleaners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectionEvents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"house\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"confirmedByHouse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"complaints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"complaintId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"name\":\"confirmGarbageCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNeighborhoods\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRegisteredCleaners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRegisteredHouses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"}],\"name\":\"getCleaner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"collectionHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"assignedNeighborhoods\",\"type\":\"string[]\"}],\"internalType\":\"struct CleanChain.Cleaner\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"}],\"name\":\"getCleanerCollectionEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getCleanerCollectionEventsPaginated\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"}],\"name\":\"getCleanerCollectionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEvents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedEvents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmationRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"}],\"name\":\"getCleanerNeighborhoods\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"getCleanersInNeighborhood\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getCollectionEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"house\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"confirmedByHouse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"internalType\":\"struct CleanChain.CollectionEvent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"}],\"name\":\"getHouse\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"residents\",\"type\":\"uint8\"},{\"internalType\":\"bytes32[]\",\"name\":\"collectionHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CleanChain.House\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"}],\"name\":\"getHouseCollectionEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getHouseCollectionEventsPaginated\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"}],\"name\":\"getHouseCollectionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEvents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedEvents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingEvents\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"getHousesInNeighborhood\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"getNeighborhood\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHouses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCleaners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedCollections\",\"type\":\"uint256\"}],\"internalType\":\"struct CleanChain.Neighborhood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"getNeighborhoodStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalHouses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCleaners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmationRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCleaners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHouses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNeighborhoods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"houses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"residents\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleaner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"isCleanerAlreadyAssigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleaner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"isCleanerAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isNeighborhoodAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isRegisteredCleaner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isRegisteredHouse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"name\":\"logGarbageCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"neighborhoodAdmins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"neighborhoodCleaners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"neighborhoodHouses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"neighborhoods\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHouses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCleaners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedCollections\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerCleaner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_residents\",\"type\":\"uint8\"}],\"name\":\"registerHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"registerNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredCleaners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredHouses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredNeighborhoods\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleaner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"removeCleanerFromNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setNeighborhoodStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCleaners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollectionEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalComplaints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHouses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reputation\",\"type\":\"uint256\"}],\"name\":\"updateCleanerReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"updateHousePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"validateNeighborhoodExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"CleanChain Team\",\"kind\":\"dev\",\"methods\":{\"assignCleanerToNeighborhood(address,string)\":{\"params\":{\"_cleaner\":\"Address of the cleaner\",\"_neighborhood\":\"Name of the neighborhood\"}},\"assignNeighborhoodAdmin(string,address)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\",\"_newAdmin\":\"Address of the new admin\"}},\"batchAssignCleanersToNeighborhood(address[],string)\":{\"params\":{\"_cleaners\":\"Array of cleaner addresses\",\"_neighborhood\":\"Name of the neighborhood\"}},\"batchRemoveCleanersFromNeighborhood(address[],string)\":{\"params\":{\"_cleaners\":\"Array of cleaner addresses\",\"_neighborhood\":\"Name of the neighborhood\"}},\"confirmGarbageCollection(uint256,bytes32,string)\":{\"params\":{\"_eventId\":\"ID of the collection event to confirm\",\"_imageHash\":\"Hash of the validation image taken by the house\",\"_imageURI\":\"URI pointing to the house's validation image\"}},\"getAllNeighborhoods()\":{\"returns\":{\"_0\":\"Array of neighborhood names\"}},\"getAllRegisteredCleaners()\":{\"returns\":{\"_0\":\"Array of all registered cleaner addresses\"}},\"getAllRegisteredHouses()\":{\"returns\":{\"_0\":\"Array of all registered house addresses\"}},\"getCleaner(address)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\"},\"returns\":{\"_0\":\"Cleaner struct containing all cleaner information\"}},\"getCleanerCollectionEvents(address)\":{\"details\":\"This function may run out of gas with large datasets. Use getCleanerCollectionEventsPaginated instead.\",\"params\":{\"_cleanerAddress\":\"Address of the cleaner\"},\"returns\":{\"_0\":\"Array of event IDs for the cleaner\"}},\"getCleanerCollectionEventsPaginated(address,uint256,uint256)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\",\"_limit\":\"Maximum number of events to return\",\"_offset\":\"Starting index for pagination\"},\"returns\":{\"_0\":\"Array of event IDs for the cleaner\",\"_1\":\"Total count of events for this cleaner\"}},\"getCleanerCollectionStats(address)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\"},\"returns\":{\"confirmationRate\":\"Percentage of confirmed collections (0-100)\",\"confirmedEvents\":\"Number of confirmed collection events\",\"totalEvents\":\"Total collection events by the cleaner\"}},\"getCleanerNeighborhoods(address)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\"},\"returns\":{\"_0\":\"Array of neighborhood names where cleaner is authorized\"}},\"getCleanersInNeighborhood(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Array of cleaner addresses in the neighborhood\"}},\"getCollectionEvent(uint256)\":{\"params\":{\"_eventId\":\"ID of the collection event\"},\"returns\":{\"_0\":\"CollectionEvent struct containing event details\"}},\"getHouse(address)\":{\"params\":{\"_houseAddress\":\"Address of the house\"},\"returns\":{\"_0\":\"House struct containing all house information\"}},\"getHouseCollectionEvents(address)\":{\"details\":\"This function may run out of gas with large datasets. Use getHouseCollectionEventsPaginated instead.\",\"params\":{\"_houseAddress\":\"Address of the house\"},\"returns\":{\"_0\":\"Array of event IDs for the house\"}},\"getHouseCollectionEventsPaginated(address,uint256,uint256)\":{\"params\":{\"_houseAddress\":\"Address of the house\",\"_limit\":\"Maximum number of events to return\",\"_offset\":\"Starting index for pagination\"},\"returns\":{\"_0\":\"Array of event IDs for the house\",\"_1\":\"Total count of events for this house\"}},\"getHouseCollectionStats(address)\":{\"params\":{\"_houseAddress\":\"Address of the house\"},\"returns\":{\"confirmedEvents\":\"Number of confirmed collection events\",\"pendingEvents\":\"Number of pending (unconfirmed) collection events\",\"totalEvents\":\"Total collection events for the house\"}},\"getHousesInNeighborhood(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Array of house addresses in the neighborhood\"}},\"getNeighborhood(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Neighborhood struct containing all neighborhood information\"}},\"getNeighborhoodStats(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"confirmationRate\":\"Percentage of confirmed collections (0-100)\",\"confirmedCollections\":\"Number of confirmed collections\",\"totalCleaners\":\"Number of cleaners assigned to neighborhood\",\"totalCollections\":\"Total collection events in neighborhood\",\"totalHouses\":\"Number of houses in neighborhood\"}},\"getTotalCleaners()\":{\"returns\":{\"_0\":\"Total number of cleaners\"}},\"getTotalHouses()\":{\"returns\":{\"_0\":\"Total number of houses\"}},\"getTotalNeighborhoods()\":{\"returns\":{\"_0\":\"Total number of neighborhoods\"}},\"isCleanerAlreadyAssigned(address,string)\":{\"params\":{\"_cleaner\":\"Address of the cleaner\",\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Boolean indicating if cleaner is already assigned\"}},\"isCleanerAuthorized(address,string)\":{\"params\":{\"_cleaner\":\"Address of the cleaner\",\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Boolean indicating if cleaner is authorized\"}},\"isNeighborhoodAdmin(address)\":{\"params\":{\"_address\":\"Address to check\"},\"returns\":{\"_0\":\"Boolean indicating if address is a neighborhood admin\"}},\"isPaused()\":{\"returns\":{\"_0\":\"Boolean indicating if contract is paused\"}},\"isRegisteredCleaner(address)\":{\"params\":{\"_address\":\"Address to check\"},\"returns\":{\"_0\":\"Boolean indicating if address is a registered cleaner\"}},\"isRegisteredHouse(address)\":{\"params\":{\"_address\":\"Address to check\"},\"returns\":{\"_0\":\"Boolean indicating if address is a registered house\"}},\"logGarbageCollection(address,bytes32,string)\":{\"params\":{\"_houseAddress\":\"Address of the house where garbage was collected\",\"_imageHash\":\"Hash of the image taken as proof of collection\",\"_imageURI\":\"URI pointing to the off-chain stored image\"}},\"pauseContract(bool)\":{\"params\":{\"_paused\":\"New pause state\"}},\"registerHouse(string,uint8)\":{\"params\":{\"_neighborhood\":\"The neighborhood where the house is located\",\"_residents\":\"Number of residents in the house\"}},\"registerNeighborhood(string,string,address)\":{\"params\":{\"_admin\":\"Address of the neighborhood admin\",\"_description\":\"Description of the neighborhood\",\"_name\":\"Name of the neighborhood\"}},\"removeCleanerFromNeighborhood(address,string)\":{\"params\":{\"_cleaner\":\"Address of the cleaner\",\"_neighborhood\":\"Name of the neighborhood\"}},\"setNeighborhoodStatus(string,bool)\":{\"params\":{\"_isActive\":\"New status for the neighborhood\",\"_neighborhood\":\"Name of the neighborhood\"}},\"updateCleanerReputation(address,uint256)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\",\"_reputation\":\"New reputation value\"}},\"updateHousePoints(address,uint256)\":{\"params\":{\"_houseAddress\":\"Address of the house\",\"_points\":\"New points value\"}},\"validateNeighborhoodExists(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood to check\"},\"returns\":{\"_0\":\"Boolean indicating if neighborhood exists and is active\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assignCleanerToNeighborhood(address,string)\":{\"notice\":\"Assign cleaner to neighborhood (by admin or owner)\"},\"assignNeighborhoodAdmin(string,address)\":{\"notice\":\"Assign or change neighborhood admin\"},\"batchAssignCleanersToNeighborhood(address[],string)\":{\"notice\":\"Batch assign multiple cleaners to a neighborhood\"},\"batchRemoveCleanersFromNeighborhood(address[],string)\":{\"notice\":\"Batch remove multiple cleaners from a neighborhood\"},\"confirmGarbageCollection(uint256,bytes32,string)\":{\"notice\":\"Confirm garbage collection by house with validation\"},\"getAllNeighborhoods()\":{\"notice\":\"Get all registered neighborhoods\"},\"getAllRegisteredCleaners()\":{\"notice\":\"Get all registered cleaner addresses\"},\"getAllRegisteredHouses()\":{\"notice\":\"Get all registered house addresses\"},\"getCleaner(address)\":{\"notice\":\"Get cleaner information by address\"},\"getCleanerCollectionEvents(address)\":{\"notice\":\"Get all collection events for a specific cleaner (DEPRECATED - use paginated version)\"},\"getCleanerCollectionEventsPaginated(address,uint256,uint256)\":{\"notice\":\"Get collection events for a cleaner with pagination to avoid gas issues\"},\"getCleanerCollectionStats(address)\":{\"notice\":\"Get collection statistics for a cleaner\"},\"getCleanerNeighborhoods(address)\":{\"notice\":\"Get neighborhoods assigned to a cleaner\"},\"getCleanersInNeighborhood(string)\":{\"notice\":\"Get all cleaners in a neighborhood\"},\"getCollectionEvent(uint256)\":{\"notice\":\"Get collection event details by ID\"},\"getHouse(address)\":{\"notice\":\"Get house information by address\"},\"getHouseCollectionEvents(address)\":{\"notice\":\"Get all collection events for a specific house (DEPRECATED - use paginated version)\"},\"getHouseCollectionEventsPaginated(address,uint256,uint256)\":{\"notice\":\"Get collection events for a house with pagination to avoid gas issues\"},\"getHouseCollectionStats(address)\":{\"notice\":\"Get collection statistics for a house\"},\"getHousesInNeighborhood(string)\":{\"notice\":\"Get all houses in a neighborhood\"},\"getNeighborhood(string)\":{\"notice\":\"Get neighborhood information\"},\"getNeighborhoodStats(string)\":{\"notice\":\"Get neighborhood statistics\"},\"getTotalCleaners()\":{\"notice\":\"Get total number of registered cleaners\"},\"getTotalHouses()\":{\"notice\":\"Get total number of registered houses\"},\"getTotalNeighborhoods()\":{\"notice\":\"Get total number of registered neighborhoods\"},\"isCleanerAlreadyAssigned(address,string)\":{\"notice\":\"FIXED: Check for duplicate cleaner assignment more efficiently\"},\"isCleanerAuthorized(address,string)\":{\"notice\":\"Check if cleaner is authorized in neighborhood\"},\"isNeighborhoodAdmin(address)\":{\"notice\":\"Check if address is a neighborhood admin\"},\"isPaused()\":{\"notice\":\"Get contract pause status\"},\"isRegisteredCleaner(address)\":{\"notice\":\"Check if an address is a registered cleaner\"},\"isRegisteredHouse(address)\":{\"notice\":\"Check if an address is a registered house\"},\"logGarbageCollection(address,bytes32,string)\":{\"notice\":\"Log garbage collection by cleaner with image proof\"},\"pauseContract(bool)\":{\"notice\":\"Pause or unpause the contract (emergency function)\"},\"registerCleaner()\":{\"notice\":\"Register a cleaner with wallet public key\"},\"registerHouse(string,uint8)\":{\"notice\":\"Register a house with wallet public key and metadata\"},\"registerNeighborhood(string,string,address)\":{\"notice\":\"Register a new neighborhood with admin\"},\"removeCleanerFromNeighborhood(address,string)\":{\"notice\":\"Remove cleaner from neighborhood\"},\"setNeighborhoodStatus(string,bool)\":{\"notice\":\"Activate or deactivate a neighborhood\"},\"updateCleanerReputation(address,uint256)\":{\"notice\":\"Update cleaner reputation (only owner)\"},\"updateHousePoints(address,uint256)\":{\"notice\":\"Update house points (only owner)\"},\"validateNeighborhoodExists(string)\":{\"notice\":\"FIXED: Validate that a neighborhood exists before operations\"}},\"notice\":\"CleanChain - Decentralized Garbage Collection Verification Platform A smart contract for tracking, verifying, and incentivizing neighborhood garbage collection\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CleanChain.sol\":\"CleanChain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/CleanChain.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\n// import \\\"hardhat/console.sol\\\"; // REMOVED: console.log not needed in production\\n\\n/**\\n * CleanChain - Decentralized Garbage Collection Verification Platform\\n * A smart contract for tracking, verifying, and incentivizing neighborhood garbage collection\\n * @author CleanChain Team\\n */\\ncontract CleanChain {\\n    // State Variables\\n    address public immutable owner;\\n    uint256 public totalHouses = 0;\\n    uint256 public totalCleaners = 0;\\n    uint256 public totalCollectionEvents = 0;\\n    uint256 public totalComplaints = 0;\\n\\n    // Data Structures as defined in PRD\\n    struct House {\\n        address wallet;\\n        uint256 points;\\n        string neighborhood;\\n        uint8 residents;\\n        bytes32[] collectionHashes;\\n        bool isRegistered;\\n        uint256 registrationTimestamp;\\n    }\\n\\n    struct Cleaner {\\n        address wallet;\\n        uint256 points;\\n        uint256 reputation;\\n        bytes32[] collectionHashes;\\n        bool isRegistered;\\n        uint256 registrationTimestamp;\\n        string[] assignedNeighborhoods; // Neighborhoods where cleaner is authorized\\n    }\\n\\n    struct CollectionEvent {\\n        address cleaner;\\n        address house;\\n        uint256 timestamp;\\n        bytes32 imageHash;\\n        string imageURI;\\n        bool confirmedByHouse;\\n        uint256 eventId;\\n    }\\n\\n    struct Complaint {\\n        address reporter;\\n        bytes32 imageHash;\\n        string imageURI;\\n        string location;\\n        string neighborhood;\\n        address[] validators;\\n        uint8 status; // 0 = PENDING, 1 = VALIDATED, 2 = INVALID\\n        uint256 timestamp;\\n        uint256 complaintId;\\n    }\\n\\n    struct Neighborhood {\\n        string name;\\n        string description;\\n        address admin;\\n        bool isActive;\\n        uint256 registrationTimestamp;\\n        uint256 totalHouses;\\n        uint256 totalCleaners;\\n        uint256 totalCollections;\\n        uint256 confirmedCollections;\\n    }\\n\\n    // Mappings\\n    mapping(address => House) public houses;\\n    mapping(address => Cleaner) public cleaners;\\n    mapping(uint256 => CollectionEvent) public collectionEvents;\\n    mapping(uint256 => Complaint) public complaints;\\n    mapping(string => address[]) public neighborhoodHouses; // neighborhood => array of house addresses\\n    mapping(string => address[]) public neighborhoodCleaners; // neighborhood => array of cleaner addresses\\n    mapping(string => Neighborhood) public neighborhoods; // neighborhood name => Neighborhood struct\\n    mapping(address => bool) public neighborhoodAdmins; // address => is neighborhood admin\\n    mapping(string => mapping(address => bool)) public cleanerNeighborhoodAccess; // neighborhood => cleaner => authorized\\n\\n    // Arrays for enumeration\\n    address[] public registeredHouses;\\n    address[] public registeredCleaners;\\n    string[] public registeredNeighborhoods;\\n\\n    // Contract state\\n    bool public contractPaused = false;\\n\\n    // Events\\n    event HouseRegistered(address indexed wallet, string neighborhood, uint8 residents, uint256 timestamp);\\n    event CleanerRegistered(address indexed wallet, uint256 timestamp);\\n    event CollectionEventCreated(\\n        uint256 indexed eventId,\\n        address indexed cleaner,\\n        address indexed house,\\n        bytes32 imageHash,\\n        uint256 timestamp\\n    );\\n    event CollectionEventConfirmed(uint256 indexed eventId, address indexed house);\\n    event ComplaintCreated(\\n        uint256 indexed complaintId,\\n        address indexed reporter,\\n        string location,\\n        string neighborhood,\\n        bytes32 imageHash\\n    );\\n    event PointsAwarded(address indexed recipient, uint256 points, string reason);\\n    event NeighborhoodRegistered(string indexed neighborhoodName, address indexed admin, uint256 timestamp);\\n    event NeighborhoodAdminAssigned(string indexed neighborhoodName, address indexed admin);\\n    event CleanerAssignedToNeighborhood(address indexed cleaner, string neighborhoodName);\\n    event CleanerRemovedFromNeighborhood(address indexed cleaner, string neighborhoodName);\\n    event ContractPaused(bool paused);\\n    event NeighborhoodStatusChanged(string indexed neighborhoodName, bool isActive);\\n\\n    // Constructor\\n    constructor(address _owner) {\\n        owner = _owner;\\n        // console.log(\\\"CleanChain contract deployed by:\\\", _owner); // REMOVED\\n    }\\n\\n    // Modifiers\\n    modifier isOwner() {\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredHouse() {\\n        require(houses[msg.sender].isRegistered, \\\"House not registered\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredCleaner() {\\n        require(cleaners[msg.sender].isRegistered, \\\"Cleaner not registered\\\");\\n        _;\\n    }\\n\\n    modifier validNeighborhood(string memory _neighborhood) {\\n        require(bytes(_neighborhood).length > 0, \\\"Neighborhood cannot be empty\\\");\\n        require(neighborhoods[_neighborhood].isActive, \\\"Neighborhood not active or doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier validResidents(uint8 _residents) {\\n        require(_residents > 0 && _residents <= 20, \\\"Invalid number of residents\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!contractPaused, \\\"Contract is paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyNeighborhoodAdmin(string memory _neighborhood) {\\n        require(\\n            msg.sender == owner || \\n            (neighborhoods[_neighborhood].admin == msg.sender && neighborhoodAdmins[msg.sender]),\\n            \\\"Not authorized neighborhood admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier cleanerAuthorizedInNeighborhood(address _cleaner, string memory _neighborhood) {\\n        require(\\n            cleanerNeighborhoodAccess[_neighborhood][_cleaner] || \\n            neighborhoods[_neighborhood].admin == _cleaner,\\n            \\\"Cleaner not authorized in this neighborhood\\\"\\n        );\\n        _;\\n    }\\n\\n    // Neighborhood Management Functions\\n    /**\\n     * Register a new neighborhood with admin\\n     * @param _name Name of the neighborhood\\n     * @param _description Description of the neighborhood\\n     * @param _admin Address of the neighborhood admin\\n     */\\n    function registerNeighborhood(\\n        string memory _name,\\n        string memory _description,\\n        address _admin\\n    ) \\n        external \\n        whenNotPaused\\n    {\\n        require(bytes(_name).length > 0, \\\"Neighborhood name cannot be empty\\\");\\n        require(bytes(_description).length > 0, \\\"Description cannot be empty\\\");\\n        require(_admin != address(0), \\\"Invalid admin address\\\");\\n        require(bytes(neighborhoods[_name].name).length == 0, \\\"Neighborhood already exists\\\"); // FIXED: Proper check for existing neighborhood\\n        \\n        // Create new neighborhood\\n        Neighborhood storage newNeighborhood = neighborhoods[_name];\\n        newNeighborhood.name = _name;\\n        newNeighborhood.description = _description;\\n        newNeighborhood.admin = _admin;\\n        newNeighborhood.isActive = true;\\n        newNeighborhood.registrationTimestamp = block.timestamp;\\n        \\n        // Set admin permissions\\n        neighborhoodAdmins[_admin] = true;\\n        \\n        // Add to enumeration array\\n        registeredNeighborhoods.push(_name);\\n        \\n        // console.log(\\\"Neighborhood registered:\\\", _name, \\\"with admin:\\\", _admin); // REMOVED\\n        emit NeighborhoodRegistered(_name, _admin, block.timestamp);\\n    }\\n\\n    /**\\n     * Assign or change neighborhood admin\\n     * @param _neighborhood Name of the neighborhood\\n     * @param _newAdmin Address of the new admin\\n     */\\n    function assignNeighborhoodAdmin(\\n        string memory _neighborhood,\\n        address _newAdmin\\n    ) \\n        external \\n        whenNotPaused\\n    {\\n        require(neighborhoods[_neighborhood].isActive, \\\"Neighborhood doesn't exist\\\");\\n        require(_newAdmin != address(0), \\\"Invalid admin address\\\");\\n        \\n        address oldAdmin = neighborhoods[_neighborhood].admin;\\n        \\n        // FIXED: Only remove admin permissions if they're not admin of other neighborhoods\\n        if (oldAdmin != _newAdmin && oldAdmin != owner) {\\n            bool isAdminOfOtherNeighborhoods = false;\\n            for (uint256 i = 0; i < registeredNeighborhoods.length; i++) {\\n                string memory neighName = registeredNeighborhoods[i];\\n                if (keccak256(abi.encodePacked(neighName)) != keccak256(abi.encodePacked(_neighborhood)) &&\\n                    neighborhoods[neighName].admin == oldAdmin) {\\n                    isAdminOfOtherNeighborhoods = true;\\n                    break;\\n                }\\n            }\\n            if (!isAdminOfOtherNeighborhoods) {\\n                neighborhoodAdmins[oldAdmin] = false;\\n            }\\n        }\\n        \\n        // Set new admin\\n        neighborhoods[_neighborhood].admin = _newAdmin;\\n        neighborhoodAdmins[_newAdmin] = true;\\n        \\n        emit NeighborhoodAdminAssigned(_neighborhood, _newAdmin);\\n    }\\n\\n    /**\\n     * Activate or deactivate a neighborhood\\n     * @param _neighborhood Name of the neighborhood\\n     * @param _isActive New status for the neighborhood\\n     */\\n    function setNeighborhoodStatus(\\n        string memory _neighborhood,\\n        bool _isActive\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(bytes(neighborhoods[_neighborhood].name).length > 0, \\\"Neighborhood doesn't exist\\\");\\n        neighborhoods[_neighborhood].isActive = _isActive;\\n        \\n        emit NeighborhoodStatusChanged(_neighborhood, _isActive);\\n    }\\n\\n    /**\\n     * Assign cleaner to neighborhood (by admin or owner)\\n     * @param _cleaner Address of the cleaner\\n     * @param _neighborhood Name of the neighborhood\\n     */\\n    function assignCleanerToNeighborhood(\\n        address _cleaner,\\n        string memory _neighborhood\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(cleaners[_cleaner].isRegistered, \\\"Cleaner not registered\\\");\\n        require(neighborhoods[_neighborhood].isActive, \\\"Neighborhood not active\\\");\\n        require(!cleanerNeighborhoodAccess[_neighborhood][_cleaner], \\\"Cleaner already assigned\\\");\\n        \\n        cleanerNeighborhoodAccess[_neighborhood][_cleaner] = true;\\n        cleaners[_cleaner].assignedNeighborhoods.push(_neighborhood);\\n        neighborhoodCleaners[_neighborhood].push(_cleaner);\\n        neighborhoods[_neighborhood].totalCleaners++;\\n        \\n        emit CleanerAssignedToNeighborhood(_cleaner, _neighborhood);\\n    }\\n\\n    /**\\n     * Remove cleaner from neighborhood\\n     * @param _cleaner Address of the cleaner\\n     * @param _neighborhood Name of the neighborhood\\n     */\\n    function removeCleanerFromNeighborhood(\\n        address _cleaner,\\n        string memory _neighborhood\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(cleanerNeighborhoodAccess[_neighborhood][_cleaner], \\\"Cleaner not assigned to neighborhood\\\");\\n        \\n        cleanerNeighborhoodAccess[_neighborhood][_cleaner] = false;\\n        \\n        // Remove from cleaner's assigned neighborhoods array\\n        string[] storage assigned = cleaners[_cleaner].assignedNeighborhoods;\\n        for (uint256 i = 0; i < assigned.length; i++) {\\n            if (keccak256(abi.encodePacked(assigned[i])) == keccak256(abi.encodePacked(_neighborhood))) {\\n                assigned[i] = assigned[assigned.length - 1];\\n                assigned.pop();\\n                break;\\n            }\\n        }\\n        \\n        // FIXED: Remove from neighborhood cleaners array\\n        address[] storage neighborhoodCleanersList = neighborhoodCleaners[_neighborhood];\\n        for (uint256 i = 0; i < neighborhoodCleanersList.length; i++) {\\n            if (neighborhoodCleanersList[i] == _cleaner) {\\n                neighborhoodCleanersList[i] = neighborhoodCleanersList[neighborhoodCleanersList.length - 1];\\n                neighborhoodCleanersList.pop();\\n                break;\\n            }\\n        }\\n        \\n        neighborhoods[_neighborhood].totalCleaners--;\\n        \\n        emit CleanerRemovedFromNeighborhood(_cleaner, _neighborhood);\\n    }\\n\\n    // House Registration Functions\\n    /**\\n     * Register a house with wallet public key and metadata\\n     * @param _neighborhood The neighborhood where the house is located\\n     * @param _residents Number of residents in the house\\n     */\\n    function registerHouse(\\n        string memory _neighborhood,\\n        uint8 _residents\\n    ) \\n        external \\n        validNeighborhood(_neighborhood)\\n        validResidents(_residents)\\n        whenNotPaused\\n    {\\n        require(!houses[msg.sender].isRegistered, \\\"House already registered\\\");\\n        \\n        // Create new house\\n        House storage newHouse = houses[msg.sender];\\n        newHouse.wallet = msg.sender;\\n        newHouse.points = 0;\\n        newHouse.neighborhood = _neighborhood;\\n        newHouse.residents = _residents;\\n        newHouse.isRegistered = true;\\n        newHouse.registrationTimestamp = block.timestamp;\\n\\n        // Add to arrays for enumeration\\n        registeredHouses.push(msg.sender);\\n        neighborhoodHouses[_neighborhood].push(msg.sender);\\n        \\n        // Update neighborhood statistics\\n        neighborhoods[_neighborhood].totalHouses++;\\n        \\n        // Increment counter\\n        totalHouses++;\\n\\n        // Award registration points\\n        awardPoints(msg.sender, 10, \\\"House Registration\\\");\\n\\n        // console.log(\\\"House registered:\\\", msg.sender, \\\"in neighborhood:\\\", _neighborhood); // REMOVED\\n        emit HouseRegistered(msg.sender, _neighborhood, _residents, block.timestamp);\\n    }\\n\\n    /**\\n     * Register a cleaner with wallet public key\\n     */\\n    function registerCleaner() external whenNotPaused {\\n        require(!cleaners[msg.sender].isRegistered, \\\"Cleaner already registered\\\");\\n        require(!houses[msg.sender].isRegistered, \\\"Address already registered as house\\\");\\n        \\n        // Create new cleaner\\n        Cleaner storage newCleaner = cleaners[msg.sender];\\n        newCleaner.wallet = msg.sender;\\n        newCleaner.points = 0;\\n        newCleaner.reputation = 100; // Start with base reputation\\n        newCleaner.isRegistered = true;\\n        newCleaner.registrationTimestamp = block.timestamp;\\n\\n        // Add to array for enumeration\\n        registeredCleaners.push(msg.sender);\\n        \\n        // Increment counter\\n        totalCleaners++;\\n\\n        // Award registration points\\n        awardPoints(msg.sender, 10, \\\"Cleaner Registration\\\");\\n\\n        // console.log(\\\"Cleaner registered:\\\", msg.sender); // REMOVED\\n        emit CleanerRegistered(msg.sender, block.timestamp);\\n    }\\n\\n    // Collection Event Functions\\n    /**\\n     * Log garbage collection by cleaner with image proof\\n     * @param _houseAddress Address of the house where garbage was collected\\n     * @param _imageHash Hash of the image taken as proof of collection\\n     * @param _imageURI URI pointing to the off-chain stored image\\n     */\\n    function logGarbageCollection(\\n        address _houseAddress,\\n        bytes32 _imageHash,\\n        string memory _imageURI\\n    ) \\n        external \\n        onlyRegisteredCleaner\\n        whenNotPaused\\n    {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        require(_imageHash != bytes32(0), \\\"Image hash cannot be empty\\\");\\n        require(bytes(_imageURI).length > 0, \\\"Image URI cannot be empty\\\");\\n        \\n        string memory houseNeighborhood = houses[_houseAddress].neighborhood;\\n        \\n        // Check if cleaner is authorized in this neighborhood\\n        require(\\n            cleanerNeighborhoodAccess[houseNeighborhood][msg.sender] ||\\n            neighborhoods[houseNeighborhood].admin == msg.sender ||\\n            msg.sender == owner,\\n            \\\"Cleaner not authorized in this neighborhood\\\"\\n        );\\n        \\n        // Create new collection event\\n        uint256 eventId = totalCollectionEvents;\\n        CollectionEvent storage newEvent = collectionEvents[eventId];\\n        newEvent.cleaner = msg.sender;\\n        newEvent.house = _houseAddress;\\n        newEvent.timestamp = block.timestamp;\\n        newEvent.imageHash = _imageHash;\\n        newEvent.imageURI = _imageURI;\\n        newEvent.confirmedByHouse = false;\\n        newEvent.eventId = eventId;\\n\\n        // Add hash to cleaner's collection history\\n        cleaners[msg.sender].collectionHashes.push(_imageHash);\\n        \\n        // Update neighborhood statistics\\n        neighborhoods[houseNeighborhood].totalCollections++;\\n        \\n        // Increment counter\\n        totalCollectionEvents++;\\n\\n        // Award points to cleaner\\n        awardPoints(msg.sender, 20, \\\"Garbage Collection\\\");\\n\\n        // console.log(\\\"Garbage collection logged by cleaner:\\\", msg.sender, \\\"at house:\\\", _houseAddress); // REMOVED\\n        emit CollectionEventCreated(eventId, msg.sender, _houseAddress, _imageHash, block.timestamp);\\n    }\\n\\n    /**\\n     * Confirm garbage collection by house with validation\\n     * @param _eventId ID of the collection event to confirm\\n     * @param _imageHash Hash of the validation image taken by the house\\n     * @param _imageURI URI pointing to the house's validation image\\n     */\\n    function confirmGarbageCollection(\\n        uint256 _eventId,\\n        bytes32 _imageHash,\\n        string memory _imageURI\\n    ) \\n        external \\n        onlyRegisteredHouse\\n        whenNotPaused\\n    {\\n        require(_eventId < totalCollectionEvents, \\\"Invalid event ID\\\");\\n        require(_imageHash != bytes32(0), \\\"Image hash cannot be empty\\\");\\n        require(bytes(_imageURI).length > 0, \\\"Image URI cannot be empty\\\");\\n        \\n        CollectionEvent storage collectionEvent = collectionEvents[_eventId];\\n        require(collectionEvent.house == msg.sender, \\\"Not authorized to confirm this event\\\");\\n        require(!collectionEvent.confirmedByHouse, \\\"Event already confirmed\\\");\\n        \\n        // Confirm the event\\n        collectionEvent.confirmedByHouse = true;\\n        \\n        // FIXED: Only add the house's validation hash, not the cleaner's proof hash\\n        houses[msg.sender].collectionHashes.push(_imageHash);\\n        \\n        // Update neighborhood statistics\\n        string memory houseNeighborhood = houses[msg.sender].neighborhood;\\n        neighborhoods[houseNeighborhood].confirmedCollections++;\\n        \\n        // Award bonus points to both cleaner and house for confirmed collection\\n        awardPoints(collectionEvent.cleaner, 10, \\\"Confirmed Collection Bonus\\\");\\n        awardPoints(msg.sender, 15, \\\"Collection Validation\\\");\\n        \\n        // Increase cleaner's reputation for confirmed work\\n        cleaners[collectionEvent.cleaner].reputation += 5;\\n\\n        emit CollectionEventConfirmed(_eventId, msg.sender);\\n    }\\n\\n    /**\\n     * Get collection event details by ID\\n     * @param _eventId ID of the collection event\\n     * @return CollectionEvent struct containing event details\\n     */\\n    function getCollectionEvent(uint256 _eventId) external view returns (CollectionEvent memory) {\\n        require(_eventId < totalCollectionEvents, \\\"Invalid event ID\\\");\\n        return collectionEvents[_eventId];\\n    }\\n\\n    /**\\n     * Get collection events for a house with pagination to avoid gas issues\\n     * @param _houseAddress Address of the house\\n     * @param _offset Starting index for pagination\\n     * @param _limit Maximum number of events to return\\n     * @return Array of event IDs for the house\\n     * @return Total count of events for this house\\n     */\\n    function getHouseCollectionEventsPaginated(\\n        address _houseAddress, \\n        uint256 _offset, \\n        uint256 _limit\\n    ) external view returns (uint256[] memory, uint256) {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        require(_limit > 0 && _limit <= 100, \\\"Invalid limit: must be between 1 and 100\\\");\\n        \\n        // Count total events first\\n        uint256 totalCount = 0;\\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].house == _houseAddress) {\\n                totalCount++;\\n            }\\n        }\\n        \\n        if (_offset >= totalCount) {\\n            return (new uint256[](0), totalCount);\\n        }\\n        \\n        uint256 resultSize = _limit;\\n        if (_offset + _limit > totalCount) {\\n            resultSize = totalCount - _offset;\\n        }\\n        \\n        uint256[] memory eventIds = new uint256[](resultSize);\\n        uint256 currentIndex = 0;\\n        uint256 matchedCount = 0;\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents && currentIndex < resultSize; i++) {\\n            if (collectionEvents[i].house == _houseAddress) {\\n                if (matchedCount >= _offset) {\\n                    eventIds[currentIndex] = i;\\n                    currentIndex++;\\n                }\\n                matchedCount++;\\n            }\\n        }\\n        \\n        return (eventIds, totalCount);\\n    }\\n\\n    /**\\n     * Get collection events for a cleaner with pagination to avoid gas issues\\n     * @param _cleanerAddress Address of the cleaner\\n     * @param _offset Starting index for pagination\\n     * @param _limit Maximum number of events to return\\n     * @return Array of event IDs for the cleaner\\n     * @return Total count of events for this cleaner\\n     */\\n    function getCleanerCollectionEventsPaginated(\\n        address _cleanerAddress, \\n        uint256 _offset, \\n        uint256 _limit\\n    ) external view returns (uint256[] memory, uint256) {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        require(_limit > 0 && _limit <= 100, \\\"Invalid limit: must be between 1 and 100\\\");\\n        \\n        // Count total events first\\n        uint256 totalCount = 0;\\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].cleaner == _cleanerAddress) {\\n                totalCount++;\\n            }\\n        }\\n        \\n        if (_offset >= totalCount) {\\n            return (new uint256[](0), totalCount);\\n        }\\n        \\n        uint256 resultSize = _limit;\\n        if (_offset + _limit > totalCount) {\\n            resultSize = totalCount - _offset;\\n        }\\n        \\n        uint256[] memory eventIds = new uint256[](resultSize);\\n        uint256 currentIndex = 0;\\n        uint256 matchedCount = 0;\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents && currentIndex < resultSize; i++) {\\n            if (collectionEvents[i].cleaner == _cleanerAddress) {\\n                if (matchedCount >= _offset) {\\n                    eventIds[currentIndex] = i;\\n                    currentIndex++;\\n                }\\n                matchedCount++;\\n            }\\n        }\\n        \\n        return (eventIds, totalCount);\\n    }\\n\\n    /**\\n     * Get collection statistics for a house\\n     * @param _houseAddress Address of the house\\n     * @return totalEvents Total collection events for the house\\n     * @return confirmedEvents Number of confirmed collection events\\n     * @return pendingEvents Number of pending (unconfirmed) collection events\\n     */\\n    function getHouseCollectionStats(address _houseAddress) \\n        external \\n        view \\n        returns (uint256 totalEvents, uint256 confirmedEvents, uint256 pendingEvents) \\n    {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].house == _houseAddress) {\\n                totalEvents++;\\n                if (collectionEvents[i].confirmedByHouse) {\\n                    confirmedEvents++;\\n                } else {\\n                    pendingEvents++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get collection statistics for a cleaner\\n     * @param _cleanerAddress Address of the cleaner\\n     * @return totalEvents Total collection events by the cleaner\\n     * @return confirmedEvents Number of confirmed collection events\\n     * @return confirmationRate Percentage of confirmed collections (0-100)\\n     */\\n    function getCleanerCollectionStats(address _cleanerAddress) \\n        external \\n        view \\n        returns (uint256 totalEvents, uint256 confirmedEvents, uint256 confirmationRate) \\n    {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].cleaner == _cleanerAddress) {\\n                totalEvents++;\\n                if (collectionEvents[i].confirmedByHouse) {\\n                    confirmedEvents++;\\n                }\\n            }\\n        }\\n        \\n        if (totalEvents > 0) {\\n            confirmationRate = (confirmedEvents * 100) / totalEvents;\\n        }\\n    }\\n\\n    // Neighborhood Query Functions\\n    /**\\n     * Get neighborhood information\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Neighborhood struct containing all neighborhood information\\n     */\\n    function getNeighborhood(string memory _neighborhood) external view returns (Neighborhood memory) {\\n        require(bytes(neighborhoods[_neighborhood].name).length > 0, \\\"Neighborhood doesn't exist\\\");\\n        return neighborhoods[_neighborhood];\\n    }\\n\\n    /**\\n     * Get all registered neighborhoods\\n     * @return Array of neighborhood names\\n     */\\n    function getAllNeighborhoods() external view returns (string[] memory) {\\n        return registeredNeighborhoods;\\n    }\\n\\n    /**\\n     * Get neighborhoods assigned to a cleaner\\n     * @param _cleanerAddress Address of the cleaner\\n     * @return Array of neighborhood names where cleaner is authorized\\n     */\\n    function getCleanerNeighborhoods(address _cleanerAddress) external view returns (string[] memory) {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        return cleaners[_cleanerAddress].assignedNeighborhoods;\\n    }\\n\\n    /**\\n     * Check if cleaner is authorized in neighborhood\\n     * @param _cleaner Address of the cleaner\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Boolean indicating if cleaner is authorized\\n     */\\n    function isCleanerAuthorized(address _cleaner, string memory _neighborhood) external view returns (bool) {\\n        return cleanerNeighborhoodAccess[_neighborhood][_cleaner] || \\n               neighborhoods[_neighborhood].admin == _cleaner ||\\n               _cleaner == owner;\\n    }\\n\\n    /**\\n     * Check if address is a neighborhood admin\\n     * @param _address Address to check\\n     * @return Boolean indicating if address is a neighborhood admin\\n     */\\n    function isNeighborhoodAdmin(address _address) external view returns (bool) {\\n        return neighborhoodAdmins[_address] || _address == owner;\\n    }\\n\\n    /**\\n     * Get neighborhood statistics\\n     * @param _neighborhood Name of the neighborhood\\n     * @return totalHouses Number of houses in neighborhood\\n     * @return totalCleaners Number of cleaners assigned to neighborhood\\n     * @return totalCollections Total collection events in neighborhood\\n     * @return confirmedCollections Number of confirmed collections\\n     * @return confirmationRate Percentage of confirmed collections (0-100)\\n     */\\n    function getNeighborhoodStats(string memory _neighborhood) \\n        external \\n        view \\n        returns (\\n            uint256 totalHouses,\\n            uint256 totalCleaners,\\n            uint256 totalCollections,\\n            uint256 confirmedCollections,\\n            uint256 confirmationRate\\n        ) \\n    {\\n        require(bytes(neighborhoods[_neighborhood].name).length > 0, \\\"Neighborhood doesn't exist\\\");\\n        \\n        Neighborhood memory neighborhood = neighborhoods[_neighborhood];\\n        totalHouses = neighborhood.totalHouses;\\n        totalCleaners = neighborhood.totalCleaners;\\n        totalCollections = neighborhood.totalCollections;\\n        confirmedCollections = neighborhood.confirmedCollections;\\n        \\n        if (totalCollections > 0) {\\n            confirmationRate = (confirmedCollections * 100) / totalCollections;\\n        }\\n    }\\n\\n    // Utility Functions\\n    /**\\n     * Award points to a user and emit event\\n     * @param _recipient Address to receive points\\n     * @param _points Number of points to award\\n     * @param _reason Reason for awarding points\\n     */\\n    function awardPoints(address _recipient, uint256 _points, string memory _reason) internal {\\n        if (houses[_recipient].isRegistered) {\\n            houses[_recipient].points += _points;\\n        } else if (cleaners[_recipient].isRegistered) {\\n            cleaners[_recipient].points += _points;\\n        }\\n        \\n        emit PointsAwarded(_recipient, _points, _reason);\\n    }\\n\\n    // View Functions\\n    /**\\n     * Get house information by address\\n     * @param _houseAddress Address of the house\\n     * @return House struct containing all house information\\n     */\\n    function getHouse(address _houseAddress) external view returns (House memory) {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        return houses[_houseAddress];\\n    }\\n\\n    /**\\n     * Get cleaner information by address\\n     * @param _cleanerAddress Address of the cleaner\\n     * @return Cleaner struct containing all cleaner information\\n     */\\n    function getCleaner(address _cleanerAddress) external view returns (Cleaner memory) {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        return cleaners[_cleanerAddress];\\n    }\\n\\n    /**\\n     * Get all houses in a neighborhood\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Array of house addresses in the neighborhood\\n     */\\n    function getHousesInNeighborhood(string memory _neighborhood) external view returns (address[] memory) {\\n        return neighborhoodHouses[_neighborhood];\\n    }\\n\\n    /**\\n     * Get all cleaners in a neighborhood\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Array of cleaner addresses in the neighborhood\\n     */\\n    function getCleanersInNeighborhood(string memory _neighborhood) external view returns (address[] memory) {\\n        return neighborhoodCleaners[_neighborhood];\\n    }\\n\\n    /**\\n     * Get total number of registered houses\\n     * @return Total number of houses\\n     */\\n    function getTotalHouses() external view returns (uint256) {\\n        return totalHouses;\\n    }\\n\\n    /**\\n     * Get total number of registered cleaners\\n     * @return Total number of cleaners\\n     */\\n    function getTotalCleaners() external view returns (uint256) {\\n    \\n        return totalCleaners;\\n    }\\n\\n    /**\\n     * Check if an address is a registered house\\n     * @param _address Address to check\\n     * @return Boolean indicating if address is a registered house\\n     */\\n    function isRegisteredHouse(address _address) external view returns (bool) {\\n        return houses[_address].isRegistered;\\n    }\\n\\n    /**\\n     * Check if an address is a registered cleaner\\n     * @param _address Address to check\\n     * @return Boolean indicating if address is a registered cleaner\\n     */\\n    function isRegisteredCleaner(address _address) external view returns (bool) {\\n        return cleaners[_address].isRegistered;\\n    }\\n\\n    /**\\n     * Get all registered house addresses\\n     * @return Array of all registered house addresses\\n     */\\n    function getAllRegisteredHouses() external view returns (address[] memory) {\\n        return registeredHouses;\\n    }\\n\\n    /**\\n     * Get all registered cleaner addresses\\n     * @return Array of all registered cleaner addresses\\n     */\\n    function getAllRegisteredCleaners() external view returns (address[] memory) {\\n        return registeredCleaners;\\n    }\\n\\n    // Owner Functions\\n    /**\\n     * Update house points (only owner)\\n     * @param _houseAddress Address of the house\\n     * @param _points New points value\\n     */\\n    function updateHousePoints(address _houseAddress, uint256 _points) external isOwner {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        houses[_houseAddress].points = _points;\\n    }\\n\\n    /**\\n     * Update cleaner reputation (only owner)\\n     * @param _cleanerAddress Address of the cleaner\\n     * @param _reputation New reputation value\\n     */\\n    function updateCleanerReputation(address _cleanerAddress, uint256 _reputation) external isOwner {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        cleaners[_cleanerAddress].reputation = _reputation;\\n    }\\n\\n    // Administrative Functions\\n    /**\\n     * Pause or unpause the contract (emergency function)\\n     * @param _paused New pause state\\n     */\\n    function pauseContract(bool _paused) external isOwner {\\n        contractPaused = _paused;\\n        emit ContractPaused(_paused);\\n    }\\n\\n    /**\\n     * Batch assign multiple cleaners to a neighborhood\\n     * @param _cleaners Array of cleaner addresses\\n     * @param _neighborhood Name of the neighborhood\\n     */\\n    function batchAssignCleanersToNeighborhood(\\n        address[] memory _cleaners,\\n        string memory _neighborhood\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(_cleaners.length > 0, \\\"No cleaners provided\\\");\\n        require(neighborhoods[_neighborhood].isActive, \\\"Neighborhood not active\\\");\\n        \\n        for (uint256 i = 0; i < _cleaners.length; i++) {\\n            address cleaner = _cleaners[i];\\n            if (cleaners[cleaner].isRegistered && !cleanerNeighborhoodAccess[_neighborhood][cleaner]) {\\n                cleanerNeighborhoodAccess[_neighborhood][cleaner] = true;\\n                cleaners[cleaner].assignedNeighborhoods.push(_neighborhood);\\n                neighborhoodCleaners[_neighborhood].push(cleaner); // FIXED: Add to neighborhood cleaners array\\n                neighborhoods[_neighborhood].totalCleaners++;\\n                \\n                emit CleanerAssignedToNeighborhood(cleaner, _neighborhood);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Batch remove multiple cleaners from a neighborhood\\n     * @param _cleaners Array of cleaner addresses\\n     * @param _neighborhood Name of the neighborhood\\n     */\\n    function batchRemoveCleanersFromNeighborhood(\\n        address[] memory _cleaners,\\n        string memory _neighborhood\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(_cleaners.length > 0, \\\"No cleaners provided\\\");\\n        \\n        for (uint256 i = 0; i < _cleaners.length; i++) {\\n            address cleaner = _cleaners[i];\\n            if (cleanerNeighborhoodAccess[_neighborhood][cleaner]) {\\n                cleanerNeighborhoodAccess[_neighborhood][cleaner] = false;\\n                \\n                // Remove from cleaner's assigned neighborhoods array\\n                string[] storage assigned = cleaners[cleaner].assignedNeighborhoods;\\n                for (uint256 j = 0; j < assigned.length; j++) {\\n                    if (keccak256(abi.encodePacked(assigned[j])) == keccak256(abi.encodePacked(_neighborhood))) {\\n                        assigned[j] = assigned[assigned.length - 1];\\n                        assigned.pop();\\n                        break;\\n                    }\\n                }\\n                \\n                // FIXED: Remove from neighborhood cleaners array\\n                address[] storage neighborhoodCleanersList = neighborhoodCleaners[_neighborhood];\\n                for (uint256 k = 0; k < neighborhoodCleanersList.length; k++) {\\n                    if (neighborhoodCleanersList[k] == cleaner) {\\n                        neighborhoodCleanersList[k] = neighborhoodCleanersList[neighborhoodCleanersList.length - 1];\\n                        neighborhoodCleanersList.pop();\\n                        break;\\n                    }\\n                }\\n                \\n                neighborhoods[_neighborhood].totalCleaners--;\\n                emit CleanerRemovedFromNeighborhood(cleaner, _neighborhood);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get contract pause status\\n     * @return Boolean indicating if contract is paused\\n     */\\n    function isPaused() external view returns (bool) {\\n        return contractPaused;\\n    }\\n\\n    /**\\n     * Get total number of registered neighborhoods\\n     * @return Total number of neighborhoods\\n     */\\n    function getTotalNeighborhoods() external view returns (uint256) {\\n        return registeredNeighborhoods.length;\\n    }\\n\\n    /**\\n     * Function that allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * FIXED: Validate that a neighborhood exists before operations\\n     * @param _neighborhood Name of the neighborhood to check\\n     * @return Boolean indicating if neighborhood exists and is active\\n     */\\n    function validateNeighborhoodExists(string memory _neighborhood) external view returns (bool) {\\n        return bytes(neighborhoods[_neighborhood].name).length > 0 && neighborhoods[_neighborhood].isActive;\\n    }\\n\\n    /**\\n     * FIXED: Check for duplicate cleaner assignment more efficiently\\n     * @param _cleaner Address of the cleaner\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Boolean indicating if cleaner is already assigned\\n     */\\n    function isCleanerAlreadyAssigned(address _cleaner, string memory _neighborhood) external view returns (bool) {\\n        return cleanerNeighborhoodAccess[_neighborhood][_cleaner];\\n    }\\n\\n    /**\\n     * Get all collection events for a specific house (DEPRECATED - use paginated version)\\n     * @param _houseAddress Address of the house\\n     * @return Array of event IDs for the house\\n     * @dev This function may run out of gas with large datasets. Use getHouseCollectionEventsPaginated instead.\\n     */\\n    function getHouseCollectionEvents(address _houseAddress) external view returns (uint256[] memory) {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        \\n        uint256[] memory eventIds = new uint256[](totalCollectionEvents);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].house == _houseAddress) {\\n                eventIds[count] = i;\\n                count++;\\n            }\\n        }\\n        \\n        // Create properly sized array\\n        uint256[] memory result = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            result[i] = eventIds[i];\\n        }\\n        \\n        return result;\\n    }\\n\\n    /**\\n     * Get all collection events for a specific cleaner (DEPRECATED - use paginated version)\\n     * @param _cleanerAddress Address of the cleaner\\n     * @return Array of event IDs for the cleaner\\n     * @dev This function may run out of gas with large datasets. Use getCleanerCollectionEventsPaginated instead.\\n     */\\n    function getCleanerCollectionEvents(address _cleanerAddress) external view returns (uint256[] memory) {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        \\n        uint256[] memory eventIds = new uint256[](totalCollectionEvents);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].cleaner == _cleanerAddress) {\\n                eventIds[count] = i;\\n                count++;\\n            }\\n        }\\n        \\n        // Create properly sized array\\n        uint256[] memory result = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            result[i] = eventIds[i];\\n        }\\n        \\n        return result;\\n    }\\n} \",\"keccak256\":\"0x9d909e4881f1a8620db5a4f14e34d49882846fe7583fbaaec81fb901d191a052\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000808055600181905560028190556003556010805460ff191690553480156200002d57600080fd5b506040516200611f3803806200611f833981016040819052620000509162000062565b6001600160a01b031660805262000094565b6000602082840312156200007557600080fd5b81516001600160a01b03811681146200008d57600080fd5b9392505050565b60805161601b62000104600039600081816107b301528181610bcf01528181610e390152818161286d015281816128c201528181612d1e0152818161314e0152818161343d015281816134e001528181613a6d01528181614303015281816149710152614bfa015261601b6000f3fe6080604052600436106102a05760003560e01c806302faee03146102ac57806303d2e592146102ce5780630cf8e30f146102ee5780630d330bb31461031757806311ac4e621461035f578063162d8afb1461037f5780631ea28fb91461039557806323713bc4146103cd57806324e84b871461045c57806337e72c001461047c578063392cf2bd146104915780633991737a146104b157806339d95f9f146104de5780633f4130c3146104f357806358ca06241461053f5780635a17f3eb1461055f578063626a122e1461057f5780636754e0f1146105ba5780636de52069146105ed57806371f3eeb91461060d57806374de423a1461062f5780637688b1f41461065c57806378c71b72146106725780637abb3d1b1461069f5780637e69e912146106d1578063862b87af146107055780638a67456a1461073a5780638d7a950c146107545780638d8feb0a146107815780638da5cb5b146107a15780638ff0e3fb146107d557806392335abd146107f55780639a3e6c00146108255780639be22613146108455780639e34229614610890578063a193ee59146108b0578063a5a823c3146108d0578063a886b398146108f0578063ac1996ab14610906578063aeb0983e14610926578063afc22def14610946578063b0851bbc14610966578063b187bd2614610988578063b1a4b9a0146109a0578063b5aa410d146109c0578063c115b8e9146109ed578063c44d630714610a1b578063c6166e9914610a30578063c9e7946d14610a45578063d90f644814610a72578063e0e1c82e14610a92578063e272b89214610ace578063e596705414610aee578063ee310f0f14610b03578063ee407d5714610b23578063f29cda4c14610b43578063f4df7e7114610b63578063f62198d414610b83578063fcf1144814610ba357600080fd5b366102a757005b600080fd5b3480156102b857600080fd5b506102cc6102c7366004614fe9565b610bc3565b005b3480156102da57600080fd5b506102cc6102e936600461504d565b610d66565b3480156102fa57600080fd5b5061030460015481565b6040519081526020015b60405180910390f35b34801561032357600080fd5b50610337610332366004615091565b61109f565b604080519586526020860194909452928401919091526060830152608082015260a00161030e565b34801561036b57600080fd5b506102cc61037a3660046150cd565b6112e7565b34801561038b57600080fd5b5061030460005481565b3480156103a157600080fd5b506103b56103b036600461511c565b611649565b6040516001600160a01b03909116815260200161030e565b3480156103d957600080fd5b506104286103e8366004615135565b6005602081905260009182526040909120805460018201546002830154600484015493909401546001600160a01b03909216939092909160ff9091169085565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a00161030e565b34801561046857600080fd5b506103b5610477366004615150565b611673565b34801561048857600080fd5b50600f54610304565b34801561049d57600080fd5b506103b56104ac366004615150565b6116ba565b3480156104bd57600080fd5b506104d16104cc366004615135565b6116e5565b60405161030e919061521f565b3480156104ea57600080fd5b50600054610304565b3480156104ff57600080fd5b5061052f61050e366004615135565b6001600160a01b031660009081526005602052604090206004015460ff1690565b604051901515815260200161030e565b34801561054b57600080fd5b5061052f61055a366004615091565b6118be565b34801561056b57600080fd5b506102cc61057a3660046152a5565b61192a565b34801561058b57600080fd5b5061059f61059a366004615135565b611c92565b6040805193845260208401929092529082015260600161030e565b3480156105c657600080fd5b506105da6105d536600461511c565b611d65565b60405161030e97969594939291906152fc565b3480156105f957600080fd5b5061052f61060836600461534c565b611e3b565b34801561061957600080fd5b50610622611e7d565b60405161030e9190615399565b34801561063b57600080fd5b5061064f61064a36600461511c565b611edf565b60405161030e91906153e6565b34801561066857600080fd5b5061030460025481565b34801561067e57600080fd5b5061069261068d366004615135565b612034565b60405161030e9190615459565b3480156106ab57600080fd5b506106bf6106ba366004615135565b6121ce565b60405161030e9695949392919061546c565b3480156106dd57600080fd5b506106f16106ec36600461511c565b61229c565b60405161030e9897969594939291906154b4565b34801561071157600080fd5b50610725610720366004615091565b612485565b60405161030e9998979695949392919061552c565b34801561074657600080fd5b5060105461052f9060ff1681565b34801561076057600080fd5b5061077461076f366004615091565b6125f8565b60405161030e9190615596565b34801561078d57600080fd5b5061052f61079c366004615135565b612849565b3480156107ad57600080fd5b506103b57f000000000000000000000000000000000000000000000000000000000000000081565b3480156107e157600080fd5b506103b56107f036600461511c565b6128a6565b34801561080157600080fd5b5061052f610810366004615135565b600b6020526000908152604090205460ff1681565b34801561083157600080fd5b506102cc61084036600461563e565b6128b6565b34801561085157600080fd5b5061052f61086036600461504d565b8151602081840181018051600c825292820194820194909420919093529091526000908152604090205460ff1681565b34801561089c57600080fd5b506102cc6108ab36600461534c565b612d12565b3480156108bc57600080fd5b506106226108cb366004615091565b612feb565b3480156108dc57600080fd5b5061059f6108eb366004615135565b613065565b3480156108fc57600080fd5b5061030460035481565b34801561091257600080fd5b506102cc61092136600461563e565b613142565b34801561093257600080fd5b506102cc610941366004615702565b613432565b34801561095257600080fd5b506102cc61096136600461534c565b6134d4565b34801561097257600080fd5b5061097b613914565b60405161030e9190615781565b34801561099457600080fd5b5060105460ff1661052f565b3480156109ac57600080fd5b5061052f6109bb36600461534c565b6139ed565b3480156109cc57600080fd5b506109e06109db36600461511c565b613aa8565b60405161030e9190615794565b3480156109f957600080fd5b50610a0d610a083660046157a7565b613b54565b60405161030e9291906157da565b348015610a2757600080fd5b506102cc613d5a565b348015610a3c57600080fd5b50610622613f4e565b348015610a5157600080fd5b50610a65610a60366004615135565b613fae565b60405161030e91906157fc565b348015610a7e57600080fd5b5061097b610a8d366004615135565b6141cd565b348015610a9e57600080fd5b5061052f610aad366004615135565b6001600160a01b031660009081526004602052604090206005015460ff1690565b348015610ada57600080fd5b506102cc610ae936600461587b565b6142f8565b348015610afa57600080fd5b50600154610304565b348015610b0f57600080fd5b50610622610b1e366004615091565b614387565b348015610b2f57600080fd5b50610692610b3e366004615135565b614399565b348015610b4f57600080fd5b50610a0d610b5e3660046157a7565b614527565b348015610b6f57600080fd5b506102cc610b7e366004615896565b6146e5565b348015610b8f57600080fd5b506102cc610b9e366004615702565b614966565b348015610baf57600080fd5b506102cc610bbe366004615909565b614a08565b81336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610c485750336001600160a01b0316600a82604051610c109190615949565b908152604051908190036020019020600201546001600160a01b0316148015610c485750336000908152600b602052604090205460ff165b610c6d5760405162461bcd60e51b8152600401610c6490615965565b60405180910390fd5b60105460ff1615610c905760405162461bcd60e51b8152600401610c64906159a6565b6000600a84604051610ca29190615949565b9081526040519081900360200190208054610cbc906159d2565b905011610cdb5760405162461bcd60e51b8152600401610c6490615a0c565b81600a84604051610cec9190615949565b9081526040519081900360200181206002018054921515600160a01b0260ff60a01b1990931692909217909155610d24908490615949565b6040519081900381208315158252907f206b0ef45ee559966396a67ce838e4973922ecef89d3cb4a5e1208a30591e872906020015b60405180910390a2505050565b60105460ff1615610d895760405162461bcd60e51b8152600401610c64906159a6565b600a82604051610d999190615949565b9081526040519081900360200190206002015460ff600160a01b90910416610dd35760405162461bcd60e51b8152600401610c6490615a0c565b6001600160a01b038116610df95760405162461bcd60e51b8152600401610c6490615a40565b6000600a83604051610e0b9190615949565b908152604051908190036020019020600201546001600160a01b03908116915082168114801590610e6e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b15611005576000805b600f54811015610fdc576000600f8281548110610e9657610e96615a6f565b906000526020600020018054610eab906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed7906159d2565b8015610f245780601f10610ef957610100808354040283529160200191610f24565b820191906000526020600020905b815481529060010190602001808311610f0757829003601f168201915b5050505050905085604051602001610f3c9190615949565b6040516020818303038152906040528051906020012081604051602001610f639190615949565b6040516020818303038152906040528051906020012014158015610fba5750836001600160a01b0316600a82604051610f9c9190615949565b908152604051908190036020019020600201546001600160a01b0316145b15610fc9576001925050610fdc565b5080610fd481615a9b565b915050610e77565b5080611003576001600160a01b0382166000908152600b60205260409020805460ff191690555b505b81600a846040516110169190615949565b908152604080516020928190038301812060020180546001600160a01b0319166001600160a01b039586161790559285166000818152600b9093529120805460ff191660011790559061106a908590615949565b604051908190038120907f7d05a11f2bb7293af5865673c472e0c3cd8766de0b14611207abb8458c63ed5690600090a3505050565b600080600080600080600a876040516110b89190615949565b90815260405190819003602001902080546110d2906159d2565b9050116110f15760405162461bcd60e51b8152600401610c6490615a0c565b6000600a876040516111039190615949565b90815260200160405180910390206040518061012001604052908160008201805461112d906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611159906159d2565b80156111a65780601f1061117b576101008083540402835291602001916111a6565b820191906000526020600020905b81548152906001019060200180831161118957829003601f168201915b505050505081526020016001820180546111bf906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546111eb906159d2565b80156112385780601f1061120d57610100808354040283529160200191611238565b820191906000526020600020905b81548152906001019060200180831161121b57829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff16151560408201526003820154606082015260048201546080820152600582015460a080830191909152600683015460c08084019190915260079093015460e092830152830151918301519083015161010084015192995090975095509350905083156112dd57836112d0846064615ab4565b6112da9190615acb565b91505b5091939590929450565b3360009081526004602052604090206005015460ff166113195760405162461bcd60e51b8152600401610c6490615aed565b60105460ff161561133c5760405162461bcd60e51b8152600401610c64906159a6565b600254831061135d5760405162461bcd60e51b8152600401610c6490615b1b565b8161137a5760405162461bcd60e51b8152600401610c6490615b45565b600081511161139b5760405162461bcd60e51b8152600401610c6490615b79565b600083815260066020526040902060018101546001600160a01b031633146114115760405162461bcd60e51b8152602060048201526024808201527f4e6f7420617574686f72697a656420746f20636f6e6669726d207468697320656044820152631d995b9d60e21b6064820152608401610c64565b600581015460ff16156114605760405162461bcd60e51b8152602060048201526017602482015276115d995b9d08185b1c9958591e4818dbdb999a5c9b5959604a1b6044820152606401610c64565b60058101805460ff1916600190811790915533600081815260046020818152604083209182018054958601815583528220909301869055908152600290910180546114aa906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546114d6906159d2565b80156115235780601f106114f857610100808354040283529160200191611523565b820191906000526020600020905b81548152906001019060200180831161150657829003601f168201915b50505050509050600a8160405161153a9190615949565b908152604051908190036020019020600701805490600061155a83615a9b565b9091555050815460408051808201909152601a815279436f6e6669726d656420436f6c6c656374696f6e20426f6e757360301b60208201526115a8916001600160a01b031690600a90614ddf565b6115e133600f6040518060400160405280601581526020017421b7b63632b1ba34b7b7102b30b634b230ba34b7b760591b815250614ddf565b81546001600160a01b031660009081526005602081905260408220600201805491929091611610908490615bac565b9091555050604051339086907f52db567cccdb9bec024e70ad7970b0800b7a0b38d81cbc3d2ab5132f85dfc46190600090a35050505050565b600e818154811061165957600080fd5b6000918252602090912001546001600160a01b0316905081565b8151602081840181018051600982529282019185019190912091905280548290811061169e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b8151602081840181018051600882529282019185019190912091905280548290811061169e57600080fd5b6117336040518060e0016040528060006001600160a01b031681526020016000815260200160608152602001600060ff16815260200160608152602001600015158152602001600081525090565b6001600160a01b03821660009081526004602052604090206005015460ff1661176e5760405162461bcd60e51b8152600401610c6490615aed565b6001600160a01b03808316600090815260046020908152604091829020825160e0810184528154909416845260018101549184019190915260028101805491928401916117ba906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546117e6906159d2565b80156118335780601f1061180857610100808354040283529160200191611833565b820191906000526020600020905b81548152906001019060200180831161181657829003601f168201915b5050509183525050600382015460ff16602080830191909152600483018054604080518285028101850182528281529401939283018282801561189557602002820191906000526020600020905b815481526020019060010190808311611881575b5050509183525050600582015460ff161515602082015260069091015460409091015292915050565b600080600a836040516118d19190615949565b90815260405190819003602001902080546118eb906159d2565b90501180156119245750600a826040516119059190615949565b9081526040519081900360200190206002015460ff600160a01b909104165b92915050565b81600081511161197b5760405162461bcd60e51b815260206004820152601c60248201527b4e65696768626f72686f6f642063616e6e6f7420626520656d70747960201b6044820152606401610c64565b600a8160405161198b9190615949565b9081526040519081900360200190206002015460ff600160a01b90910416611a065760405162461bcd60e51b815260206004820152602860248201527f4e65696768626f72686f6f64206e6f7420616374697665206f7220646f65736e60448201526709dd08195e1a5cdd60c21b6064820152608401610c64565b8160008160ff16118015611a1e575060148160ff1611155b611a685760405162461bcd60e51b815260206004820152601b60248201527a496e76616c6964206e756d626572206f66207265736964656e747360281b6044820152606401610c64565b60105460ff1615611a8b5760405162461bcd60e51b8152600401610c64906159a6565b3360009081526004602052604090206005015460ff1615611ae95760405162461bcd60e51b8152602060048201526018602482015277121bdd5cd948185b1c9958591e481c9959da5cdd195c995960421b6044820152606401610c64565b33600081815260046020526040812080546001600160a01b0319169092178255600182015560028101611b1c8682615c23565b5060038101805460ff861660ff19918216179091556005820180549091166001908117909155426006830155600d805491820181556000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b03191633179055604051600890611b97908790615949565b9081526040519081900360209081018220805460018101825560009182529190200180546001600160a01b03191633179055600a90611bd7908790615949565b9081526040519081900360200190206004018054906000611bf783615a9b565b9091555050600080549080611c0b83615a9b565b9190505550611c4633600a604051806040016040528060128152602001712437bab9b2902932b3b4b9ba3930ba34b7b760711b815250614ddf565b336001600160a01b03167fd58b85d97fd9a25d767f432e493b06cb5dbeb58f40b042f24b2f6bc23b546cc9868642604051611c8393929190615cdc565b60405180910390a25050505050565b6001600160a01b0381166000908152600460205260408120600501548190819060ff16611cd15760405162461bcd60e51b8152600401610c6490615aed565b60005b600254811015611d5d576000818152600660205260409020600101546001600160a01b03808716911603611d4b5783611d0c81615a9b565b60008381526006602052604090206005015490955060ff16159050611d3d5782611d3581615a9b565b935050611d4b565b81611d4781615a9b565b9250505b80611d5581615a9b565b915050611cd4565b509193909250565b600660205260009081526040902080546001820154600283015460038401546004850180546001600160a01b0395861696949095169492939192611da8906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611dd4906159d2565b8015611e215780601f10611df657610100808354040283529160200191611e21565b820191906000526020600020905b815481529060010190602001808311611e0457829003601f168201915b505050506005830154600690930154919260ff1691905087565b6000600c82604051611e4d9190615949565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff16905092915050565b6060600d805480602002602001604051908101604052809291908181526020018280548015611ed557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611eb7575b5050505050905090565b6040805160e0810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c08101919091526002548210611f385760405162461bcd60e51b8152600401610c6490615b1b565b600082815260066020908152604091829020825160e08101845281546001600160a01b0390811682526001830154169281019290925260028101549282019290925260038201546060820152600482018054919291608084019190611f9c906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc8906159d2565b80156118955780601f10611fea57610100808354040283529160200191611895565b820191906000526020600020905b815481529060010190602001808311611ff8575050509183525050600582015460ff161515602082015260069091015460409091015292915050565b6001600160a01b03811660009081526004602052604090206005015460609060ff166120725760405162461bcd60e51b8152600401610c6490615aed565b60006002546001600160401b0381111561208e5761208e614f1f565b6040519080825280602002602001820160405280156120b7578160200160208202803683370190505b5090506000805b60025481101561212a576000818152600660205260409020600101546001600160a01b0380871691160361211857808383815181106120ff576120ff615a6f565b60209081029190910101528161211481615a9b565b9250505b8061212281615a9b565b9150506120be565b506000816001600160401b0381111561214557612145614f1f565b60405190808252806020026020018201604052801561216e578160200160208202803683370190505b50905060005b828110156121c55783818151811061218e5761218e615a6f565b60200260200101518282815181106121a8576121a8615a6f565b6020908102919091010152806121bd81615a9b565b915050612174565b50949350505050565b6004602052600090815260409020805460018201546002830180546001600160a01b03909316939192612200906159d2565b80601f016020809104026020016040519081016040528092919081815260200182805461222c906159d2565b80156122795780601f1061224e57610100808354040283529160200191612279565b820191906000526020600020905b81548152906001019060200180831161225c57829003601f168201915b5050505060038301546005840154600690940154929360ff918216939116915086565b6007602052600090815260409020805460018201546002830180546001600160a01b039093169391926122ce906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546122fa906159d2565b80156123475780601f1061231c57610100808354040283529160200191612347565b820191906000526020600020905b81548152906001019060200180831161232a57829003601f168201915b50505050509080600301805461235c906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612388906159d2565b80156123d55780601f106123aa576101008083540402835291602001916123d5565b820191906000526020600020905b8154815290600101906020018083116123b857829003601f168201915b5050505050908060040180546123ea906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612416906159d2565b80156124635780601f1061243857610100808354040283529160200191612463565b820191906000526020600020905b81548152906001019060200180831161244657829003601f168201915b5050505060068301546007840154600890940154929360ff9091169290915088565b8051602081830181018051600a825292820191909301209152805481906124ab906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546124d7906159d2565b80156125245780601f106124f957610100808354040283529160200191612524565b820191906000526020600020905b81548152906001019060200180831161250757829003601f168201915b505050505090806001018054612539906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612565906159d2565b80156125b25780601f10612587576101008083540402835291602001916125b2565b820191906000526020600020905b81548152906001019060200180831161259557829003601f168201915b505050506002830154600384015460048501546005860154600687015460079097015495966001600160a01b03851696600160a01b90950460ff16955092939192909189565b612652604051806101200160405280606081526020016060815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000600a836040516126649190615949565b908152604051908190036020019020805461267e906159d2565b90501161269d5760405162461bcd60e51b8152600401610c6490615a0c565b600a826040516126ad9190615949565b9081526020016040518091039020604051806101200160405290816000820180546126d7906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612703906159d2565b80156127505780601f1061272557610100808354040283529160200191612750565b820191906000526020600020905b81548152906001019060200180831161273357829003601f168201915b50505050508152602001600182018054612769906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612795906159d2565b80156127e25780601f106127b7576101008083540402835291602001916127e2565b820191906000526020600020905b8154815290600101906020018083116127c557829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff16151560408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e09091015292915050565b6001600160a01b0381166000908152600b602052604081205460ff168061192457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161492915050565b600d818154811061165957600080fd5b80336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061293b5750336001600160a01b0316600a826040516129039190615949565b908152604051908190036020019020600201546001600160a01b031614801561293b5750336000908152600b602052604090205460ff165b6129575760405162461bcd60e51b8152600401610c6490615965565b60105460ff161561297a5760405162461bcd60e51b8152600401610c64906159a6565b600083511161299b5760405162461bcd60e51b8152600401610c6490615d04565b60005b8351811015612d0c5760008482815181106129bb576129bb615a6f565b60200260200101519050600c846040516129d59190615949565b90815260408051602092819003830190206001600160a01b0384166000908152925290205460ff1615612cf9576000600c85604051612a149190615949565b90815260408051602092819003830190206001600160a01b0385166000908152908352818120805460ff19169415159490941790935560059091528120600601905b8154811015612b655785604051602001612a709190615949565b60405160208183030381529060405280519060200120828281548110612a9857612a98615a6f565b90600052602060002001604051602001612ab29190615d32565b6040516020818303038152906040528051906020012003612b535781548290612add90600190615da8565b81548110612aed57612aed615a6f565b90600052602060002001828281548110612b0957612b09615a6f565b906000526020600020019081612b1f9190615dbb565b5081805480612b3057612b30615e8f565b600190038181906000526020600020016000612b4c9190614ec9565b9055612b65565b80612b5d81615a9b565b915050612a56565b506000600986604051612b789190615949565b9081526020016040518091039020905060005b8154811015612c9157836001600160a01b0316828281548110612bb057612bb0615a6f565b6000918252602090912001546001600160a01b031603612c7f5781548290612bda90600190615da8565b81548110612bea57612bea615a6f565b9060005260206000200160009054906101000a90046001600160a01b0316828281548110612c1a57612c1a615a6f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081805480612c5857612c58615e8f565b600082815260209020810160001990810180546001600160a01b0319169055019055612c91565b80612c8981615a9b565b915050612b8b565b50600a86604051612ca29190615949565b9081526040519081900360200190206005018054906000612cc283615ea5565b9190505550826001600160a01b0316600080516020615fc683398151915287604051612cee9190615794565b60405180910390a250505b5080612d0481615a9b565b91505061299e565b50505050565b80336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612d975750336001600160a01b0316600a82604051612d5f9190615949565b908152604051908190036020019020600201546001600160a01b0316148015612d975750336000908152600b602052604090205460ff165b612db35760405162461bcd60e51b8152600401610c6490615965565b60105460ff1615612dd65760405162461bcd60e51b8152600401610c64906159a6565b6001600160a01b03831660009081526005602052604090206004015460ff16612e115760405162461bcd60e51b8152600401610c6490615ebc565b600a82604051612e219190615949565b9081526040519081900360200190206002015460ff600160a01b90910416612e5b5760405162461bcd60e51b8152600401610c6490615eec565b600c82604051612e6b9190615949565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff1615612edb5760405162461bcd60e51b815260206004820152601860248201527710db19585b995c88185b1c9958591e48185cdcda59db995960421b6044820152606401610c64565b6001600c83604051612eed9190615949565b90815260408051602092819003830190206001600160a01b0387166000908152908352818120805460ff1916941515949094179093556005825282206006018054600181018255908352912001612f448382615c23565b50600982604051612f559190615949565b908152604051602091819003820181208054600181018255600091825292902090910180546001600160a01b0319166001600160a01b038616179055600a90612f9f908490615949565b9081526040519081900360200190206005018054906000612fbf83615a9b565b9190505550826001600160a01b0316600080516020615fa683398151915283604051610d599190615794565b6060600882604051612ffd9190615949565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561305957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161303b575b50505050509050919050565b6001600160a01b0381166000908152600560205260408120600401548190819060ff166130a45760405162461bcd60e51b8152600401610c6490615ebc565b60005b60025481101561311b576000818152600660205260409020546001600160a01b0380871691160361310957836130dc81615a9b565b60008381526006602052604090206005015490955060ff16159050613109578261310581615a9b565b9350505b8061311381615a9b565b9150506130a7565b50821561313b578261312e836064615ab4565b6131389190615acb565b90505b9193909250565b80336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806131c75750336001600160a01b0316600a8260405161318f9190615949565b908152604051908190036020019020600201546001600160a01b03161480156131c75750336000908152600b602052604090205460ff165b6131e35760405162461bcd60e51b8152600401610c6490615965565b60105460ff16156132065760405162461bcd60e51b8152600401610c64906159a6565b60008351116132275760405162461bcd60e51b8152600401610c6490615d04565b600a826040516132379190615949565b9081526040519081900360200190206002015460ff600160a01b909104166132715760405162461bcd60e51b8152600401610c6490615eec565b60005b8351811015612d0c57600084828151811061329157613291615a6f565b6020908102919091018101516001600160a01b0381166000908152600590925260409091206004015490915060ff1680156133015750600c846040516132d79190615949565b90815260408051602092819003830190206001600160a01b0384166000908152925290205460ff16155b1561341f576001600c856040516133189190615949565b90815260408051602092819003830190206001600160a01b0385166000908152908352818120805460ff191694151594909417909355600582528220600601805460018101825590835291200161336f8582615c23565b506009846040516133809190615949565b908152604051602091819003820181208054600181018255600091825292902090910180546001600160a01b0319166001600160a01b038416179055600a906133ca908690615949565b90815260405190819003602001902060050180549060006133ea83615a9b565b9190505550806001600160a01b0316600080516020615fa6833981519152856040516134169190615794565b60405180910390a25b508061342a81615a9b565b915050613274565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461347a5760405162461bcd60e51b8152600401610c6490615f1d565b6001600160a01b03821660009081526004602052604090206005015460ff166134b55760405162461bcd60e51b8152600401610c6490615aed565b6001600160a01b03909116600090815260046020526040902060010155565b80336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806135595750336001600160a01b0316600a826040516135219190615949565b908152604051908190036020019020600201546001600160a01b03161480156135595750336000908152600b602052604090205460ff165b6135755760405162461bcd60e51b8152600401610c6490615965565b60105460ff16156135985760405162461bcd60e51b8152600401610c64906159a6565b600c826040516135a89190615949565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff166136285760405162461bcd60e51b8152602060048201526024808201527f436c65616e6572206e6f742061737369676e656420746f206e65696768626f726044820152631a1bdbd960e21b6064820152608401610c64565b6000600c8360405161363a9190615949565b90815260408051602092819003830190206001600160a01b0387166000908152908352818120805460ff19169415159490941790935560059091528120600601905b815481101561378b57836040516020016136969190615949565b604051602081830303815290604052805190602001208282815481106136be576136be615a6f565b906000526020600020016040516020016136d89190615d32565b6040516020818303038152906040528051906020012003613779578154829061370390600190615da8565b8154811061371357613713615a6f565b9060005260206000200182828154811061372f5761372f615a6f565b9060005260206000200190816137459190615dbb565b508180548061375657613756615e8f565b6001900381819060005260206000200160006137729190614ec9565b905561378b565b8061378381615a9b565b91505061367c565b50600060098460405161379e9190615949565b9081526020016040518091039020905060005b81548110156138b757856001600160a01b03168282815481106137d6576137d6615a6f565b6000918252602090912001546001600160a01b0316036138a5578154829061380090600190615da8565b8154811061381057613810615a6f565b9060005260206000200160009054906101000a90046001600160a01b031682828154811061384057613840615a6f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508180548061387e5761387e615e8f565b600082815260209020810160001990810180546001600160a01b03191690550190556138b7565b806138af81615a9b565b9150506137b1565b50600a846040516138c89190615949565b90815260405190819003602001902060050180549060006138e883615ea5565b9190505550846001600160a01b0316600080516020615fc683398151915285604051611c839190615794565b6060600f805480602002602001604051908101604052809291908181526020016000905b828210156139e4578382906000526020600020018054613957906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054613983906159d2565b80156139d05780601f106139a5576101008083540402835291602001916139d0565b820191906000526020600020905b8154815290600101906020018083116139b357829003601f168201915b505050505081526020019060010190613938565b50505050905090565b6000600c826040516139ff9190615949565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff1680613a655750826001600160a01b0316600a83604051613a479190615949565b908152604051908190036020019020600201546001600160a01b0316145b80613aa157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b9392505050565b600f8181548110613ab857600080fd5b906000526020600020016000915090508054613ad3906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054613aff906159d2565b8015613b4c5780601f10613b2157610100808354040283529160200191613b4c565b820191906000526020600020905b815481529060010190602001808311613b2f57829003601f168201915b505050505081565b6001600160a01b0383166000908152600460205260408120600501546060919060ff16613b935760405162461bcd60e51b8152600401610c6490615aed565b600083118015613ba4575060648311155b613bc05760405162461bcd60e51b8152600401610c6490615f44565b6000805b600254811015613c12576000818152600660205260409020600101546001600160a01b03808916911603613c005781613bfc81615a9b565b9250505b80613c0a81615a9b565b915050613bc4565b50808510613c505760005b604051908082528060200260200182016040528015613c46578160200160208202803683370190505b5092509050613d52565b8381613c5c8288615bac565b1115613c6f57613c6c8683615da8565b90505b6000816001600160401b03811115613c8957613c89614f1f565b604051908082528060200260200182016040528015613cb2578160200160208202803683370190505b50905060008060005b60025481108015613ccb57508483105b15613d47576000818152600660205260409020600101546001600160a01b03808d16911603613d3557898210613d275780848481518110613d0e57613d0e615a6f565b602090810291909101015282613d2381615a9b565b9350505b81613d3181615a9b565b9250505b80613d3f81615a9b565b915050613cbb565b509195509293505050505b935093915050565b60105460ff1615613d7d5760405162461bcd60e51b8152600401610c64906159a6565b3360009081526005602052604090206004015460ff1615613ddd5760405162461bcd60e51b815260206004820152601a60248201527910db19585b995c88185b1c9958591e481c9959da5cdd195c995960321b6044820152606401610c64565b3360009081526004602052604090206005015460ff1615613e4c5760405162461bcd60e51b815260206004820152602360248201527f4164647265737320616c7265616479207265676973746572656420617320686f60448201526275736560e81b6064820152608401610c64565b336000818152600560208190526040822080546001600160a01b03199081168517825560018083018590556064600284015560048301805460ff1916821790554293830193909355600e805480850182559085527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054909116909417909355805491613ed983615a9b565b9190505550613f1633600a6040518060400160405280601481526020017321b632b0b732b9102932b3b4b9ba3930ba34b7b760611b815250614ddf565b60405142815233907fdd834bc0e344533b42bfa014b5f8f8ae9d396bc5debb886b6bc56ee24c2ddf9e9060200160405180910390a250565b6060600e805480602002602001604051908101604052809291908181526020018280548015611ed5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611eb7575050505050905090565b613ff96040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016060815260200160001515815260200160008152602001606081525090565b6001600160a01b03821660009081526005602052604090206004015460ff166140345760405162461bcd60e51b8152600401610c6490615ebc565b6001600160a01b03808316600090815260056020908152604091829020825160e08101845281549094168452600181015484830152600281015484840152600381018054845181850281018501909552808552919360608601939092908301828280156140c057602002820191906000526020600020905b8154815260200190600101908083116140ac575b505050505081526020016004820160009054906101000a900460ff161515151581526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b828210156141bf578382906000526020600020018054614132906159d2565b80601f016020809104026020016040519081016040528092919081815260200182805461415e906159d2565b80156141ab5780601f10614180576101008083540402835291602001916141ab565b820191906000526020600020905b81548152906001019060200180831161418e57829003601f168201915b505050505081526020019060010190614113565b505050915250909392505050565b6001600160a01b03811660009081526005602052604090206004015460609060ff1661420b5760405162461bcd60e51b8152600401610c6490615ebc565b6001600160a01b038216600090815260056020908152604080832060060180548251818502810185019093528083529193909284015b828210156142ed578382906000526020600020018054614260906159d2565b80601f016020809104026020016040519081016040528092919081815260200182805461428c906159d2565b80156142d95780601f106142ae576101008083540402835291602001916142d9565b820191906000526020600020905b8154815290600101906020018083116142bc57829003601f168201915b505050505081526020019060010190614241565b505050509050919050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146143405760405162461bcd60e51b8152600401610c6490615f1d565b6010805460ff19168215159081179091556040519081527f752d7e161ff5146f80e3820893176eb40532811e5e20400dfdde57455213706a9060200160405180910390a150565b6060600982604051612ffd9190615949565b6001600160a01b03811660009081526005602052604090206004015460609060ff166143d75760405162461bcd60e51b8152600401610c6490615ebc565b60006002546001600160401b038111156143f3576143f3614f1f565b60405190808252806020026020018201604052801561441c578160200160208202803683370190505b5090506000805b60025481101561448c576000818152600660205260409020546001600160a01b0380871691160361447a578083838151811061446157614461615a6f565b60209081029190910101528161447681615a9b565b9250505b8061448481615a9b565b915050614423565b506000816001600160401b038111156144a7576144a7614f1f565b6040519080825280602002602001820160405280156144d0578160200160208202803683370190505b50905060005b828110156121c5578381815181106144f0576144f0615a6f565b602002602001015182828151811061450a5761450a615a6f565b60209081029190910101528061451f81615a9b565b9150506144d6565b6001600160a01b0383166000908152600560205260408120600401546060919060ff166145665760405162461bcd60e51b8152600401610c6490615ebc565b600083118015614577575060648311155b6145935760405162461bcd60e51b8152600401610c6490615f44565b6000805b6002548110156145e2576000818152600660205260409020546001600160a01b038089169116036145d057816145cc81615a9b565b9250505b806145da81615a9b565b915050614597565b508085106145f1576000613c1d565b83816145fd8288615bac565b11156146105761460d8683615da8565b90505b6000816001600160401b0381111561462a5761462a614f1f565b604051908082528060200260200182016040528015614653578160200160208202803683370190505b50905060008060005b6002548110801561466c57508483105b15613d47576000818152600660205260409020546001600160a01b03808d169116036146d3578982106146c557808484815181106146ac576146ac615a6f565b6020908102919091010152826146c181615a9b565b9350505b816146cf81615a9b565b9250505b806146dd81615a9b565b91505061465c565b60105460ff16156147085760405162461bcd60e51b8152600401610c64906159a6565b60008351116147635760405162461bcd60e51b815260206004820152602160248201527f4e65696768626f72686f6f64206e616d652063616e6e6f7420626520656d70746044820152607960f81b6064820152608401610c64565b60008251116147b25760405162461bcd60e51b815260206004820152601b60248201527a4465736372697074696f6e2063616e6e6f7420626520656d70747960281b6044820152606401610c64565b6001600160a01b0381166147d85760405162461bcd60e51b8152600401610c6490615a40565b600a836040516147e89190615949565b9081526040519081900360200190208054614802906159d2565b15905061484f5760405162461bcd60e51b815260206004820152601b60248201527a4e65696768626f72686f6f6420616c72656164792065786973747360281b6044820152606401610c64565b6000600a846040516148619190615949565b90815260405190819003602001902090508061487d8582615c23565b506001810161488c8482615c23565b506002810180546001600160a81b0319166001600160a01b038416908117600160a01b179091554260038301556000908152600b60205260408120805460ff19166001908117909155600f805491820181559091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020161490d8582615c23565b50816001600160a01b0316846040516149269190615949565b604051908190038120428252907ff36227d4e0a75a4b5b4ba2bbf468614d1007c3770a1d73ac7da8145fee8bc6109060200160405180910390a350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146149ae5760405162461bcd60e51b8152600401610c6490615f1d565b6001600160a01b03821660009081526005602052604090206004015460ff166149e95760405162461bcd60e51b8152600401610c6490615ebc565b6001600160a01b03909116600090815260056020526040902060020155565b3360009081526005602052604090206004015460ff16614a3a5760405162461bcd60e51b8152600401610c6490615ebc565b60105460ff1615614a5d5760405162461bcd60e51b8152600401610c64906159a6565b6001600160a01b03831660009081526004602052604090206005015460ff16614a985760405162461bcd60e51b8152600401610c6490615aed565b81614ab55760405162461bcd60e51b8152600401610c6490615b45565b6000815111614ad65760405162461bcd60e51b8152600401610c6490615b79565b6001600160a01b03831660009081526004602052604081206002018054614afc906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054614b28906159d2565b8015614b755780601f10614b4a57610100808354040283529160200191614b75565b820191906000526020600020905b815481529060010190602001808311614b5857829003601f168201915b50505050509050600c81604051614b8c9190615949565b9081526040805160209281900383019020336000908152925290205460ff1680614be95750336001600160a01b0316600a82604051614bcb9190615949565b908152604051908190036020019020600201546001600160a01b0316145b80614c1c5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b614c7c5760405162461bcd60e51b815260206004820152602b60248201527f436c65616e6572206e6f7420617574686f72697a656420696e2074686973206e60448201526a195a59da189bdc9a1bdbd960aa1b6064820152608401610c64565b6002805460008181526006602052604090208054336001600160a01b03199182161782556001820180549091166001600160a01b0389161790554292810192909255600382018590559060048101614cd48582615c23565b506005808201805460ff19169055600682018390553360009081526020918252604080822060030180546001810182559083529290912090910186905551600a90614d20908590615949565b9081526040519081900360200190206006018054906000614d4083615a9b565b909155505060028054906000614d5583615a9b565b9190505550614d903360146040518060400160405280601281526020017123b0b93130b3b29021b7b63632b1ba34b7b760711b815250614ddf565b604080518681524260208201526001600160a01b03881691339185917f6abb0de111797db4aa016f586b051a7b88947ba2c320bea32058f7db7508d713910160405180910390a4505050505050565b6001600160a01b03831660009081526004602052604090206005015460ff1615614e39576001600160a01b03831660009081526004602052604081206001018054849290614e2e908490615bac565b90915550614e8e9050565b6001600160a01b03831660009081526005602052604090206004015460ff1615614e8e576001600160a01b03831660009081526005602052604081206001018054849290614e88908490615bac565b90915550505b826001600160a01b03167f4c3089477cda1ac100291a040b3ac97ff5f55b6d8b2acfb56a59b9419d95ce048383604051610d59929190615f8c565b508054614ed5906159d2565b6000825580601f10614ee5575050565b601f016020900490600052602060002090810190614f039190614f06565b50565b5b80821115614f1b5760008155600101614f07565b5090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614f5d57614f5d614f1f565b604052919050565b600082601f830112614f7657600080fd5b81356001600160401b03811115614f8f57614f8f614f1f565b614fa2601f8201601f1916602001614f35565b818152846020838601011115614fb757600080fd5b816020850160208301376000918101602001919091529392505050565b80358015158114614fe457600080fd5b919050565b60008060408385031215614ffc57600080fd5b82356001600160401b0381111561501257600080fd5b61501e85828601614f65565b92505061502d60208401614fd4565b90509250929050565b80356001600160a01b0381168114614fe457600080fd5b6000806040838503121561506057600080fd5b82356001600160401b0381111561507657600080fd5b61508285828601614f65565b92505061502d60208401615036565b6000602082840312156150a357600080fd5b81356001600160401b038111156150b957600080fd5b6150c584828501614f65565b949350505050565b6000806000606084860312156150e257600080fd5b833592506020840135915060408401356001600160401b0381111561510657600080fd5b61511286828701614f65565b9150509250925092565b60006020828403121561512e57600080fd5b5035919050565b60006020828403121561514757600080fd5b613aa182615036565b6000806040838503121561516357600080fd5b82356001600160401b0381111561517957600080fd5b61518585828601614f65565b95602094909401359450505050565b60005b838110156151af578181015183820152602001615197565b50506000910152565b600081518084526151d0816020860160208601615194565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015615214578151875295820195908201906001016151f8565b509495945050505050565b6020815260018060a01b038251166020820152602082015160408201526000604083015160e060608401526152586101008401826151b8565b905060ff60608501511660808401526080840151601f198483030160a085015261528282826151e4565b91505060a0840151151560c084015260c084015160e08401528091505092915050565b600080604083850312156152b857600080fd5b82356001600160401b038111156152ce57600080fd5b6152da85828601614f65565b925050602083013560ff811681146152f157600080fd5b809150509250929050565b6001600160a01b03888116825287166020820152604081018690526060810185905260e060808201819052600090615336908301866151b8565b93151560a08301525060c0015295945050505050565b6000806040838503121561535f57600080fd5b61536883615036565b915060208301356001600160401b0381111561538357600080fd5b61538f85828601614f65565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156153da5783516001600160a01b0316835292840192918401916001016153b5565b50909695505050505050565b60208152600060018060a01b03808451166020840152806020850151166040840152506040830151606083015260608301516080830152608083015160e060a08401526154376101008401826151b8565b905060a0840151151560c084015260c084015160e08401528091505092915050565b602081526000613aa160208301846151e4565b60018060a01b038716815285602082015260c06040820152600061549360c08301876151b8565b60ff95909516606083015250911515608083015260a0909101529392505050565b6001600160a01b038916815260208101889052610100604082018190526000906154e08382018a6151b8565b905082810360608401526154f481896151b8565b9050828103608084015261550881886151b8565b60ff9690961660a0840152505060c081019290925260e09091015295945050505050565b60006101208083526155408184018d6151b8565b90508281036020840152615554818c6151b8565b6001600160a01b039a909a16604084015250509515156060870152608086019490945260a085019290925260c084015260e08301526101009091015292915050565b60208152600082516101208060208501526155b56101408501836151b8565b91506020850151601f198584030160408601526155d283826151b8565b92505060408501516155ef60608601826001600160a01b03169052565b506060850151801515608086015250608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b6000806040838503121561565157600080fd5b82356001600160401b038082111561566857600080fd5b818501915085601f83011261567c57600080fd5b813560208282111561569057615690614f1f565b8160051b61569f828201614f35565b928352848101820192828101908a8511156156b957600080fd5b958301955b848710156156de576156cf87615036565b825295830195908301906156be565b97505050860135925050808211156156f557600080fd5b5061538f85828601614f65565b6000806040838503121561571557600080fd5b61571e83615036565b946020939093013593505050565b600081518084526020808501808196508360051b8101915082860160005b858110156157745782840389526157628483516151b8565b9885019893509084019060010161574a565b5091979650505050505050565b602081526000613aa1602083018461572c565b602081526000613aa160208301846151b8565b6000806000606084860312156157bc57600080fd5b6157c584615036565b95602085013595506040909401359392505050565b6040815260006157ed60408301856151e4565b90508260208301529392505050565b6020815260018060a01b03825116602082015260208201516040820152604082015160608201526000606083015160e0608084015261583f6101008401826151e4565b90506080840151151560a084015260a084015160c084015260c0840151601f198483030160e0850152615872828261572c565b95945050505050565b60006020828403121561588d57600080fd5b613aa182614fd4565b6000806000606084860312156158ab57600080fd5b83356001600160401b03808211156158c257600080fd5b6158ce87838801614f65565b945060208601359150808211156158e457600080fd5b506158f186828701614f65565b92505061590060408501615036565b90509250925092565b60008060006060848603121561591e57600080fd5b61592784615036565b92506020840135915060408401356001600160401b0381111561510657600080fd5b6000825161595b818460208701615194565b9190910192915050565b60208082526021908201527f4e6f7420617574686f72697a6564206e65696768626f72686f6f642061646d696040820152603760f91b606082015260800190565b60208082526012908201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b604082015260600190565b600181811c908216806159e657607f821691505b602082108103615a0657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527913995a59da189bdc9a1bdbd908191bd95cdb89dd08195e1a5cdd60321b604082015260600190565b602080825260159082015274496e76616c69642061646d696e206164647265737360581b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201615aad57615aad615a85565b5060010190565b808202811582820484141761192457611924615a85565b600082615ae857634e487b7160e01b600052601260045260246000fd5b500490565b602080825260149082015273121bdd5cd9481b9bdd081c9959da5cdd195c995960621b604082015260600190565b60208082526010908201526f125b9d985b1a5908195d995b9d08125160821b604082015260600190565b6020808252601a9082015279496d61676520686173682063616e6e6f7420626520656d70747960301b604082015260600190565b602080825260199082015278496d616765205552492063616e6e6f7420626520656d70747960381b604082015260600190565b8082018082111561192457611924615a85565b601f821115615c0957600081815260208120601f850160051c81016020861015615be65750805b601f850160051c820191505b81811015615c0557828155600101615bf2565b5050505b505050565b600019600383901b1c191660019190911b1790565b81516001600160401b03811115615c3c57615c3c614f1f565b615c5081615c4a84546159d2565b84615bbf565b602080601f831160018114615c7f5760008415615c6d5750858301515b615c778582615c0e565b865550615c05565b600085815260208120601f198616915b82811015615cae57888601518255948401946001909101908401615c8f565b5085821015615ccc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000615cef60608301866151b8565b60ff9490941660208301525060400152919050565b602080825260149082015273139bc818db19585b995c9cc81c1c9bdd9a59195960621b604082015260600190565b6000808354615d40816159d2565b60018281168015615d585760018114615d6d57615d9c565b60ff1984168752821515830287019450615d9c565b8760005260208060002060005b85811015615d935781548a820152908401908201615d7a565b50505082870194505b50929695505050505050565b8181038181111561192457611924615a85565b818103615dc6575050565b615dd082546159d2565b6001600160401b03811115615de757615de7614f1f565b615df581615c4a84546159d2565b6000601f821160018114615e235760008315615e115750848201545b615e1b8482615c0e565b855550615e88565b600085815260209020601f19841690600086815260209020845b83811015615e5d5782860154825560019586019590910190602001615e3d565b5085831015615e7b5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b600081615eb457615eb4615a85565b506000190190565b60208082526016908201527510db19585b995c881b9bdd081c9959da5cdd195c995960521b604082015260600190565b6020808252601790820152764e65696768626f72686f6f64206e6f742061637469766560481b604082015260600190565b6020808252600d908201526c2737ba103a34329037bbb732b960991b604082015260600190565b60208082526028908201527f496e76616c6964206c696d69743a206d757374206265206265747765656e2031604082015267020616e64203130360c41b606082015260800190565b8281526040602082015260006150c560408301846151b856fe51d702b24d103745e0d20301c211e010c409a7c9e44ee6f4670d99cde9ea3eb5ee186675c6b8e9fd58ce1f6273a3a8f21e41653bcf8a4041f606edc00099c202a2646970667358221220d17daa8e585bb613a2fae6f3cb228e26c8b277e633734f6d2dc9e89a173e6f6964736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102a05760003560e01c806302faee03146102ac57806303d2e592146102ce5780630cf8e30f146102ee5780630d330bb31461031757806311ac4e621461035f578063162d8afb1461037f5780631ea28fb91461039557806323713bc4146103cd57806324e84b871461045c57806337e72c001461047c578063392cf2bd146104915780633991737a146104b157806339d95f9f146104de5780633f4130c3146104f357806358ca06241461053f5780635a17f3eb1461055f578063626a122e1461057f5780636754e0f1146105ba5780636de52069146105ed57806371f3eeb91461060d57806374de423a1461062f5780637688b1f41461065c57806378c71b72146106725780637abb3d1b1461069f5780637e69e912146106d1578063862b87af146107055780638a67456a1461073a5780638d7a950c146107545780638d8feb0a146107815780638da5cb5b146107a15780638ff0e3fb146107d557806392335abd146107f55780639a3e6c00146108255780639be22613146108455780639e34229614610890578063a193ee59146108b0578063a5a823c3146108d0578063a886b398146108f0578063ac1996ab14610906578063aeb0983e14610926578063afc22def14610946578063b0851bbc14610966578063b187bd2614610988578063b1a4b9a0146109a0578063b5aa410d146109c0578063c115b8e9146109ed578063c44d630714610a1b578063c6166e9914610a30578063c9e7946d14610a45578063d90f644814610a72578063e0e1c82e14610a92578063e272b89214610ace578063e596705414610aee578063ee310f0f14610b03578063ee407d5714610b23578063f29cda4c14610b43578063f4df7e7114610b63578063f62198d414610b83578063fcf1144814610ba357600080fd5b366102a757005b600080fd5b3480156102b857600080fd5b506102cc6102c7366004614fe9565b610bc3565b005b3480156102da57600080fd5b506102cc6102e936600461504d565b610d66565b3480156102fa57600080fd5b5061030460015481565b6040519081526020015b60405180910390f35b34801561032357600080fd5b50610337610332366004615091565b61109f565b604080519586526020860194909452928401919091526060830152608082015260a00161030e565b34801561036b57600080fd5b506102cc61037a3660046150cd565b6112e7565b34801561038b57600080fd5b5061030460005481565b3480156103a157600080fd5b506103b56103b036600461511c565b611649565b6040516001600160a01b03909116815260200161030e565b3480156103d957600080fd5b506104286103e8366004615135565b6005602081905260009182526040909120805460018201546002830154600484015493909401546001600160a01b03909216939092909160ff9091169085565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a00161030e565b34801561046857600080fd5b506103b5610477366004615150565b611673565b34801561048857600080fd5b50600f54610304565b34801561049d57600080fd5b506103b56104ac366004615150565b6116ba565b3480156104bd57600080fd5b506104d16104cc366004615135565b6116e5565b60405161030e919061521f565b3480156104ea57600080fd5b50600054610304565b3480156104ff57600080fd5b5061052f61050e366004615135565b6001600160a01b031660009081526005602052604090206004015460ff1690565b604051901515815260200161030e565b34801561054b57600080fd5b5061052f61055a366004615091565b6118be565b34801561056b57600080fd5b506102cc61057a3660046152a5565b61192a565b34801561058b57600080fd5b5061059f61059a366004615135565b611c92565b6040805193845260208401929092529082015260600161030e565b3480156105c657600080fd5b506105da6105d536600461511c565b611d65565b60405161030e97969594939291906152fc565b3480156105f957600080fd5b5061052f61060836600461534c565b611e3b565b34801561061957600080fd5b50610622611e7d565b60405161030e9190615399565b34801561063b57600080fd5b5061064f61064a36600461511c565b611edf565b60405161030e91906153e6565b34801561066857600080fd5b5061030460025481565b34801561067e57600080fd5b5061069261068d366004615135565b612034565b60405161030e9190615459565b3480156106ab57600080fd5b506106bf6106ba366004615135565b6121ce565b60405161030e9695949392919061546c565b3480156106dd57600080fd5b506106f16106ec36600461511c565b61229c565b60405161030e9897969594939291906154b4565b34801561071157600080fd5b50610725610720366004615091565b612485565b60405161030e9998979695949392919061552c565b34801561074657600080fd5b5060105461052f9060ff1681565b34801561076057600080fd5b5061077461076f366004615091565b6125f8565b60405161030e9190615596565b34801561078d57600080fd5b5061052f61079c366004615135565b612849565b3480156107ad57600080fd5b506103b57f000000000000000000000000000000000000000000000000000000000000000081565b3480156107e157600080fd5b506103b56107f036600461511c565b6128a6565b34801561080157600080fd5b5061052f610810366004615135565b600b6020526000908152604090205460ff1681565b34801561083157600080fd5b506102cc61084036600461563e565b6128b6565b34801561085157600080fd5b5061052f61086036600461504d565b8151602081840181018051600c825292820194820194909420919093529091526000908152604090205460ff1681565b34801561089c57600080fd5b506102cc6108ab36600461534c565b612d12565b3480156108bc57600080fd5b506106226108cb366004615091565b612feb565b3480156108dc57600080fd5b5061059f6108eb366004615135565b613065565b3480156108fc57600080fd5b5061030460035481565b34801561091257600080fd5b506102cc61092136600461563e565b613142565b34801561093257600080fd5b506102cc610941366004615702565b613432565b34801561095257600080fd5b506102cc61096136600461534c565b6134d4565b34801561097257600080fd5b5061097b613914565b60405161030e9190615781565b34801561099457600080fd5b5060105460ff1661052f565b3480156109ac57600080fd5b5061052f6109bb36600461534c565b6139ed565b3480156109cc57600080fd5b506109e06109db36600461511c565b613aa8565b60405161030e9190615794565b3480156109f957600080fd5b50610a0d610a083660046157a7565b613b54565b60405161030e9291906157da565b348015610a2757600080fd5b506102cc613d5a565b348015610a3c57600080fd5b50610622613f4e565b348015610a5157600080fd5b50610a65610a60366004615135565b613fae565b60405161030e91906157fc565b348015610a7e57600080fd5b5061097b610a8d366004615135565b6141cd565b348015610a9e57600080fd5b5061052f610aad366004615135565b6001600160a01b031660009081526004602052604090206005015460ff1690565b348015610ada57600080fd5b506102cc610ae936600461587b565b6142f8565b348015610afa57600080fd5b50600154610304565b348015610b0f57600080fd5b50610622610b1e366004615091565b614387565b348015610b2f57600080fd5b50610692610b3e366004615135565b614399565b348015610b4f57600080fd5b50610a0d610b5e3660046157a7565b614527565b348015610b6f57600080fd5b506102cc610b7e366004615896565b6146e5565b348015610b8f57600080fd5b506102cc610b9e366004615702565b614966565b348015610baf57600080fd5b506102cc610bbe366004615909565b614a08565b81336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610c485750336001600160a01b0316600a82604051610c109190615949565b908152604051908190036020019020600201546001600160a01b0316148015610c485750336000908152600b602052604090205460ff165b610c6d5760405162461bcd60e51b8152600401610c6490615965565b60405180910390fd5b60105460ff1615610c905760405162461bcd60e51b8152600401610c64906159a6565b6000600a84604051610ca29190615949565b9081526040519081900360200190208054610cbc906159d2565b905011610cdb5760405162461bcd60e51b8152600401610c6490615a0c565b81600a84604051610cec9190615949565b9081526040519081900360200181206002018054921515600160a01b0260ff60a01b1990931692909217909155610d24908490615949565b6040519081900381208315158252907f206b0ef45ee559966396a67ce838e4973922ecef89d3cb4a5e1208a30591e872906020015b60405180910390a2505050565b60105460ff1615610d895760405162461bcd60e51b8152600401610c64906159a6565b600a82604051610d999190615949565b9081526040519081900360200190206002015460ff600160a01b90910416610dd35760405162461bcd60e51b8152600401610c6490615a0c565b6001600160a01b038116610df95760405162461bcd60e51b8152600401610c6490615a40565b6000600a83604051610e0b9190615949565b908152604051908190036020019020600201546001600160a01b03908116915082168114801590610e6e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b15611005576000805b600f54811015610fdc576000600f8281548110610e9657610e96615a6f565b906000526020600020018054610eab906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed7906159d2565b8015610f245780601f10610ef957610100808354040283529160200191610f24565b820191906000526020600020905b815481529060010190602001808311610f0757829003601f168201915b5050505050905085604051602001610f3c9190615949565b6040516020818303038152906040528051906020012081604051602001610f639190615949565b6040516020818303038152906040528051906020012014158015610fba5750836001600160a01b0316600a82604051610f9c9190615949565b908152604051908190036020019020600201546001600160a01b0316145b15610fc9576001925050610fdc565b5080610fd481615a9b565b915050610e77565b5080611003576001600160a01b0382166000908152600b60205260409020805460ff191690555b505b81600a846040516110169190615949565b908152604080516020928190038301812060020180546001600160a01b0319166001600160a01b039586161790559285166000818152600b9093529120805460ff191660011790559061106a908590615949565b604051908190038120907f7d05a11f2bb7293af5865673c472e0c3cd8766de0b14611207abb8458c63ed5690600090a3505050565b600080600080600080600a876040516110b89190615949565b90815260405190819003602001902080546110d2906159d2565b9050116110f15760405162461bcd60e51b8152600401610c6490615a0c565b6000600a876040516111039190615949565b90815260200160405180910390206040518061012001604052908160008201805461112d906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611159906159d2565b80156111a65780601f1061117b576101008083540402835291602001916111a6565b820191906000526020600020905b81548152906001019060200180831161118957829003601f168201915b505050505081526020016001820180546111bf906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546111eb906159d2565b80156112385780601f1061120d57610100808354040283529160200191611238565b820191906000526020600020905b81548152906001019060200180831161121b57829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff16151560408201526003820154606082015260048201546080820152600582015460a080830191909152600683015460c08084019190915260079093015460e092830152830151918301519083015161010084015192995090975095509350905083156112dd57836112d0846064615ab4565b6112da9190615acb565b91505b5091939590929450565b3360009081526004602052604090206005015460ff166113195760405162461bcd60e51b8152600401610c6490615aed565b60105460ff161561133c5760405162461bcd60e51b8152600401610c64906159a6565b600254831061135d5760405162461bcd60e51b8152600401610c6490615b1b565b8161137a5760405162461bcd60e51b8152600401610c6490615b45565b600081511161139b5760405162461bcd60e51b8152600401610c6490615b79565b600083815260066020526040902060018101546001600160a01b031633146114115760405162461bcd60e51b8152602060048201526024808201527f4e6f7420617574686f72697a656420746f20636f6e6669726d207468697320656044820152631d995b9d60e21b6064820152608401610c64565b600581015460ff16156114605760405162461bcd60e51b8152602060048201526017602482015276115d995b9d08185b1c9958591e4818dbdb999a5c9b5959604a1b6044820152606401610c64565b60058101805460ff1916600190811790915533600081815260046020818152604083209182018054958601815583528220909301869055908152600290910180546114aa906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546114d6906159d2565b80156115235780601f106114f857610100808354040283529160200191611523565b820191906000526020600020905b81548152906001019060200180831161150657829003601f168201915b50505050509050600a8160405161153a9190615949565b908152604051908190036020019020600701805490600061155a83615a9b565b9091555050815460408051808201909152601a815279436f6e6669726d656420436f6c6c656374696f6e20426f6e757360301b60208201526115a8916001600160a01b031690600a90614ddf565b6115e133600f6040518060400160405280601581526020017421b7b63632b1ba34b7b7102b30b634b230ba34b7b760591b815250614ddf565b81546001600160a01b031660009081526005602081905260408220600201805491929091611610908490615bac565b9091555050604051339086907f52db567cccdb9bec024e70ad7970b0800b7a0b38d81cbc3d2ab5132f85dfc46190600090a35050505050565b600e818154811061165957600080fd5b6000918252602090912001546001600160a01b0316905081565b8151602081840181018051600982529282019185019190912091905280548290811061169e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b8151602081840181018051600882529282019185019190912091905280548290811061169e57600080fd5b6117336040518060e0016040528060006001600160a01b031681526020016000815260200160608152602001600060ff16815260200160608152602001600015158152602001600081525090565b6001600160a01b03821660009081526004602052604090206005015460ff1661176e5760405162461bcd60e51b8152600401610c6490615aed565b6001600160a01b03808316600090815260046020908152604091829020825160e0810184528154909416845260018101549184019190915260028101805491928401916117ba906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546117e6906159d2565b80156118335780601f1061180857610100808354040283529160200191611833565b820191906000526020600020905b81548152906001019060200180831161181657829003601f168201915b5050509183525050600382015460ff16602080830191909152600483018054604080518285028101850182528281529401939283018282801561189557602002820191906000526020600020905b815481526020019060010190808311611881575b5050509183525050600582015460ff161515602082015260069091015460409091015292915050565b600080600a836040516118d19190615949565b90815260405190819003602001902080546118eb906159d2565b90501180156119245750600a826040516119059190615949565b9081526040519081900360200190206002015460ff600160a01b909104165b92915050565b81600081511161197b5760405162461bcd60e51b815260206004820152601c60248201527b4e65696768626f72686f6f642063616e6e6f7420626520656d70747960201b6044820152606401610c64565b600a8160405161198b9190615949565b9081526040519081900360200190206002015460ff600160a01b90910416611a065760405162461bcd60e51b815260206004820152602860248201527f4e65696768626f72686f6f64206e6f7420616374697665206f7220646f65736e60448201526709dd08195e1a5cdd60c21b6064820152608401610c64565b8160008160ff16118015611a1e575060148160ff1611155b611a685760405162461bcd60e51b815260206004820152601b60248201527a496e76616c6964206e756d626572206f66207265736964656e747360281b6044820152606401610c64565b60105460ff1615611a8b5760405162461bcd60e51b8152600401610c64906159a6565b3360009081526004602052604090206005015460ff1615611ae95760405162461bcd60e51b8152602060048201526018602482015277121bdd5cd948185b1c9958591e481c9959da5cdd195c995960421b6044820152606401610c64565b33600081815260046020526040812080546001600160a01b0319169092178255600182015560028101611b1c8682615c23565b5060038101805460ff861660ff19918216179091556005820180549091166001908117909155426006830155600d805491820181556000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b03191633179055604051600890611b97908790615949565b9081526040519081900360209081018220805460018101825560009182529190200180546001600160a01b03191633179055600a90611bd7908790615949565b9081526040519081900360200190206004018054906000611bf783615a9b565b9091555050600080549080611c0b83615a9b565b9190505550611c4633600a604051806040016040528060128152602001712437bab9b2902932b3b4b9ba3930ba34b7b760711b815250614ddf565b336001600160a01b03167fd58b85d97fd9a25d767f432e493b06cb5dbeb58f40b042f24b2f6bc23b546cc9868642604051611c8393929190615cdc565b60405180910390a25050505050565b6001600160a01b0381166000908152600460205260408120600501548190819060ff16611cd15760405162461bcd60e51b8152600401610c6490615aed565b60005b600254811015611d5d576000818152600660205260409020600101546001600160a01b03808716911603611d4b5783611d0c81615a9b565b60008381526006602052604090206005015490955060ff16159050611d3d5782611d3581615a9b565b935050611d4b565b81611d4781615a9b565b9250505b80611d5581615a9b565b915050611cd4565b509193909250565b600660205260009081526040902080546001820154600283015460038401546004850180546001600160a01b0395861696949095169492939192611da8906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611dd4906159d2565b8015611e215780601f10611df657610100808354040283529160200191611e21565b820191906000526020600020905b815481529060010190602001808311611e0457829003601f168201915b505050506005830154600690930154919260ff1691905087565b6000600c82604051611e4d9190615949565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff16905092915050565b6060600d805480602002602001604051908101604052809291908181526020018280548015611ed557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611eb7575b5050505050905090565b6040805160e0810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c08101919091526002548210611f385760405162461bcd60e51b8152600401610c6490615b1b565b600082815260066020908152604091829020825160e08101845281546001600160a01b0390811682526001830154169281019290925260028101549282019290925260038201546060820152600482018054919291608084019190611f9c906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc8906159d2565b80156118955780601f10611fea57610100808354040283529160200191611895565b820191906000526020600020905b815481529060010190602001808311611ff8575050509183525050600582015460ff161515602082015260069091015460409091015292915050565b6001600160a01b03811660009081526004602052604090206005015460609060ff166120725760405162461bcd60e51b8152600401610c6490615aed565b60006002546001600160401b0381111561208e5761208e614f1f565b6040519080825280602002602001820160405280156120b7578160200160208202803683370190505b5090506000805b60025481101561212a576000818152600660205260409020600101546001600160a01b0380871691160361211857808383815181106120ff576120ff615a6f565b60209081029190910101528161211481615a9b565b9250505b8061212281615a9b565b9150506120be565b506000816001600160401b0381111561214557612145614f1f565b60405190808252806020026020018201604052801561216e578160200160208202803683370190505b50905060005b828110156121c55783818151811061218e5761218e615a6f565b60200260200101518282815181106121a8576121a8615a6f565b6020908102919091010152806121bd81615a9b565b915050612174565b50949350505050565b6004602052600090815260409020805460018201546002830180546001600160a01b03909316939192612200906159d2565b80601f016020809104026020016040519081016040528092919081815260200182805461222c906159d2565b80156122795780601f1061224e57610100808354040283529160200191612279565b820191906000526020600020905b81548152906001019060200180831161225c57829003601f168201915b5050505060038301546005840154600690940154929360ff918216939116915086565b6007602052600090815260409020805460018201546002830180546001600160a01b039093169391926122ce906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546122fa906159d2565b80156123475780601f1061231c57610100808354040283529160200191612347565b820191906000526020600020905b81548152906001019060200180831161232a57829003601f168201915b50505050509080600301805461235c906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612388906159d2565b80156123d55780601f106123aa576101008083540402835291602001916123d5565b820191906000526020600020905b8154815290600101906020018083116123b857829003601f168201915b5050505050908060040180546123ea906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612416906159d2565b80156124635780601f1061243857610100808354040283529160200191612463565b820191906000526020600020905b81548152906001019060200180831161244657829003601f168201915b5050505060068301546007840154600890940154929360ff9091169290915088565b8051602081830181018051600a825292820191909301209152805481906124ab906159d2565b80601f01602080910402602001604051908101604052809291908181526020018280546124d7906159d2565b80156125245780601f106124f957610100808354040283529160200191612524565b820191906000526020600020905b81548152906001019060200180831161250757829003601f168201915b505050505090806001018054612539906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612565906159d2565b80156125b25780601f10612587576101008083540402835291602001916125b2565b820191906000526020600020905b81548152906001019060200180831161259557829003601f168201915b505050506002830154600384015460048501546005860154600687015460079097015495966001600160a01b03851696600160a01b90950460ff16955092939192909189565b612652604051806101200160405280606081526020016060815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000600a836040516126649190615949565b908152604051908190036020019020805461267e906159d2565b90501161269d5760405162461bcd60e51b8152600401610c6490615a0c565b600a826040516126ad9190615949565b9081526020016040518091039020604051806101200160405290816000820180546126d7906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612703906159d2565b80156127505780601f1061272557610100808354040283529160200191612750565b820191906000526020600020905b81548152906001019060200180831161273357829003601f168201915b50505050508152602001600182018054612769906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612795906159d2565b80156127e25780601f106127b7576101008083540402835291602001916127e2565b820191906000526020600020905b8154815290600101906020018083116127c557829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff16151560408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e09091015292915050565b6001600160a01b0381166000908152600b602052604081205460ff168061192457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161492915050565b600d818154811061165957600080fd5b80336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061293b5750336001600160a01b0316600a826040516129039190615949565b908152604051908190036020019020600201546001600160a01b031614801561293b5750336000908152600b602052604090205460ff165b6129575760405162461bcd60e51b8152600401610c6490615965565b60105460ff161561297a5760405162461bcd60e51b8152600401610c64906159a6565b600083511161299b5760405162461bcd60e51b8152600401610c6490615d04565b60005b8351811015612d0c5760008482815181106129bb576129bb615a6f565b60200260200101519050600c846040516129d59190615949565b90815260408051602092819003830190206001600160a01b0384166000908152925290205460ff1615612cf9576000600c85604051612a149190615949565b90815260408051602092819003830190206001600160a01b0385166000908152908352818120805460ff19169415159490941790935560059091528120600601905b8154811015612b655785604051602001612a709190615949565b60405160208183030381529060405280519060200120828281548110612a9857612a98615a6f565b90600052602060002001604051602001612ab29190615d32565b6040516020818303038152906040528051906020012003612b535781548290612add90600190615da8565b81548110612aed57612aed615a6f565b90600052602060002001828281548110612b0957612b09615a6f565b906000526020600020019081612b1f9190615dbb565b5081805480612b3057612b30615e8f565b600190038181906000526020600020016000612b4c9190614ec9565b9055612b65565b80612b5d81615a9b565b915050612a56565b506000600986604051612b789190615949565b9081526020016040518091039020905060005b8154811015612c9157836001600160a01b0316828281548110612bb057612bb0615a6f565b6000918252602090912001546001600160a01b031603612c7f5781548290612bda90600190615da8565b81548110612bea57612bea615a6f565b9060005260206000200160009054906101000a90046001600160a01b0316828281548110612c1a57612c1a615a6f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081805480612c5857612c58615e8f565b600082815260209020810160001990810180546001600160a01b0319169055019055612c91565b80612c8981615a9b565b915050612b8b565b50600a86604051612ca29190615949565b9081526040519081900360200190206005018054906000612cc283615ea5565b9190505550826001600160a01b0316600080516020615fc683398151915287604051612cee9190615794565b60405180910390a250505b5080612d0481615a9b565b91505061299e565b50505050565b80336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612d975750336001600160a01b0316600a82604051612d5f9190615949565b908152604051908190036020019020600201546001600160a01b0316148015612d975750336000908152600b602052604090205460ff165b612db35760405162461bcd60e51b8152600401610c6490615965565b60105460ff1615612dd65760405162461bcd60e51b8152600401610c64906159a6565b6001600160a01b03831660009081526005602052604090206004015460ff16612e115760405162461bcd60e51b8152600401610c6490615ebc565b600a82604051612e219190615949565b9081526040519081900360200190206002015460ff600160a01b90910416612e5b5760405162461bcd60e51b8152600401610c6490615eec565b600c82604051612e6b9190615949565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff1615612edb5760405162461bcd60e51b815260206004820152601860248201527710db19585b995c88185b1c9958591e48185cdcda59db995960421b6044820152606401610c64565b6001600c83604051612eed9190615949565b90815260408051602092819003830190206001600160a01b0387166000908152908352818120805460ff1916941515949094179093556005825282206006018054600181018255908352912001612f448382615c23565b50600982604051612f559190615949565b908152604051602091819003820181208054600181018255600091825292902090910180546001600160a01b0319166001600160a01b038616179055600a90612f9f908490615949565b9081526040519081900360200190206005018054906000612fbf83615a9b565b9190505550826001600160a01b0316600080516020615fa683398151915283604051610d599190615794565b6060600882604051612ffd9190615949565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561305957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161303b575b50505050509050919050565b6001600160a01b0381166000908152600560205260408120600401548190819060ff166130a45760405162461bcd60e51b8152600401610c6490615ebc565b60005b60025481101561311b576000818152600660205260409020546001600160a01b0380871691160361310957836130dc81615a9b565b60008381526006602052604090206005015490955060ff16159050613109578261310581615a9b565b9350505b8061311381615a9b565b9150506130a7565b50821561313b578261312e836064615ab4565b6131389190615acb565b90505b9193909250565b80336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806131c75750336001600160a01b0316600a8260405161318f9190615949565b908152604051908190036020019020600201546001600160a01b03161480156131c75750336000908152600b602052604090205460ff165b6131e35760405162461bcd60e51b8152600401610c6490615965565b60105460ff16156132065760405162461bcd60e51b8152600401610c64906159a6565b60008351116132275760405162461bcd60e51b8152600401610c6490615d04565b600a826040516132379190615949565b9081526040519081900360200190206002015460ff600160a01b909104166132715760405162461bcd60e51b8152600401610c6490615eec565b60005b8351811015612d0c57600084828151811061329157613291615a6f565b6020908102919091018101516001600160a01b0381166000908152600590925260409091206004015490915060ff1680156133015750600c846040516132d79190615949565b90815260408051602092819003830190206001600160a01b0384166000908152925290205460ff16155b1561341f576001600c856040516133189190615949565b90815260408051602092819003830190206001600160a01b0385166000908152908352818120805460ff191694151594909417909355600582528220600601805460018101825590835291200161336f8582615c23565b506009846040516133809190615949565b908152604051602091819003820181208054600181018255600091825292902090910180546001600160a01b0319166001600160a01b038416179055600a906133ca908690615949565b90815260405190819003602001902060050180549060006133ea83615a9b565b9190505550806001600160a01b0316600080516020615fa6833981519152856040516134169190615794565b60405180910390a25b508061342a81615a9b565b915050613274565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461347a5760405162461bcd60e51b8152600401610c6490615f1d565b6001600160a01b03821660009081526004602052604090206005015460ff166134b55760405162461bcd60e51b8152600401610c6490615aed565b6001600160a01b03909116600090815260046020526040902060010155565b80336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806135595750336001600160a01b0316600a826040516135219190615949565b908152604051908190036020019020600201546001600160a01b03161480156135595750336000908152600b602052604090205460ff165b6135755760405162461bcd60e51b8152600401610c6490615965565b60105460ff16156135985760405162461bcd60e51b8152600401610c64906159a6565b600c826040516135a89190615949565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff166136285760405162461bcd60e51b8152602060048201526024808201527f436c65616e6572206e6f742061737369676e656420746f206e65696768626f726044820152631a1bdbd960e21b6064820152608401610c64565b6000600c8360405161363a9190615949565b90815260408051602092819003830190206001600160a01b0387166000908152908352818120805460ff19169415159490941790935560059091528120600601905b815481101561378b57836040516020016136969190615949565b604051602081830303815290604052805190602001208282815481106136be576136be615a6f565b906000526020600020016040516020016136d89190615d32565b6040516020818303038152906040528051906020012003613779578154829061370390600190615da8565b8154811061371357613713615a6f565b9060005260206000200182828154811061372f5761372f615a6f565b9060005260206000200190816137459190615dbb565b508180548061375657613756615e8f565b6001900381819060005260206000200160006137729190614ec9565b905561378b565b8061378381615a9b565b91505061367c565b50600060098460405161379e9190615949565b9081526020016040518091039020905060005b81548110156138b757856001600160a01b03168282815481106137d6576137d6615a6f565b6000918252602090912001546001600160a01b0316036138a5578154829061380090600190615da8565b8154811061381057613810615a6f565b9060005260206000200160009054906101000a90046001600160a01b031682828154811061384057613840615a6f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508180548061387e5761387e615e8f565b600082815260209020810160001990810180546001600160a01b03191690550190556138b7565b806138af81615a9b565b9150506137b1565b50600a846040516138c89190615949565b90815260405190819003602001902060050180549060006138e883615ea5565b9190505550846001600160a01b0316600080516020615fc683398151915285604051611c839190615794565b6060600f805480602002602001604051908101604052809291908181526020016000905b828210156139e4578382906000526020600020018054613957906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054613983906159d2565b80156139d05780601f106139a5576101008083540402835291602001916139d0565b820191906000526020600020905b8154815290600101906020018083116139b357829003601f168201915b505050505081526020019060010190613938565b50505050905090565b6000600c826040516139ff9190615949565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff1680613a655750826001600160a01b0316600a83604051613a479190615949565b908152604051908190036020019020600201546001600160a01b0316145b80613aa157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b9392505050565b600f8181548110613ab857600080fd5b906000526020600020016000915090508054613ad3906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054613aff906159d2565b8015613b4c5780601f10613b2157610100808354040283529160200191613b4c565b820191906000526020600020905b815481529060010190602001808311613b2f57829003601f168201915b505050505081565b6001600160a01b0383166000908152600460205260408120600501546060919060ff16613b935760405162461bcd60e51b8152600401610c6490615aed565b600083118015613ba4575060648311155b613bc05760405162461bcd60e51b8152600401610c6490615f44565b6000805b600254811015613c12576000818152600660205260409020600101546001600160a01b03808916911603613c005781613bfc81615a9b565b9250505b80613c0a81615a9b565b915050613bc4565b50808510613c505760005b604051908082528060200260200182016040528015613c46578160200160208202803683370190505b5092509050613d52565b8381613c5c8288615bac565b1115613c6f57613c6c8683615da8565b90505b6000816001600160401b03811115613c8957613c89614f1f565b604051908082528060200260200182016040528015613cb2578160200160208202803683370190505b50905060008060005b60025481108015613ccb57508483105b15613d47576000818152600660205260409020600101546001600160a01b03808d16911603613d3557898210613d275780848481518110613d0e57613d0e615a6f565b602090810291909101015282613d2381615a9b565b9350505b81613d3181615a9b565b9250505b80613d3f81615a9b565b915050613cbb565b509195509293505050505b935093915050565b60105460ff1615613d7d5760405162461bcd60e51b8152600401610c64906159a6565b3360009081526005602052604090206004015460ff1615613ddd5760405162461bcd60e51b815260206004820152601a60248201527910db19585b995c88185b1c9958591e481c9959da5cdd195c995960321b6044820152606401610c64565b3360009081526004602052604090206005015460ff1615613e4c5760405162461bcd60e51b815260206004820152602360248201527f4164647265737320616c7265616479207265676973746572656420617320686f60448201526275736560e81b6064820152608401610c64565b336000818152600560208190526040822080546001600160a01b03199081168517825560018083018590556064600284015560048301805460ff1916821790554293830193909355600e805480850182559085527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054909116909417909355805491613ed983615a9b565b9190505550613f1633600a6040518060400160405280601481526020017321b632b0b732b9102932b3b4b9ba3930ba34b7b760611b815250614ddf565b60405142815233907fdd834bc0e344533b42bfa014b5f8f8ae9d396bc5debb886b6bc56ee24c2ddf9e9060200160405180910390a250565b6060600e805480602002602001604051908101604052809291908181526020018280548015611ed5576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611eb7575050505050905090565b613ff96040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016060815260200160001515815260200160008152602001606081525090565b6001600160a01b03821660009081526005602052604090206004015460ff166140345760405162461bcd60e51b8152600401610c6490615ebc565b6001600160a01b03808316600090815260056020908152604091829020825160e08101845281549094168452600181015484830152600281015484840152600381018054845181850281018501909552808552919360608601939092908301828280156140c057602002820191906000526020600020905b8154815260200190600101908083116140ac575b505050505081526020016004820160009054906101000a900460ff161515151581526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b828210156141bf578382906000526020600020018054614132906159d2565b80601f016020809104026020016040519081016040528092919081815260200182805461415e906159d2565b80156141ab5780601f10614180576101008083540402835291602001916141ab565b820191906000526020600020905b81548152906001019060200180831161418e57829003601f168201915b505050505081526020019060010190614113565b505050915250909392505050565b6001600160a01b03811660009081526005602052604090206004015460609060ff1661420b5760405162461bcd60e51b8152600401610c6490615ebc565b6001600160a01b038216600090815260056020908152604080832060060180548251818502810185019093528083529193909284015b828210156142ed578382906000526020600020018054614260906159d2565b80601f016020809104026020016040519081016040528092919081815260200182805461428c906159d2565b80156142d95780601f106142ae576101008083540402835291602001916142d9565b820191906000526020600020905b8154815290600101906020018083116142bc57829003601f168201915b505050505081526020019060010190614241565b505050509050919050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146143405760405162461bcd60e51b8152600401610c6490615f1d565b6010805460ff19168215159081179091556040519081527f752d7e161ff5146f80e3820893176eb40532811e5e20400dfdde57455213706a9060200160405180910390a150565b6060600982604051612ffd9190615949565b6001600160a01b03811660009081526005602052604090206004015460609060ff166143d75760405162461bcd60e51b8152600401610c6490615ebc565b60006002546001600160401b038111156143f3576143f3614f1f565b60405190808252806020026020018201604052801561441c578160200160208202803683370190505b5090506000805b60025481101561448c576000818152600660205260409020546001600160a01b0380871691160361447a578083838151811061446157614461615a6f565b60209081029190910101528161447681615a9b565b9250505b8061448481615a9b565b915050614423565b506000816001600160401b038111156144a7576144a7614f1f565b6040519080825280602002602001820160405280156144d0578160200160208202803683370190505b50905060005b828110156121c5578381815181106144f0576144f0615a6f565b602002602001015182828151811061450a5761450a615a6f565b60209081029190910101528061451f81615a9b565b9150506144d6565b6001600160a01b0383166000908152600560205260408120600401546060919060ff166145665760405162461bcd60e51b8152600401610c6490615ebc565b600083118015614577575060648311155b6145935760405162461bcd60e51b8152600401610c6490615f44565b6000805b6002548110156145e2576000818152600660205260409020546001600160a01b038089169116036145d057816145cc81615a9b565b9250505b806145da81615a9b565b915050614597565b508085106145f1576000613c1d565b83816145fd8288615bac565b11156146105761460d8683615da8565b90505b6000816001600160401b0381111561462a5761462a614f1f565b604051908082528060200260200182016040528015614653578160200160208202803683370190505b50905060008060005b6002548110801561466c57508483105b15613d47576000818152600660205260409020546001600160a01b03808d169116036146d3578982106146c557808484815181106146ac576146ac615a6f565b6020908102919091010152826146c181615a9b565b9350505b816146cf81615a9b565b9250505b806146dd81615a9b565b91505061465c565b60105460ff16156147085760405162461bcd60e51b8152600401610c64906159a6565b60008351116147635760405162461bcd60e51b815260206004820152602160248201527f4e65696768626f72686f6f64206e616d652063616e6e6f7420626520656d70746044820152607960f81b6064820152608401610c64565b60008251116147b25760405162461bcd60e51b815260206004820152601b60248201527a4465736372697074696f6e2063616e6e6f7420626520656d70747960281b6044820152606401610c64565b6001600160a01b0381166147d85760405162461bcd60e51b8152600401610c6490615a40565b600a836040516147e89190615949565b9081526040519081900360200190208054614802906159d2565b15905061484f5760405162461bcd60e51b815260206004820152601b60248201527a4e65696768626f72686f6f6420616c72656164792065786973747360281b6044820152606401610c64565b6000600a846040516148619190615949565b90815260405190819003602001902090508061487d8582615c23565b506001810161488c8482615c23565b506002810180546001600160a81b0319166001600160a01b038416908117600160a01b179091554260038301556000908152600b60205260408120805460ff19166001908117909155600f805491820181559091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020161490d8582615c23565b50816001600160a01b0316846040516149269190615949565b604051908190038120428252907ff36227d4e0a75a4b5b4ba2bbf468614d1007c3770a1d73ac7da8145fee8bc6109060200160405180910390a350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146149ae5760405162461bcd60e51b8152600401610c6490615f1d565b6001600160a01b03821660009081526005602052604090206004015460ff166149e95760405162461bcd60e51b8152600401610c6490615ebc565b6001600160a01b03909116600090815260056020526040902060020155565b3360009081526005602052604090206004015460ff16614a3a5760405162461bcd60e51b8152600401610c6490615ebc565b60105460ff1615614a5d5760405162461bcd60e51b8152600401610c64906159a6565b6001600160a01b03831660009081526004602052604090206005015460ff16614a985760405162461bcd60e51b8152600401610c6490615aed565b81614ab55760405162461bcd60e51b8152600401610c6490615b45565b6000815111614ad65760405162461bcd60e51b8152600401610c6490615b79565b6001600160a01b03831660009081526004602052604081206002018054614afc906159d2565b80601f0160208091040260200160405190810160405280929190818152602001828054614b28906159d2565b8015614b755780601f10614b4a57610100808354040283529160200191614b75565b820191906000526020600020905b815481529060010190602001808311614b5857829003601f168201915b50505050509050600c81604051614b8c9190615949565b9081526040805160209281900383019020336000908152925290205460ff1680614be95750336001600160a01b0316600a82604051614bcb9190615949565b908152604051908190036020019020600201546001600160a01b0316145b80614c1c5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b614c7c5760405162461bcd60e51b815260206004820152602b60248201527f436c65616e6572206e6f7420617574686f72697a656420696e2074686973206e60448201526a195a59da189bdc9a1bdbd960aa1b6064820152608401610c64565b6002805460008181526006602052604090208054336001600160a01b03199182161782556001820180549091166001600160a01b0389161790554292810192909255600382018590559060048101614cd48582615c23565b506005808201805460ff19169055600682018390553360009081526020918252604080822060030180546001810182559083529290912090910186905551600a90614d20908590615949565b9081526040519081900360200190206006018054906000614d4083615a9b565b909155505060028054906000614d5583615a9b565b9190505550614d903360146040518060400160405280601281526020017123b0b93130b3b29021b7b63632b1ba34b7b760711b815250614ddf565b604080518681524260208201526001600160a01b03881691339185917f6abb0de111797db4aa016f586b051a7b88947ba2c320bea32058f7db7508d713910160405180910390a4505050505050565b6001600160a01b03831660009081526004602052604090206005015460ff1615614e39576001600160a01b03831660009081526004602052604081206001018054849290614e2e908490615bac565b90915550614e8e9050565b6001600160a01b03831660009081526005602052604090206004015460ff1615614e8e576001600160a01b03831660009081526005602052604081206001018054849290614e88908490615bac565b90915550505b826001600160a01b03167f4c3089477cda1ac100291a040b3ac97ff5f55b6d8b2acfb56a59b9419d95ce048383604051610d59929190615f8c565b508054614ed5906159d2565b6000825580601f10614ee5575050565b601f016020900490600052602060002090810190614f039190614f06565b50565b5b80821115614f1b5760008155600101614f07565b5090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614f5d57614f5d614f1f565b604052919050565b600082601f830112614f7657600080fd5b81356001600160401b03811115614f8f57614f8f614f1f565b614fa2601f8201601f1916602001614f35565b818152846020838601011115614fb757600080fd5b816020850160208301376000918101602001919091529392505050565b80358015158114614fe457600080fd5b919050565b60008060408385031215614ffc57600080fd5b82356001600160401b0381111561501257600080fd5b61501e85828601614f65565b92505061502d60208401614fd4565b90509250929050565b80356001600160a01b0381168114614fe457600080fd5b6000806040838503121561506057600080fd5b82356001600160401b0381111561507657600080fd5b61508285828601614f65565b92505061502d60208401615036565b6000602082840312156150a357600080fd5b81356001600160401b038111156150b957600080fd5b6150c584828501614f65565b949350505050565b6000806000606084860312156150e257600080fd5b833592506020840135915060408401356001600160401b0381111561510657600080fd5b61511286828701614f65565b9150509250925092565b60006020828403121561512e57600080fd5b5035919050565b60006020828403121561514757600080fd5b613aa182615036565b6000806040838503121561516357600080fd5b82356001600160401b0381111561517957600080fd5b61518585828601614f65565b95602094909401359450505050565b60005b838110156151af578181015183820152602001615197565b50506000910152565b600081518084526151d0816020860160208601615194565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015615214578151875295820195908201906001016151f8565b509495945050505050565b6020815260018060a01b038251166020820152602082015160408201526000604083015160e060608401526152586101008401826151b8565b905060ff60608501511660808401526080840151601f198483030160a085015261528282826151e4565b91505060a0840151151560c084015260c084015160e08401528091505092915050565b600080604083850312156152b857600080fd5b82356001600160401b038111156152ce57600080fd5b6152da85828601614f65565b925050602083013560ff811681146152f157600080fd5b809150509250929050565b6001600160a01b03888116825287166020820152604081018690526060810185905260e060808201819052600090615336908301866151b8565b93151560a08301525060c0015295945050505050565b6000806040838503121561535f57600080fd5b61536883615036565b915060208301356001600160401b0381111561538357600080fd5b61538f85828601614f65565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156153da5783516001600160a01b0316835292840192918401916001016153b5565b50909695505050505050565b60208152600060018060a01b03808451166020840152806020850151166040840152506040830151606083015260608301516080830152608083015160e060a08401526154376101008401826151b8565b905060a0840151151560c084015260c084015160e08401528091505092915050565b602081526000613aa160208301846151e4565b60018060a01b038716815285602082015260c06040820152600061549360c08301876151b8565b60ff95909516606083015250911515608083015260a0909101529392505050565b6001600160a01b038916815260208101889052610100604082018190526000906154e08382018a6151b8565b905082810360608401526154f481896151b8565b9050828103608084015261550881886151b8565b60ff9690961660a0840152505060c081019290925260e09091015295945050505050565b60006101208083526155408184018d6151b8565b90508281036020840152615554818c6151b8565b6001600160a01b039a909a16604084015250509515156060870152608086019490945260a085019290925260c084015260e08301526101009091015292915050565b60208152600082516101208060208501526155b56101408501836151b8565b91506020850151601f198584030160408601526155d283826151b8565b92505060408501516155ef60608601826001600160a01b03169052565b506060850151801515608086015250608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b6000806040838503121561565157600080fd5b82356001600160401b038082111561566857600080fd5b818501915085601f83011261567c57600080fd5b813560208282111561569057615690614f1f565b8160051b61569f828201614f35565b928352848101820192828101908a8511156156b957600080fd5b958301955b848710156156de576156cf87615036565b825295830195908301906156be565b97505050860135925050808211156156f557600080fd5b5061538f85828601614f65565b6000806040838503121561571557600080fd5b61571e83615036565b946020939093013593505050565b600081518084526020808501808196508360051b8101915082860160005b858110156157745782840389526157628483516151b8565b9885019893509084019060010161574a565b5091979650505050505050565b602081526000613aa1602083018461572c565b602081526000613aa160208301846151b8565b6000806000606084860312156157bc57600080fd5b6157c584615036565b95602085013595506040909401359392505050565b6040815260006157ed60408301856151e4565b90508260208301529392505050565b6020815260018060a01b03825116602082015260208201516040820152604082015160608201526000606083015160e0608084015261583f6101008401826151e4565b90506080840151151560a084015260a084015160c084015260c0840151601f198483030160e0850152615872828261572c565b95945050505050565b60006020828403121561588d57600080fd5b613aa182614fd4565b6000806000606084860312156158ab57600080fd5b83356001600160401b03808211156158c257600080fd5b6158ce87838801614f65565b945060208601359150808211156158e457600080fd5b506158f186828701614f65565b92505061590060408501615036565b90509250925092565b60008060006060848603121561591e57600080fd5b61592784615036565b92506020840135915060408401356001600160401b0381111561510657600080fd5b6000825161595b818460208701615194565b9190910192915050565b60208082526021908201527f4e6f7420617574686f72697a6564206e65696768626f72686f6f642061646d696040820152603760f91b606082015260800190565b60208082526012908201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b604082015260600190565b600181811c908216806159e657607f821691505b602082108103615a0657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527913995a59da189bdc9a1bdbd908191bd95cdb89dd08195e1a5cdd60321b604082015260600190565b602080825260159082015274496e76616c69642061646d696e206164647265737360581b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201615aad57615aad615a85565b5060010190565b808202811582820484141761192457611924615a85565b600082615ae857634e487b7160e01b600052601260045260246000fd5b500490565b602080825260149082015273121bdd5cd9481b9bdd081c9959da5cdd195c995960621b604082015260600190565b60208082526010908201526f125b9d985b1a5908195d995b9d08125160821b604082015260600190565b6020808252601a9082015279496d61676520686173682063616e6e6f7420626520656d70747960301b604082015260600190565b602080825260199082015278496d616765205552492063616e6e6f7420626520656d70747960381b604082015260600190565b8082018082111561192457611924615a85565b601f821115615c0957600081815260208120601f850160051c81016020861015615be65750805b601f850160051c820191505b81811015615c0557828155600101615bf2565b5050505b505050565b600019600383901b1c191660019190911b1790565b81516001600160401b03811115615c3c57615c3c614f1f565b615c5081615c4a84546159d2565b84615bbf565b602080601f831160018114615c7f5760008415615c6d5750858301515b615c778582615c0e565b865550615c05565b600085815260208120601f198616915b82811015615cae57888601518255948401946001909101908401615c8f565b5085821015615ccc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000615cef60608301866151b8565b60ff9490941660208301525060400152919050565b602080825260149082015273139bc818db19585b995c9cc81c1c9bdd9a59195960621b604082015260600190565b6000808354615d40816159d2565b60018281168015615d585760018114615d6d57615d9c565b60ff1984168752821515830287019450615d9c565b8760005260208060002060005b85811015615d935781548a820152908401908201615d7a565b50505082870194505b50929695505050505050565b8181038181111561192457611924615a85565b818103615dc6575050565b615dd082546159d2565b6001600160401b03811115615de757615de7614f1f565b615df581615c4a84546159d2565b6000601f821160018114615e235760008315615e115750848201545b615e1b8482615c0e565b855550615e88565b600085815260209020601f19841690600086815260209020845b83811015615e5d5782860154825560019586019590910190602001615e3d565b5085831015615e7b5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b600081615eb457615eb4615a85565b506000190190565b60208082526016908201527510db19585b995c881b9bdd081c9959da5cdd195c995960521b604082015260600190565b6020808252601790820152764e65696768626f72686f6f64206e6f742061637469766560481b604082015260600190565b6020808252600d908201526c2737ba103a34329037bbb732b960991b604082015260600190565b60208082526028908201527f496e76616c6964206c696d69743a206d757374206265206265747765656e2031604082015267020616e64203130360c41b606082015260800190565b8281526040602082015260006150c560408301846151b856fe51d702b24d103745e0d20301c211e010c409a7c9e44ee6f4670d99cde9ea3eb5ee186675c6b8e9fd58ce1f6273a3a8f21e41653bcf8a4041f606edc00099c202a2646970667358221220d17daa8e585bb613a2fae6f3cb228e26c8b277e633734f6d2dc9e89a173e6f6964736f6c63430008140033",
  "devdoc": {
    "author": "CleanChain Team",
    "kind": "dev",
    "methods": {
      "assignCleanerToNeighborhood(address,string)": {
        "params": {
          "_cleaner": "Address of the cleaner",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "assignNeighborhoodAdmin(string,address)": {
        "params": {
          "_neighborhood": "Name of the neighborhood",
          "_newAdmin": "Address of the new admin"
        }
      },
      "batchAssignCleanersToNeighborhood(address[],string)": {
        "params": {
          "_cleaners": "Array of cleaner addresses",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "batchRemoveCleanersFromNeighborhood(address[],string)": {
        "params": {
          "_cleaners": "Array of cleaner addresses",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "confirmGarbageCollection(uint256,bytes32,string)": {
        "params": {
          "_eventId": "ID of the collection event to confirm",
          "_imageHash": "Hash of the validation image taken by the house",
          "_imageURI": "URI pointing to the house's validation image"
        }
      },
      "getAllNeighborhoods()": {
        "returns": {
          "_0": "Array of neighborhood names"
        }
      },
      "getAllRegisteredCleaners()": {
        "returns": {
          "_0": "Array of all registered cleaner addresses"
        }
      },
      "getAllRegisteredHouses()": {
        "returns": {
          "_0": "Array of all registered house addresses"
        }
      },
      "getCleaner(address)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner"
        },
        "returns": {
          "_0": "Cleaner struct containing all cleaner information"
        }
      },
      "getCleanerCollectionEvents(address)": {
        "details": "This function may run out of gas with large datasets. Use getCleanerCollectionEventsPaginated instead.",
        "params": {
          "_cleanerAddress": "Address of the cleaner"
        },
        "returns": {
          "_0": "Array of event IDs for the cleaner"
        }
      },
      "getCleanerCollectionEventsPaginated(address,uint256,uint256)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner",
          "_limit": "Maximum number of events to return",
          "_offset": "Starting index for pagination"
        },
        "returns": {
          "_0": "Array of event IDs for the cleaner",
          "_1": "Total count of events for this cleaner"
        }
      },
      "getCleanerCollectionStats(address)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner"
        },
        "returns": {
          "confirmationRate": "Percentage of confirmed collections (0-100)",
          "confirmedEvents": "Number of confirmed collection events",
          "totalEvents": "Total collection events by the cleaner"
        }
      },
      "getCleanerNeighborhoods(address)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner"
        },
        "returns": {
          "_0": "Array of neighborhood names where cleaner is authorized"
        }
      },
      "getCleanersInNeighborhood(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Array of cleaner addresses in the neighborhood"
        }
      },
      "getCollectionEvent(uint256)": {
        "params": {
          "_eventId": "ID of the collection event"
        },
        "returns": {
          "_0": "CollectionEvent struct containing event details"
        }
      },
      "getHouse(address)": {
        "params": {
          "_houseAddress": "Address of the house"
        },
        "returns": {
          "_0": "House struct containing all house information"
        }
      },
      "getHouseCollectionEvents(address)": {
        "details": "This function may run out of gas with large datasets. Use getHouseCollectionEventsPaginated instead.",
        "params": {
          "_houseAddress": "Address of the house"
        },
        "returns": {
          "_0": "Array of event IDs for the house"
        }
      },
      "getHouseCollectionEventsPaginated(address,uint256,uint256)": {
        "params": {
          "_houseAddress": "Address of the house",
          "_limit": "Maximum number of events to return",
          "_offset": "Starting index for pagination"
        },
        "returns": {
          "_0": "Array of event IDs for the house",
          "_1": "Total count of events for this house"
        }
      },
      "getHouseCollectionStats(address)": {
        "params": {
          "_houseAddress": "Address of the house"
        },
        "returns": {
          "confirmedEvents": "Number of confirmed collection events",
          "pendingEvents": "Number of pending (unconfirmed) collection events",
          "totalEvents": "Total collection events for the house"
        }
      },
      "getHousesInNeighborhood(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Array of house addresses in the neighborhood"
        }
      },
      "getNeighborhood(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Neighborhood struct containing all neighborhood information"
        }
      },
      "getNeighborhoodStats(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "confirmationRate": "Percentage of confirmed collections (0-100)",
          "confirmedCollections": "Number of confirmed collections",
          "totalCleaners": "Number of cleaners assigned to neighborhood",
          "totalCollections": "Total collection events in neighborhood",
          "totalHouses": "Number of houses in neighborhood"
        }
      },
      "getTotalCleaners()": {
        "returns": {
          "_0": "Total number of cleaners"
        }
      },
      "getTotalHouses()": {
        "returns": {
          "_0": "Total number of houses"
        }
      },
      "getTotalNeighborhoods()": {
        "returns": {
          "_0": "Total number of neighborhoods"
        }
      },
      "isCleanerAlreadyAssigned(address,string)": {
        "params": {
          "_cleaner": "Address of the cleaner",
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Boolean indicating if cleaner is already assigned"
        }
      },
      "isCleanerAuthorized(address,string)": {
        "params": {
          "_cleaner": "Address of the cleaner",
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Boolean indicating if cleaner is authorized"
        }
      },
      "isNeighborhoodAdmin(address)": {
        "params": {
          "_address": "Address to check"
        },
        "returns": {
          "_0": "Boolean indicating if address is a neighborhood admin"
        }
      },
      "isPaused()": {
        "returns": {
          "_0": "Boolean indicating if contract is paused"
        }
      },
      "isRegisteredCleaner(address)": {
        "params": {
          "_address": "Address to check"
        },
        "returns": {
          "_0": "Boolean indicating if address is a registered cleaner"
        }
      },
      "isRegisteredHouse(address)": {
        "params": {
          "_address": "Address to check"
        },
        "returns": {
          "_0": "Boolean indicating if address is a registered house"
        }
      },
      "logGarbageCollection(address,bytes32,string)": {
        "params": {
          "_houseAddress": "Address of the house where garbage was collected",
          "_imageHash": "Hash of the image taken as proof of collection",
          "_imageURI": "URI pointing to the off-chain stored image"
        }
      },
      "pauseContract(bool)": {
        "params": {
          "_paused": "New pause state"
        }
      },
      "registerHouse(string,uint8)": {
        "params": {
          "_neighborhood": "The neighborhood where the house is located",
          "_residents": "Number of residents in the house"
        }
      },
      "registerNeighborhood(string,string,address)": {
        "params": {
          "_admin": "Address of the neighborhood admin",
          "_description": "Description of the neighborhood",
          "_name": "Name of the neighborhood"
        }
      },
      "removeCleanerFromNeighborhood(address,string)": {
        "params": {
          "_cleaner": "Address of the cleaner",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "setNeighborhoodStatus(string,bool)": {
        "params": {
          "_isActive": "New status for the neighborhood",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "updateCleanerReputation(address,uint256)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner",
          "_reputation": "New reputation value"
        }
      },
      "updateHousePoints(address,uint256)": {
        "params": {
          "_houseAddress": "Address of the house",
          "_points": "New points value"
        }
      },
      "validateNeighborhoodExists(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood to check"
        },
        "returns": {
          "_0": "Boolean indicating if neighborhood exists and is active"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assignCleanerToNeighborhood(address,string)": {
        "notice": "Assign cleaner to neighborhood (by admin or owner)"
      },
      "assignNeighborhoodAdmin(string,address)": {
        "notice": "Assign or change neighborhood admin"
      },
      "batchAssignCleanersToNeighborhood(address[],string)": {
        "notice": "Batch assign multiple cleaners to a neighborhood"
      },
      "batchRemoveCleanersFromNeighborhood(address[],string)": {
        "notice": "Batch remove multiple cleaners from a neighborhood"
      },
      "confirmGarbageCollection(uint256,bytes32,string)": {
        "notice": "Confirm garbage collection by house with validation"
      },
      "getAllNeighborhoods()": {
        "notice": "Get all registered neighborhoods"
      },
      "getAllRegisteredCleaners()": {
        "notice": "Get all registered cleaner addresses"
      },
      "getAllRegisteredHouses()": {
        "notice": "Get all registered house addresses"
      },
      "getCleaner(address)": {
        "notice": "Get cleaner information by address"
      },
      "getCleanerCollectionEvents(address)": {
        "notice": "Get all collection events for a specific cleaner (DEPRECATED - use paginated version)"
      },
      "getCleanerCollectionEventsPaginated(address,uint256,uint256)": {
        "notice": "Get collection events for a cleaner with pagination to avoid gas issues"
      },
      "getCleanerCollectionStats(address)": {
        "notice": "Get collection statistics for a cleaner"
      },
      "getCleanerNeighborhoods(address)": {
        "notice": "Get neighborhoods assigned to a cleaner"
      },
      "getCleanersInNeighborhood(string)": {
        "notice": "Get all cleaners in a neighborhood"
      },
      "getCollectionEvent(uint256)": {
        "notice": "Get collection event details by ID"
      },
      "getHouse(address)": {
        "notice": "Get house information by address"
      },
      "getHouseCollectionEvents(address)": {
        "notice": "Get all collection events for a specific house (DEPRECATED - use paginated version)"
      },
      "getHouseCollectionEventsPaginated(address,uint256,uint256)": {
        "notice": "Get collection events for a house with pagination to avoid gas issues"
      },
      "getHouseCollectionStats(address)": {
        "notice": "Get collection statistics for a house"
      },
      "getHousesInNeighborhood(string)": {
        "notice": "Get all houses in a neighborhood"
      },
      "getNeighborhood(string)": {
        "notice": "Get neighborhood information"
      },
      "getNeighborhoodStats(string)": {
        "notice": "Get neighborhood statistics"
      },
      "getTotalCleaners()": {
        "notice": "Get total number of registered cleaners"
      },
      "getTotalHouses()": {
        "notice": "Get total number of registered houses"
      },
      "getTotalNeighborhoods()": {
        "notice": "Get total number of registered neighborhoods"
      },
      "isCleanerAlreadyAssigned(address,string)": {
        "notice": "FIXED: Check for duplicate cleaner assignment more efficiently"
      },
      "isCleanerAuthorized(address,string)": {
        "notice": "Check if cleaner is authorized in neighborhood"
      },
      "isNeighborhoodAdmin(address)": {
        "notice": "Check if address is a neighborhood admin"
      },
      "isPaused()": {
        "notice": "Get contract pause status"
      },
      "isRegisteredCleaner(address)": {
        "notice": "Check if an address is a registered cleaner"
      },
      "isRegisteredHouse(address)": {
        "notice": "Check if an address is a registered house"
      },
      "logGarbageCollection(address,bytes32,string)": {
        "notice": "Log garbage collection by cleaner with image proof"
      },
      "pauseContract(bool)": {
        "notice": "Pause or unpause the contract (emergency function)"
      },
      "registerCleaner()": {
        "notice": "Register a cleaner with wallet public key"
      },
      "registerHouse(string,uint8)": {
        "notice": "Register a house with wallet public key and metadata"
      },
      "registerNeighborhood(string,string,address)": {
        "notice": "Register a new neighborhood with admin"
      },
      "removeCleanerFromNeighborhood(address,string)": {
        "notice": "Remove cleaner from neighborhood"
      },
      "setNeighborhoodStatus(string,bool)": {
        "notice": "Activate or deactivate a neighborhood"
      },
      "updateCleanerReputation(address,uint256)": {
        "notice": "Update cleaner reputation (only owner)"
      },
      "updateHousePoints(address,uint256)": {
        "notice": "Update house points (only owner)"
      },
      "validateNeighborhoodExists(string)": {
        "notice": "FIXED: Validate that a neighborhood exists before operations"
      }
    },
    "notice": "CleanChain - Decentralized Garbage Collection Verification Platform A smart contract for tracking, verifying, and incentivizing neighborhood garbage collection",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "totalHouses",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "totalCleaners",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "totalCollectionEvents",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "totalComplaints",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 108,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "houses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(House)32_storage)"
      },
      {
        "astId": 113,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "cleaners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Cleaner)49_storage)"
      },
      {
        "astId": 118,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "collectionEvents",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(CollectionEvent)64_storage)"
      },
      {
        "astId": 123,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "complaints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Complaint)84_storage)"
      },
      {
        "astId": 128,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "neighborhoodHouses",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 133,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "neighborhoodCleaners",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 138,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "neighborhoods",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Neighborhood)103_storage)"
      },
      {
        "astId": 142,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "neighborhoodAdmins",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 148,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "cleanerNeighborhoodAccess",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 151,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "registeredHouses",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 154,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "registeredCleaners",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 157,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "registeredNeighborhoods",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 160,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "contractPaused",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Cleaner)49_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CleanChain.Cleaner)",
        "numberOfBytes": "32",
        "value": "t_struct(Cleaner)49_storage"
      },
      "t_mapping(t_address,t_struct(House)32_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CleanChain.House)",
        "numberOfBytes": "32",
        "value": "t_struct(House)32_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Neighborhood)103_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct CleanChain.Neighborhood)",
        "numberOfBytes": "32",
        "value": "t_struct(Neighborhood)103_storage"
      },
      "t_mapping(t_uint256,t_struct(CollectionEvent)64_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CleanChain.CollectionEvent)",
        "numberOfBytes": "32",
        "value": "t_struct(CollectionEvent)64_storage"
      },
      "t_mapping(t_uint256,t_struct(Complaint)84_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CleanChain.Complaint)",
        "numberOfBytes": "32",
        "value": "t_struct(Complaint)84_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Cleaner)49_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.Cleaner",
        "members": [
          {
            "astId": 34,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 36,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "points",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 38,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "reputation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 41,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "collectionHashes",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 43,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "isRegistered",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 45,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "registrationTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 48,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "assignedNeighborhoods",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(CollectionEvent)64_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.CollectionEvent",
        "members": [
          {
            "astId": 51,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "cleaner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 53,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "house",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 55,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 57,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "imageHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 59,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "imageURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 61,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "confirmedByHouse",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 63,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "eventId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Complaint)84_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.Complaint",
        "members": [
          {
            "astId": 66,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "reporter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 68,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "imageHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 70,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "imageURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 72,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "location",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 74,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "neighborhood",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 77,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "validators",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 79,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 81,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "timestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 83,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "complaintId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(House)32_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.House",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "points",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "neighborhood",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 24,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "residents",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 27,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "collectionHashes",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 29,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "isRegistered",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 31,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "registrationTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Neighborhood)103_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.Neighborhood",
        "members": [
          {
            "astId": 86,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 88,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 90,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "admin",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 92,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "isActive",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 94,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "registrationTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 96,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "totalHouses",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 98,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "totalCleaners",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 100,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "totalCollections",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 102,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "confirmedCollections",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}