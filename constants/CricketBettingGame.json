{"abi":[{"type":"constructor","inputs":[{"name":"_teamA","type":"string","internalType":"string"},{"name":"_teamB","type":"string","internalType":"string"},{"name":"_matchId","type":"uint256","internalType":"uint256"},{"name":"_owner","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"TOTAL_BALLS","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balls","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"ballNumber","type":"uint256","internalType":"uint256"},{"name":"state","type":"uint8","internalType":"enum CricketBettingGame.BallState"},{"name":"result","type":"uint8","internalType":"enum CricketBettingGame.BallOutcome"},{"name":"totalPool","type":"uint256","internalType":"uint256"},{"name":"uniqueBettorCount","type":"uint256","internalType":"uint256"},{"name":"distributed","type":"bool","internalType":"bool"},{"name":"refunded","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"cancelBall","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"},{"name":"_reason","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"closeBall","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"currentBall","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"emergencyPause","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"factory","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getBallBettingDetails","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"boundaryBets","type":"uint256","internalType":"uint256"},{"name":"wicketBets","type":"uint256","internalType":"uint256"},{"name":"dotBallBets","type":"uint256","internalType":"uint256"},{"name":"oneRunBets","type":"uint256","internalType":"uint256"},{"name":"twoRunsBets","type":"uint256","internalType":"uint256"},{"name":"extrasBets","type":"uint256","internalType":"uint256"},{"name":"totalPool","type":"uint256","internalType":"uint256"},{"name":"totalBettors","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBallInfo","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"state","type":"uint8","internalType":"enum CricketBettingGame.BallState"},{"name":"result","type":"uint8","internalType":"enum CricketBettingGame.BallOutcome"},{"name":"totalPool","type":"uint256","internalType":"uint256"},{"name":"outcomeBets","type":"uint256[6]","internalType":"uint256[6]"},{"name":"uniqueBettorCount","type":"uint256","internalType":"uint256"},{"name":"distributed","type":"bool","internalType":"bool"},{"name":"refunded","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"getBallOutcomeString","inputs":[{"name":"_outcome","type":"uint8","internalType":"enum CricketBettingGame.BallOutcome"}],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"},{"type":"function","name":"getContractBalance","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMatchInfo","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"},{"name":"","type":"string","internalType":"string"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMultipleBallsInfo","inputs":[{"name":"_startBall","type":"uint256","internalType":"uint256"},{"name":"_endBall","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"states","type":"uint8[]","internalType":"enum CricketBettingGame.BallState[]"},{"name":"results","type":"uint8[]","internalType":"enum CricketBettingGame.BallOutcome[]"},{"name":"totalPools","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getUserBalance","inputs":[{"name":"_user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getUserBetForBall","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"},{"name":"_user","type":"address","internalType":"address"},{"name":"_outcome","type":"uint8","internalType":"enum CricketBettingGame.BallOutcome"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getUserTotalBetForBall","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"},{"name":"_user","type":"address","internalType":"address"}],"outputs":[{"name":"totalBet","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"matchId","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"openBall","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"placeBet","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"},{"name":"_outcome","type":"uint8","internalType":"enum CricketBettingGame.BallOutcome"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"placeBets","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"},{"name":"_outcomes","type":"uint8[]","internalType":"enum CricketBettingGame.BallOutcome[]"},{"name":"_amounts","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"reportBallResult","inputs":[{"name":"_ballNumber","type":"uint256","internalType":"uint256"},{"name":"_result","type":"uint8","internalType":"enum CricketBettingGame.BallOutcome"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"teamA","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"teamB","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"userBalances","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"withdraw","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"BallCancelled","inputs":[{"name":"ballNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"reason","type":"string","indexed":false,"internalType":"string"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"BallClosed","inputs":[{"name":"ballNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"BallOpened","inputs":[{"name":"ballNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"BallResult","inputs":[{"name":"ballNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"result","type":"uint8","indexed":false,"internalType":"enum CricketBettingGame.BallOutcome"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"BetPlaced","inputs":[{"name":"ballNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"bettor","type":"address","indexed":true,"internalType":"address"},{"name":"outcome","type":"uint8","indexed":false,"internalType":"enum CricketBettingGame.BallOutcome"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"BetsRefunded","inputs":[{"name":"ballNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"totalRefunded","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"bettorsCount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"MatchCompleted","inputs":[{"name":"matchId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"WinningsDistributed","inputs":[{"name":"ballNumber","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"winningOutcome","type":"uint8","indexed":false,"internalType":"enum CricketBettingGame.BallOutcome"},{"name":"totalPool","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"winnersCount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"","sourceMap":"103:17051:28:-:0;;;369:1;340:30;;2679:265;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2825:6;2817:5;:14;;;;;;:::i;:::-;;2849:6;2841:5;:14;;;;;;:::i;:::-;;2875:8;2865:7;:18;;;;2901:6;2893:5;;:14;;;;;;;;;;;;;;;;;;2927:10;2917:7;;:20;;;;;;;;;;;;;;;;;;2679:265;;;;103:17051;;7:75:30;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:139::-;1699:6;1694:3;1689;1683:23;1740:1;1731:6;1726:3;1722:16;1715:27;1610:139;;;:::o;1755:434::-;1844:5;1869:66;1885:49;1927:6;1885:49;:::i;:::-;1869:66;:::i;:::-;1860:75;;1958:6;1951:5;1944:21;1996:4;1989:5;1985:16;2034:3;2025:6;2020:3;2016:16;2013:25;2010:112;;;2041:79;;:::i;:::-;2010:112;2131:52;2176:6;2171:3;2166;2131:52;:::i;:::-;1850:339;1755:434;;;;;:::o;2209:355::-;2276:5;2325:3;2318:4;2310:6;2306:17;2302:27;2292:122;;2333:79;;:::i;:::-;2292:122;2443:6;2437:13;2468:90;2554:3;2546:6;2539:4;2531:6;2527:17;2468:90;:::i;:::-;2459:99;;2282:282;2209:355;;;;:::o;2570:77::-;2607:7;2636:5;2625:16;;2570:77;;;:::o;2653:122::-;2726:24;2744:5;2726:24;:::i;:::-;2719:5;2716:35;2706:63;;2765:1;2762;2755:12;2706:63;2653:122;:::o;2781:143::-;2838:5;2869:6;2863:13;2854:22;;2885:33;2912:5;2885:33;:::i;:::-;2781:143;;;;:::o;2930:126::-;2967:7;3007:42;3000:5;2996:54;2985:65;;2930:126;;;:::o;3062:96::-;3099:7;3128:24;3146:5;3128:24;:::i;:::-;3117:35;;3062:96;;;:::o;3164:122::-;3237:24;3255:5;3237:24;:::i;:::-;3230:5;3227:35;3217:63;;3276:1;3273;3266:12;3217:63;3164:122;:::o;3292:143::-;3349:5;3380:6;3374:13;3365:22;;3396:33;3423:5;3396:33;:::i;:::-;3292:143;;;;:::o;3441:1166::-;3558:6;3566;3574;3582;3631:3;3619:9;3610:7;3606:23;3602:33;3599:120;;;3638:79;;:::i;:::-;3599:120;3779:1;3768:9;3764:17;3758:24;3809:18;3801:6;3798:30;3795:117;;;3831:79;;:::i;:::-;3795:117;3936:74;4002:7;3993:6;3982:9;3978:22;3936:74;:::i;:::-;3926:84;;3729:291;4080:2;4069:9;4065:18;4059:25;4111:18;4103:6;4100:30;4097:117;;;4133:79;;:::i;:::-;4097:117;4238:74;4304:7;4295:6;4284:9;4280:22;4238:74;:::i;:::-;4228:84;;4030:292;4361:2;4387:64;4443:7;4434:6;4423:9;4419:22;4387:64;:::i;:::-;4377:74;;4332:129;4500:2;4526:64;4582:7;4573:6;4562:9;4558:22;4526:64;:::i;:::-;4516:74;;4471:129;3441:1166;;;;;;;:::o;4613:99::-;4665:6;4699:5;4693:12;4683:22;;4613:99;;;:::o;4718:180::-;4766:77;4763:1;4756:88;4863:4;4860:1;4853:15;4887:4;4884:1;4877:15;4904:320;4948:6;4985:1;4979:4;4975:12;4965:22;;5032:1;5026:4;5022:12;5053:18;5043:81;;5109:4;5101:6;5097:17;5087:27;;5043:81;5171:2;5163:6;5160:14;5140:18;5137:38;5134:84;;5190:18;;:::i;:::-;5134:84;4955:269;4904:320;;;:::o;5230:141::-;5279:4;5302:3;5294:11;;5325:3;5322:1;5315:14;5359:4;5356:1;5346:18;5338:26;;5230:141;;;:::o;5377:93::-;5414:6;5461:2;5456;5449:5;5445:14;5441:23;5431:33;;5377:93;;;:::o;5476:107::-;5520:8;5570:5;5564:4;5560:16;5539:37;;5476:107;;;;:::o;5589:393::-;5658:6;5708:1;5696:10;5692:18;5731:97;5761:66;5750:9;5731:97;:::i;:::-;5849:39;5879:8;5868:9;5849:39;:::i;:::-;5837:51;;5921:4;5917:9;5910:5;5906:21;5897:30;;5970:4;5960:8;5956:19;5949:5;5946:30;5936:40;;5665:317;;5589:393;;;;;:::o;5988:60::-;6016:3;6037:5;6030:12;;5988:60;;;:::o;6054:142::-;6104:9;6137:53;6155:34;6164:24;6182:5;6164:24;:::i;:::-;6155:34;:::i;:::-;6137:53;:::i;:::-;6124:66;;6054:142;;;:::o;6202:75::-;6245:3;6266:5;6259:12;;6202:75;;;:::o;6283:269::-;6393:39;6424:7;6393:39;:::i;:::-;6454:91;6503:41;6527:16;6503:41;:::i;:::-;6495:6;6488:4;6482:11;6454:91;:::i;:::-;6448:4;6441:105;6359:193;6283:269;;;:::o;6558:73::-;6603:3;6624:1;6617:8;;6558:73;:::o;6637:189::-;6714:32;;:::i;:::-;6755:65;6813:6;6805;6799:4;6755:65;:::i;:::-;6690:136;6637:189;;:::o;6832:186::-;6892:120;6909:3;6902:5;6899:14;6892:120;;;6963:39;7000:1;6993:5;6963:39;:::i;:::-;6936:1;6929:5;6925:13;6916:22;;6892:120;;;6832:186;;:::o;7024:543::-;7125:2;7120:3;7117:11;7114:446;;;7159:38;7191:5;7159:38;:::i;:::-;7243:29;7261:10;7243:29;:::i;:::-;7233:8;7229:44;7426:2;7414:10;7411:18;7408:49;;;7447:8;7432:23;;7408:49;7470:80;7526:22;7544:3;7526:22;:::i;:::-;7516:8;7512:37;7499:11;7470:80;:::i;:::-;7129:431;;7114:446;7024:543;;;:::o;7573:117::-;7627:8;7677:5;7671:4;7667:16;7646:37;;7573:117;;;;:::o;7696:169::-;7740:6;7773:51;7821:1;7817:6;7809:5;7806:1;7802:13;7773:51;:::i;:::-;7769:56;7854:4;7848;7844:15;7834:25;;7747:118;7696:169;;;;:::o;7870:295::-;7946:4;8092:29;8117:3;8111:4;8092:29;:::i;:::-;8084:37;;8154:3;8151:1;8147:11;8141:4;8138:21;8130:29;;7870:295;;;;:::o;8170:1395::-;8287:37;8320:3;8287:37;:::i;:::-;8389:18;8381:6;8378:30;8375:56;;;8411:18;;:::i;:::-;8375:56;8455:38;8487:4;8481:11;8455:38;:::i;:::-;8540:67;8600:6;8592;8586:4;8540:67;:::i;:::-;8634:1;8658:4;8645:17;;8690:2;8682:6;8679:14;8707:1;8702:618;;;;9364:1;9381:6;9378:77;;;9430:9;9425:3;9421:19;9415:26;9406:35;;9378:77;9481:67;9541:6;9534:5;9481:67;:::i;:::-;9475:4;9468:81;9337:222;8672:887;;8702:618;8754:4;8750:9;8742:6;8738:22;8788:37;8820:4;8788:37;:::i;:::-;8847:1;8861:208;8875:7;8872:1;8869:14;8861:208;;;8954:9;8949:3;8945:19;8939:26;8931:6;8924:42;9005:1;8997:6;8993:14;8983:24;;9052:2;9041:9;9037:18;9024:31;;8898:4;8895:1;8891:12;8886:17;;8861:208;;;9097:6;9088:7;9085:19;9082:179;;;9155:9;9150:3;9146:19;9140:26;9198:48;9240:4;9232:6;9228:17;9217:9;9198:48;:::i;:::-;9190:6;9183:64;9105:156;9082:179;9307:1;9303;9295:6;9291:14;9287:22;9281:4;9274:36;8709:611;;;8672:887;;8262:1303;;;8170:1395;;:::o;103:17051:28:-;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405260043610610180575f3560e01c80636c21e514116100d057806390004781116100895780639e4f372b116100635780639e4f372b1461057f578063c45a0155146105bb578063dba71be6146105e5578063edfbcba31461060f57610180565b806390004781146104e957806398c40f351461052b57806399892e471461055557610180565b80636c21e514146103dd5780636e777921146104055780636f9fb98a14610441578063826df9aa1461046b5780638aa7c3e8146104955780638da5cb5b146104bf57610180565b80633e98275f1161013d57806351858e271161011757806351858e271461032157806353be326a1461033757806355b006371461037957806367d85375146103b557610180565b80633e98275f1461028b57806342c4ee5d146102c957806347734892146102e557610180565b806303edf91414610184578063063c67c2146101a0578063162523b3146101ce57806326224c64146101f65780633371c0bf146102325780633ccfd60b14610275575b5f5ffd5b61019e6004803603810190610199919061356c565b610637565b005b3480156101ab575f5ffd5b506101b4610ae2565b6040516101c5959493929190613629565b60405180910390f35b3480156101d9575f5ffd5b506101f460048036038101906101ef9190613688565b610c19565b005b348015610201575f5ffd5b5061021c6004803603810190610217919061370d565b610df5565b6040516102299190613738565b60405180910390f35b34801561023d575f5ffd5b5061025860048036038101906102539190613688565b610e0a565b60405161026c989796959493929190613751565b60405180910390f35b348015610280575f5ffd5b50610289610ff2565b005b348015610296575f5ffd5b506102b160048036038101906102ac91906137cd565b6110fe565b6040516102c093929190613abb565b60405180910390f35b6102e360048036038101906102de9190613d05565b611383565b005b3480156102f0575f5ffd5b5061030b6004803603810190610306919061370d565b6119cf565b6040516103189190613738565b60405180910390f35b34801561032c575f5ffd5b50610335611a15565b005b348015610342575f5ffd5b5061035d60048036038101906103589190613688565b611aa5565b6040516103709796959493929190613e44565b60405180910390f35b348015610384575f5ffd5b5061039f600480360381019061039a9190613eb5565b611d03565b6040516103ac9190613738565b60405180910390f35b3480156103c0575f5ffd5b506103db60048036038101906103d69190613fb5565b611de1565b005b3480156103e8575f5ffd5b5061040360048036038101906103fe9190613688565b612019565b005b348015610410575f5ffd5b5061042b6004803603810190610426919061400f565b6122a0565b6040516104389190613738565b60405180910390f35b34801561044c575f5ffd5b50610455612612565b6040516104629190613738565b60405180910390f35b348015610476575f5ffd5b5061047f612619565b60405161048c919061404d565b60405180910390f35b3480156104a0575f5ffd5b506104a96126a5565b6040516104b6919061404d565b60405180910390f35b3480156104ca575f5ffd5b506104d3612731565b6040516104e0919061407c565b60405180910390f35b3480156104f4575f5ffd5b5061050f600480360381019061050a9190613688565b612755565b6040516105229796959493929190614095565b60405180910390f35b348015610536575f5ffd5b5061053f6127c5565b60405161054c9190613738565b60405180910390f35b348015610560575f5ffd5b506105696127cb565b6040516105769190613738565b60405180910390f35b34801561058a575f5ffd5b506105a560048036038101906105a09190614102565b6127d1565b6040516105b2919061404d565b60405180910390f35b3480156105c6575f5ffd5b506105cf612a86565b6040516105dc919061407c565b60405180910390f35b3480156105f0575f5ffd5b506105f9612aab565b6040516106069190613738565b60405180910390f35b34801561061a575f5ffd5b506106356004803603810190610630919061356c565b612ab0565b005b815f81118015610648575060788111155b610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90614177565b60405180910390fd5b5f34116106c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c090614205565b60405180910390fd5b600160028111156106dd576106dc613834565b5b60065f8581526020019081526020015f206001015f9054906101000a900460ff1660028111156107105761070f613834565b5b14610750576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107479061426d565b60405180910390fd5b5f600681111561076357610762613834565b5b82600681111561077657610775613834565b5b036107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad906142d5565b60405180910390fd5b5f60065f8581526020019081526020015f209050806005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661088b576001816005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f81548092919061088590614320565b91905055505b5f816004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8560068111156108df576108de613834565b5b60068111156108f1576108f0613834565b5b81526020019081526020015f20540361099a57806003015f84600681111561091c5761091b613834565b5b600681111561092e5761092d613834565b5b81526020019081526020015f2033908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34816004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8560068111156109ee576109ed613834565b5b6006811115610a00576109ff613834565b5b81526020019081526020015f205f828254610a1b9190614367565b9250508190555034816002015f856006811115610a3b57610a3a613834565b5b6006811115610a4d57610a4c613834565b5b81526020019081526020015f205f828254610a689190614367565b9250508190555034816006015f828254610a829190614367565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847fbfcd8f4e47cc529f86cdc7eab8fb80e015a298e021fcaee72df1f76dd57cf487853442604051610ad49392919061439a565b60405180910390a350505050565b6060805f5f5f600260036004546005546078848054610b00906143fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2c906143fc565b8015610b775780601f10610b4e57610100808354040283529160200191610b77565b820191905f5260205f20905b815481529060010190602001808311610b5a57829003601f168201915b50505050509450838054610b8a906143fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb6906143fc565b8015610c015780601f10610bd857610100808354040283529160200191610c01565b820191905f5260205f20905b815481529060010190602001808311610be457829003601f168201915b50505050509350945094509450945094509091929394565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e9061449c565b60405180910390fd5b805f81118015610cb8575060788111155b610cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cee90614177565b60405180910390fd5b60016002811115610d0b57610d0a613834565b5b60065f8481526020019081526020015f206001015f9054906101000a900460ff166002811115610d3e57610d3d613834565b5b14610d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7590614504565b60405180910390fd5b5f60065f8481526020019081526020015f206001015f6101000a81548160ff02191690836002811115610db457610db3613834565b5b0217905550817f6991db13c9034e0bcafe7f947720e92c4729153910eb3238c69a912b7fa16adc42604051610de99190613738565b60405180910390a25050565b6007602052805f5260405f205f915090505481565b5f5f5f5f5f5f5f5f885f81118015610e23575060788111155b610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5990614177565b60405180910390fd5b5f60065f8c81526020019081526020015f209050806002015f60016006811115610e8f57610e8e613834565b5b6006811115610ea157610ea0613834565b5b81526020019081526020015f20549950806002015f60026006811115610eca57610ec9613834565b5b6006811115610edc57610edb613834565b5b81526020019081526020015f20549850806002015f60036006811115610f0557610f04613834565b5b6006811115610f1757610f16613834565b5b81526020019081526020015f20549750806002015f60046006811115610f4057610f3f613834565b5b6006811115610f5257610f51613834565b5b81526020019081526020015f20549650806002015f60056006811115610f7b57610f7a613834565b5b6006811115610f8d57610f8c613834565b5b81526020019081526020015f20549550806002015f600680811115610fb557610fb4613834565b5b6006811115610fc757610fc6613834565b5b81526020019081526020015f2054945080600601549350806007015492505050919395975091939597565b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f8111611075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106c9061456c565b60405180910390fd5b5f60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f193505050501580156110fa573d5f5f3e3d5ffd5b5050565b6060806060838511158015611114575060788411155b611153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114a906145d4565b60405180910390fd5b5f6001868661116291906145f2565b61116c9190614367565b90508067ffffffffffffffff81111561118857611187613b09565b5b6040519080825280602002602001820160405280156111b65781602001602082028036833780820191505090505b5093508067ffffffffffffffff8111156111d3576111d2613b09565b5b6040519080825280602002602001820160405280156112015781602001602082028036833780820191505090505b5092508067ffffffffffffffff81111561121e5761121d613b09565b5b60405190808252806020026020018201604052801561124c5781602001602082028036833780820191505090505b5091505f5f90505b8181101561137a575f81886112699190614367565b905060065f8281526020019081526020015f206001015f9054906101000a900460ff1686838151811061129f5761129e614625565b5b602002602001019060028111156112b9576112b8613834565b5b908160028111156112cd576112cc613834565b5b8152505060065f8281526020019081526020015f2060010160019054906101000a900460ff1685838151811061130657611305614625565b5b602002602001019060068111156113205761131f613834565b5b9081600681111561133457611333613834565b5b8152505060065f8281526020019081526020015f20600601548483815181106113605761135f614625565b5b602002602001018181525050508080600101915050611254565b50509250925092565b825f81118015611394575060788111155b6113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca90614177565b60405180910390fd5b8151835114611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e9061469c565b60405180910390fd5b5f83511161145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190614704565b60405180910390fd5b6001600281111561146e5761146d613834565b5b60065f8681526020019081526020015f206001015f9054906101000a900460ff1660028111156114a1576114a0613834565b5b146114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d89061426d565b60405180910390fd5b5f5f90505f5f90505b8351811015611604575f84828151811061150757611506614625565b5b60200260200101511161154f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154690614792565b60405180910390fd5b5f600681111561156257611561613834565b5b85828151811061157557611574614625565b5b6020026020010151600681111561158f5761158e613834565b5b036115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c6906142d5565b60405180910390fd5b8381815181106115e2576115e1614625565b5b6020026020010151826115f59190614367565b915080806001019150506114ea565b50803414611647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163e90614820565b60405180910390fd5b5f60065f8781526020019081526020015f209050806005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1661171c576001816005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f81548092919061171690614320565b91905055505b5f5f90505b85518110156119c6575f86828151811061173e5761173d614625565b5b602002602001015190505f86838151811061175c5761175b614625565b5b602002602001015190505f846004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460068111156117ba576117b9613834565b5b60068111156117cc576117cb613834565b5b81526020019081526020015f20540361187557836003015f8360068111156117f7576117f6613834565b5b600681111561180957611808613834565b5b81526020019081526020015f2033908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80846004015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460068111156118c9576118c8613834565b5b60068111156118db576118da613834565b5b81526020019081526020015f205f8282546118f69190614367565b9250508190555080846002015f84600681111561191657611915613834565b5b600681111561192857611927613834565b5b81526020019081526020015f205f8282546119439190614367565b9250508190555080846006015f82825461195d9190614367565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16897fbfcd8f4e47cc529f86cdc7eab8fb80e015a298e021fcaee72df1f76dd57cf4878484426040516119af9392919061439a565b60405180910390a350508080600101915050611721565b50505050505050565b5f60075f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9a9061449c565b60405180910390fd5b565b5f5f5f611ab06134e3565b5f5f5f875f81118015611ac4575060788111155b611b03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afa90614177565b60405180910390fd5b5f60065f8b81526020019081526020015f2090505f6040518060c00160405280836002015f60016006811115611b3c57611b3b613834565b5b6006811115611b4e57611b4d613834565b5b81526020019081526020015f20548152602001836002015f60026006811115611b7a57611b79613834565b5b6006811115611b8c57611b8b613834565b5b81526020019081526020015f20548152602001836002015f60036006811115611bb857611bb7613834565b5b6006811115611bca57611bc9613834565b5b81526020019081526020015f20548152602001836002015f60046006811115611bf657611bf5613834565b5b6006811115611c0857611c07613834565b5b81526020019081526020015f20548152602001836002015f60056006811115611c3457611c33613834565b5b6006811115611c4657611c45613834565b5b81526020019081526020015f20548152602001836002015f600680811115611c7157611c70613834565b5b6006811115611c8357611c82613834565b5b81526020019081526020015f20548152509050816001015f9054906101000a900460ff168260010160019054906101000a900460ff168360060154838560070154866008015f9054906101000a900460ff168760080160019054906101000a900460ff169950995099509950995099509950505050919395979092949650565b5f835f81118015611d15575060788111155b611d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4b90614177565b60405180910390fd5b60065f8681526020019081526020015f206004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f846006811115611db757611db6613834565b5b6006811115611dc957611dc8613834565b5b81526020019081526020015f20549150509392505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e669061449c565b60405180910390fd5b815f81118015611e80575060788111155b611ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb690614177565b60405180910390fd5b5f6002811115611ed257611ed1613834565b5b60065f8581526020019081526020015f206001015f9054906101000a900460ff166002811115611f0557611f04613834565b5b14611f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3c90614888565b60405180910390fd5b60065f8481526020019081526020015f206008015f9054906101000a900460ff16158015611f92575060065f8481526020019081526020015f2060080160019054906101000a900460ff16155b611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc8906148f0565b60405180910390fd5b827f818240b4f0ccf86739623af73c82fa4df6484f69ac1d3bb0771f238793eafda5834260405161200392919061490e565b60405180910390a261201483612dc6565b505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209e9061449c565b60405180910390fd5b805f811180156120b8575060788111155b6120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90614177565b60405180910390fd5b5f600281111561210a57612109613834565b5b60065f8481526020019081526020015f206001015f9054906101000a900460ff16600281111561213d5761213c613834565b5b1461217d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217490614986565b60405180910390fd5b600160055461218c9190614367565b82146121cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c4906149ee565b60405180910390fd5b8160065f8481526020019081526020015f205f0181905550600160065f8481526020019081526020015f206001015f6101000a81548160ff0219169083600281111561221c5761221b613834565b5b02179055505f60065f8481526020019081526020015f2060010160016101000a81548160ff0219169083600681111561225857612257613834565b5b021790555081600581905550817f291d1b83f3b43aa0636b68ee4730403e7972b8ba37cc917ed6d8a6008d291c57426040516122949190613738565b60405180910390a25050565b5f825f811180156122b2575060788111155b6122f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e890614177565b60405180910390fd5b5f60065f8681526020019081526020015f209050806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6001600681111561235957612358613834565b5b600681111561236b5761236a613834565b5b81526020019081526020015f2054836123849190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600260068111156123da576123d9613834565b5b60068111156123ec576123eb613834565b5b81526020019081526020015f2054836124059190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6003600681111561245b5761245a613834565b5b600681111561246d5761246c613834565b5b81526020019081526020015f2054836124869190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600460068111156124dc576124db613834565b5b60068111156124ee576124ed613834565b5b81526020019081526020015f2054836125079190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6005600681111561255d5761255c613834565b5b600681111561256f5761256e613834565b5b81526020019081526020015f2054836125889190614367565b9250806004015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6006808111156125dd576125dc613834565b5b60068111156125ef576125ee613834565b5b81526020019081526020015f2054836126089190614367565b9250505092915050565b5f47905090565b60028054612626906143fc565b80601f0160208091040260200160405190810160405280929190818152602001828054612652906143fc565b801561269d5780601f106126745761010080835404028352916020019161269d565b820191905f5260205f20905b81548152906001019060200180831161268057829003601f168201915b505050505081565b600380546126b2906143fc565b80601f01602080910402602001604051908101604052809291908181526020018280546126de906143fc565b80156127295780601f1061270057610100808354040283529160200191612729565b820191905f5260205f20905b81548152906001019060200180831161270c57829003601f168201915b505050505081565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006602052805f5260405f205f91509050805f015490806001015f9054906101000a900460ff16908060010160019054906101000a900460ff1690806006015490806007015490806008015f9054906101000a900460ff16908060080160019054906101000a900460ff16905087565b60055481565b60045481565b6060600160068111156127e7576127e6613834565b5b8260068111156127fa576127f9613834565b5b0361283c576040518060400160405280600e81526020017f426f756e646172792028342f36290000000000000000000000000000000000008152509050612a81565b600260068111156128505761284f613834565b5b82600681111561286357612862613834565b5b036128a5576040518060400160405280600681526020017f5769636b657400000000000000000000000000000000000000000000000000008152509050612a81565b600360068111156128b9576128b8613834565b5b8260068111156128cc576128cb613834565b5b0361290e576040518060400160405280600881526020017f446f742042616c6c0000000000000000000000000000000000000000000000008152509050612a81565b6004600681111561292257612921613834565b5b82600681111561293557612934613834565b5b03612977576040518060400160405280600581526020017f312052756e0000000000000000000000000000000000000000000000000000008152509050612a81565b6005600681111561298b5761298a613834565b5b82600681111561299e5761299d613834565b5b036129e0576040518060400160405280600681526020017f322052756e7300000000000000000000000000000000000000000000000000008152509050612a81565b6006808111156129f3576129f2613834565b5b826006811115612a0657612a05613834565b5b03612a48576040518060400160405280601581526020017f4578747261732028576964652f4e6f2042616c6c2900000000000000000000008152509050612a81565b6040518060400160405280600781526020017f50656e64696e670000000000000000000000000000000000000000000000000081525090505b919050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b607881565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b359061449c565b60405180910390fd5b815f81118015612b4f575060788111155b612b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8590614177565b60405180910390fd5b5f6002811115612ba157612ba0613834565b5b60065f8581526020019081526020015f206001015f9054906101000a900460ff166002811115612bd457612bd3613834565b5b14612c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0b90614888565b60405180910390fd5b5f6006811115612c2757612c26613834565b5b826006811115612c3a57612c39613834565b5b03612c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7190614a56565b60405180910390fd5b60065f8481526020019081526020015f206008015f9054906101000a900460ff16158015612cc7575060065f8481526020019081526020015f2060080160019054906101000a900460ff16155b612d06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cfd906148f0565b60405180910390fd5b8160065f8581526020019081526020015f2060010160016101000a81548160ff02191690836006811115612d3d57612d3c613834565b5b0217905550600260065f8581526020019081526020015f206001015f6101000a81548160ff02191690836002811115612d7957612d78613834565b5b0217905550827f5211f9be544837238a73fb7e20c869b0ded382cced50128e806ac599e47e45198342604051612db0929190614a74565b60405180910390a2612dc18361316e565b505050565b5f60065f8381526020019081526020015f2090505f5f90505f5f90505f6040518060c0016040528060016006811115612e0257612e01613834565b5b6006811115612e1457612e13613834565b5b815260200160026006811115612e2d57612e2c613834565b5b6006811115612e3f57612e3e613834565b5b815260200160036006811115612e5857612e57613834565b5b6006811115612e6a57612e69613834565b5b815260200160046006811115612e8357612e82613834565b5b6006811115612e9557612e94613834565b5b815260200160056006811115612eae57612ead613834565b5b6006811115612ec057612ebf613834565b5b8152602001600680811115612ed857612ed7613834565b5b6006811115612eea57612ee9613834565b5b81525090505f5f90505b600681101561310d575f828260068110612f1157612f10614625565b5b602002015190505f866003015f836006811115612f3157612f30613834565b5b6006811115612f4357612f42613834565b5b81526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015612fcd57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612f84575b505050505090505f5f90505b81518110156130fd575f828281518110612ff657612ff5614625565b5b602002602001015190505f896004015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f86600681111561305457613053613834565b5b600681111561306657613065613834565b5b81526020019081526020015f205490505f8111156130ee578060075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546130ca9190614367565b9250508190555080896130dd9190614367565b985087806130ea90614320565b9850505b50508080600101915050612fd9565b5050508080600101915050612ef4565b5060018460080160016101000a81548160ff021916908315150217905550847f0b807bbd7b57312d116372fed998c55b214f5eaaddf6bd9ee33de5b739b9fcde84844260405161315f93929190614a9b565b60405180910390a25050505050565b5f60065f8381526020019081526020015f2090505f8160010160019054906101000a900460ff1690505f826002015f8360068111156131b0576131af613834565b5b60068111156131c2576131c1613834565b5b81526020019081526020015f2054036131e5576131de83612dc6565b50506131f1565b6131ee836131f4565b50505b50565b5f60065f8381526020019081526020015f2090505f8160010160019054906101000a900460ff1690505f826003015f83600681111561323657613235613834565b5b600681111561324857613247613834565b5b81526020019081526020015f208054806020026020016040519081016040528092919081815260200182805480156132d257602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613289575b505050505090505f836002015f8460068111156132f2576132f1613834565b5b600681111561330457613303613834565b5b81526020019081526020015f205490505f846006015490505f5f90505b835181101561343b575f84828151811061333e5761333d614625565b5b602002602001015190505f876004015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f88600681111561339c5761339b613834565b5b60068111156133ae576133ad613834565b5b81526020019081526020015f205490505f8585836133cc9190614ad0565b6133d69190614b3e565b90508060075f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546134249190614367565b925050819055505050508080600101915050613321565b506001856008015f6101000a81548160ff021916908315150217905550857fc61d96cd192999e5e90d09489a76a97d62f3fa653cf753163b1aa7f668dadd5b858386514260405161348f9493929190614b6e565b60405180910390a2607886036134db577f991e491269dfe69f420335bc2b25883adb8c195c28e0a0670809b390145cb056600454426040516134d2929190614bb1565b60405180910390a15b505050505050565b6040518060c00160405280600690602082028036833780820191505090505090565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b61352881613516565b8114613532575f5ffd5b50565b5f813590506135438161351f565b92915050565b60078110613555575f5ffd5b50565b5f8135905061356681613549565b92915050565b5f5f604083850312156135825761358161350e565b5b5f61358f85828601613535565b92505060206135a085828601613558565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6135ec826135aa565b6135f681856135b4565b93506136068185602086016135c4565b61360f816135d2565b840191505092915050565b61362381613516565b82525050565b5f60a0820190508181035f83015261364181886135e2565b9050818103602083015261365581876135e2565b9050613664604083018661361a565b613671606083018561361a565b61367e608083018461361a565b9695505050505050565b5f6020828403121561369d5761369c61350e565b5b5f6136aa84828501613535565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6136dc826136b3565b9050919050565b6136ec816136d2565b81146136f6575f5ffd5b50565b5f81359050613707816136e3565b92915050565b5f602082840312156137225761372161350e565b5b5f61372f848285016136f9565b91505092915050565b5f60208201905061374b5f83018461361a565b92915050565b5f610100820190506137655f83018b61361a565b613772602083018a61361a565b61377f604083018961361a565b61378c606083018861361a565b613799608083018761361a565b6137a660a083018661361a565b6137b360c083018561361a565b6137c060e083018461361a565b9998505050505050505050565b5f5f604083850312156137e3576137e261350e565b5b5f6137f085828601613535565b925050602061380185828601613535565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6003811061387257613871613834565b5b50565b5f81905061388282613861565b919050565b5f61389182613875565b9050919050565b6138a181613887565b82525050565b5f6138b28383613898565b60208301905092915050565b5f602082019050919050565b5f6138d48261380b565b6138de8185613815565b93506138e983613825565b805f5b8381101561391957815161390088826138a7565b975061390b836138be565b9250506001810190506138ec565b5085935050505092915050565b5f81519050919050565b5f819050602082019050919050565b600781106139505761394f613834565b5b50565b5f8190506139608261393f565b919050565b5f61396f82613953565b9050919050565b61397f81613965565b82525050565b5f6139908383613976565b60208301905092915050565b5f602082019050919050565b5f6139b282613926565b6139bc8185613815565b93506139c783613930565b805f5b838110156139f75781516139de8882613985565b97506139e98361399c565b9250506001810190506139ca565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b613a3681613516565b82525050565b5f613a478383613a2d565b60208301905092915050565b5f602082019050919050565b5f613a6982613a04565b613a738185613a0e565b9350613a7e83613a1e565b805f5b83811015613aae578151613a958882613a3c565b9750613aa083613a53565b925050600181019050613a81565b5085935050505092915050565b5f6060820190508181035f830152613ad381866138ca565b90508181036020830152613ae781856139a8565b90508181036040830152613afb8184613a5f565b9050949350505050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b613b3f826135d2565b810181811067ffffffffffffffff82111715613b5e57613b5d613b09565b5b80604052505050565b5f613b70613505565b9050613b7c8282613b36565b919050565b5f67ffffffffffffffff821115613b9b57613b9a613b09565b5b602082029050602081019050919050565b5f5ffd5b5f613bc2613bbd84613b81565b613b67565b90508083825260208201905060208402830185811115613be557613be4613bac565b5b835b81811015613c0e5780613bfa8882613558565b845260208401935050602081019050613be7565b5050509392505050565b5f82601f830112613c2c57613c2b613b05565b5b8135613c3c848260208601613bb0565b91505092915050565b5f67ffffffffffffffff821115613c5f57613c5e613b09565b5b602082029050602081019050919050565b5f613c82613c7d84613c45565b613b67565b90508083825260208201905060208402830185811115613ca557613ca4613bac565b5b835b81811015613cce5780613cba8882613535565b845260208401935050602081019050613ca7565b5050509392505050565b5f82601f830112613cec57613ceb613b05565b5b8135613cfc848260208601613c70565b91505092915050565b5f5f5f60608486031215613d1c57613d1b61350e565b5b5f613d2986828701613535565b935050602084013567ffffffffffffffff811115613d4a57613d49613512565b5b613d5686828701613c18565b925050604084013567ffffffffffffffff811115613d7757613d76613512565b5b613d8386828701613cd8565b9150509250925092565b613d9681613887565b82525050565b613da581613965565b82525050565b5f60069050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b613ddd81613dab565b613de78184613db5565b9250613df282613dbf565b805f5b83811015613e22578151613e098782613a3c565b9650613e1483613dc8565b925050600181019050613df5565b505050505050565b5f8115159050919050565b613e3e81613e2a565b82525050565b5f61018082019050613e585f83018a613d8d565b613e656020830189613d9c565b613e72604083018861361a565b613e7f6060830187613dd4565b613e8d61012083018661361a565b613e9b610140830185613e35565b613ea9610160830184613e35565b98975050505050505050565b5f5f5f60608486031215613ecc57613ecb61350e565b5b5f613ed986828701613535565b9350506020613eea868287016136f9565b9250506040613efb86828701613558565b9150509250925092565b5f5ffd5b5f67ffffffffffffffff821115613f2357613f22613b09565b5b613f2c826135d2565b9050602081019050919050565b828183375f83830152505050565b5f613f59613f5484613f09565b613b67565b905082815260208101848484011115613f7557613f74613f05565b5b613f80848285613f39565b509392505050565b5f82601f830112613f9c57613f9b613b05565b5b8135613fac848260208601613f47565b91505092915050565b5f5f60408385031215613fcb57613fca61350e565b5b5f613fd885828601613535565b925050602083013567ffffffffffffffff811115613ff957613ff8613512565b5b61400585828601613f88565b9150509250929050565b5f5f604083850312156140255761402461350e565b5b5f61403285828601613535565b9250506020614043858286016136f9565b9150509250929050565b5f6020820190508181035f83015261406581846135e2565b905092915050565b614076816136d2565b82525050565b5f60208201905061408f5f83018461406d565b92915050565b5f60e0820190506140a85f83018a61361a565b6140b56020830189613d8d565b6140c26040830188613d9c565b6140cf606083018761361a565b6140dc608083018661361a565b6140e960a0830185613e35565b6140f660c0830184613e35565b98975050505050505050565b5f602082840312156141175761411661350e565b5b5f61412484828501613558565b91505092915050565b7f496e76616c69642062616c6c206e756d626572000000000000000000000000005f82015250565b5f6141616013836135b4565b915061416c8261412d565b602082019050919050565b5f6020820190508181035f83015261418e81614155565b9050919050565b7f42657420616d6f756e74206d7573742062652067726561746572207468616e205f8201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b5f6141ef6021836135b4565b91506141fa82614195565b604082019050919050565b5f6020820190508181035f83015261421c816141e3565b9050919050565b7f42657474696e67206e6f74206f70656e20666f7220746869732062616c6c00005f82015250565b5f614257601e836135b4565b915061426282614223565b602082019050919050565b5f6020820190508181035f8301526142848161424b565b9050919050565b7f43616e6e6f7420626574206f6e2050454e44494e47206f7574636f6d650000005f82015250565b5f6142bf601d836135b4565b91506142ca8261428b565b602082019050919050565b5f6020820190508181035f8301526142ec816142b3565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61432a82613516565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361435c5761435b6142f3565b5b600182019050919050565b5f61437182613516565b915061437c83613516565b9250828201905080821115614394576143936142f3565b5b92915050565b5f6060820190506143ad5f830186613d9c565b6143ba602083018561361a565b6143c7604083018461361a565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061441357607f821691505b602082108103614426576144256143cf565b5b50919050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f5f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f6144866021836135b4565b91506144918261442c565b604082019050919050565b5f6020820190508181035f8301526144b38161447a565b9050919050565b7f42616c6c206e6f74206f70656e20666f722062657474696e67000000000000005f82015250565b5f6144ee6019836135b4565b91506144f9826144ba565b602082019050919050565b5f6020820190508181035f83015261451b816144e2565b9050919050565b7f4e6f2062616c616e636520746f207769746864726177000000000000000000005f82015250565b5f6145566016836135b4565b915061456182614522565b602082019050919050565b5f6020820190508181035f8301526145838161454a565b9050919050565b7f496e76616c69642072616e6765000000000000000000000000000000000000005f82015250565b5f6145be600d836135b4565b91506145c98261458a565b602082019050919050565b5f6020820190508181035f8301526145eb816145b2565b9050919050565b5f6145fc82613516565b915061460783613516565b925082820390508181111561461f5761461e6142f3565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f417272617973206c656e677468206d69736d61746368000000000000000000005f82015250565b5f6146866016836135b4565b915061469182614652565b602082019050919050565b5f6020820190508181035f8301526146b38161467a565b9050919050565b7f4e6f2062657473207370656369666965640000000000000000000000000000005f82015250565b5f6146ee6011836135b4565b91506146f9826146ba565b602082019050919050565b5f6020820190508181035f83015261471b816146e2565b9050919050565b7f416c6c2062657420616d6f756e7473206d7573742062652067726561746572205f8201527f7468616e20300000000000000000000000000000000000000000000000000000602082015250565b5f61477c6026836135b4565b915061478782614722565b604082019050919050565b5f6020820190508181035f8301526147a981614770565b9050919050565b7f53656e742076616c756520646f65736e2774206d6174636820746f74616c20625f8201527f657420616d6f756e747300000000000000000000000000000000000000000000602082015250565b5f61480a602a836135b4565b9150614815826147b0565b604082019050919050565b5f6020820190508181035f830152614837816147fe565b9050919050565b7f42616c6c206d75737420626520636c6f736564206669727374000000000000005f82015250565b5f6148726019836135b4565b915061487d8261483e565b602082019050919050565b5f6020820190508181035f83015261489f81614866565b9050919050565b7f416c72656164792070726f6365737365640000000000000000000000000000005f82015250565b5f6148da6011836135b4565b91506148e5826148a6565b602082019050919050565b5f6020820190508181035f830152614907816148ce565b9050919050565b5f6040820190508181035f83015261492681856135e2565b9050614935602083018461361a565b9392505050565b7f42616c6c20616c7265616479206f70656e6564206f72207265736f6c766564005f82015250565b5f614970601f836135b4565b915061497b8261493c565b602082019050919050565b5f6020820190508181035f83015261499d81614964565b9050919050565b7f4d757374206f70656e2062616c6c7320696e2073657175656e636500000000005f82015250565b5f6149d8601b836135b4565b91506149e3826149a4565b602082019050919050565b5f6020820190508181035f830152614a05816149cc565b9050919050565b7f526573756c742063616e6e6f742062652050454e44494e4700000000000000005f82015250565b5f614a406018836135b4565b9150614a4b82614a0c565b602082019050919050565b5f6020820190508181035f830152614a6d81614a34565b9050919050565b5f604082019050614a875f830185613d9c565b614a94602083018461361a565b9392505050565b5f606082019050614aae5f83018661361a565b614abb602083018561361a565b614ac8604083018461361a565b949350505050565b5f614ada82613516565b9150614ae583613516565b9250828202614af381613516565b91508282048414831517614b0a57614b096142f3565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f614b4882613516565b9150614b5383613516565b925082614b6357614b62614b11565b5b828204905092915050565b5f608082019050614b815f830187613d9c565b614b8e602083018661361a565b614b9b604083018561361a565b614ba8606083018461361a565b95945050505050565b5f604082019050614bc45f83018561361a565b614bd1602083018461361a565b939250505056fea26469706673582212206c575f14dad1a9f1c98b0a6b87c46a88510a5b2240656d119d96d5059e4d39bc64736f6c634300081e0033","sourceMap":"103:17051:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4052:1165;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;13699:205;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;3619:338;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1321:47;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;14614:1205;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;11508:227;;;;;;;;;;;;;:::i;:::-;;16258:894;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;5306:1831;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;13910:114;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;15852:161;;;;;;;;;;;;;:::i;:::-;;11776:1050;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;12832:239;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8036:504;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2997:568;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;13077:616;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;16070:107;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;192:19;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;217;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;137:20;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1278:37;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;340:30;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;242:22;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;14030:534;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;163:22;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;271:41;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7185:743;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4052:1165;4163:11;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;4206:1:::1;4194:9;:13;4186:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;4304:14;4276:42;;;;;;;;:::i;:::-;;:5;:18;4282:11;4276:18;;;;;;;;;;;:24;;;;;;;;;;;;:42;;;;;;;;:::i;:::-;;;4255:119;;;;;;;;;;;;:::i;:::-;;;;;;;;;4417:19;4405:31;;;;;;;;:::i;:::-;;:8;:31;;;;;;;;:::i;:::-;;::::0;4384:107:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;4502:17;4522:5;:18;4528:11;4522:18;;;;;;;;;;;4502:38;;4588:4;:11;;:23;4600:10;4588:23;;;;;;;;;;;;;;;;;;;;;;;;;4583:123;;4653:4;4627;:11;;:23;4639:10;4627:23;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;4671:4;:22;;;:24;;;;;;;;;:::i;:::-;;;;;;4583:123;4844:1;4805:4;:13;;:25;4819:10;4805:25;;;;;;;;;;;;;;;:35;4831:8;4805:35;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:40:::0;4801:110:::1;;4861:4;:12;;:22;4874:8;4861:22;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4889:10;4861:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4801:110;4959:9;4920:4;:13;;:25;4934:10;4920:25;;;;;;;;;;;;;;;:35;4946:8;4920:35;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:48;;;;;;;:::i;:::-;;;;;;;;5006:9;4978:4;:14;;:24;4993:8;4978:24;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:37;;;;;;;:::i;:::-;;;;;;;;5043:9;5025:4;:14;;;:27;;;;;;;:::i;:::-;;;;;;;;5116:10;5068:142;;5091:11;5068:142;5140:8;5162:9;5185:15;5068:142;;;;;;;;:::i;:::-;;;;;;;;4176:1041;4052:1165:::0;;;:::o;13699:205::-;13770:13;13785;13800:7;13809;13818;13849:5;13856;13863:7;;13872:11;;309:3;13841:56;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13699:205;;;;;:::o;3619:338::-;2426:5;;;;;;;;;;;2412:19;;:10;:19;;;2404:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;3703:11:::1;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;3775:14:::2;3747:42;;;;;;;;:::i;:::-;;:5;:18;3753:11;3747:18;;;;;;;;;;;:24;;;;;;;;;;;;:42;;;;;;;;:::i;:::-;;;3726:114;;;;;;;;;;;;:::i;:::-;;;;;;;;;3878:16;3851:5;:18;3857:11;3851:18;;;;;;;;;;;:24;;;:43;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;3921:11;3910:40;3934:15;3910:40;;;;;;:::i;:::-;;;;;;;;2479:1:::1;3619:338:::0;:::o;1321:47::-;;;;;;;;;;;;;;;;;:::o;14614:1205::-;14772:20;14806:18;14838:19;14871:18;14903:19;14936:18;14968:17;14999:20;14729:11;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;15044:17:::1;15064:5;:18;15070:11;15064:18;;;;;;;;;;;15044:38;;15108:4;:14;;:36;15123:20;15108:36;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;15093:51;;15167:4;:14;;:34;15182:18;15167:34;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;15154:47;;15225:4;:14;;:36;15240:20;15225:36;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;15211:50;;15284:4;:14;;:35;15299:19;15284:35;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;15271:48;;15343:4;:14;;:36;15358:20;15343:36;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;15329:50;;15402:4;:14;;:34;15417:18;15402:34:::0;::::1;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;15389:47;;15458:4;:14;;;15446:26;;15565:4;:22;;;15550:37;;15598:214;14614:1205:::0;;;;;;;;;;:::o;11508:227::-;11547:14;11564:12;:24;11577:10;11564:24;;;;;;;;;;;;;;;;11547:41;;11615:1;11606:6;:10;11598:45;;;;;;;;;;;;:::i;:::-;;;;;;;;;11681:1;11654:12;:24;11667:10;11654:24;;;;;;;;;;;;;;;:28;;;;11700:10;11692:28;;:36;11721:6;11692:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11537:198;11508:227::o;16258:894::-;16408:25;16447:28;16489:27;16576:8;16562:10;:22;;:49;;;;;309:3;16588:8;:23;;16562:49;16541:109;;;;;;;;;;;;:::i;:::-;;;;;;;;;16661:14;16702:1;16689:10;16678:8;:21;;;;:::i;:::-;:25;;;;:::i;:::-;16661:42;;16738:6;16722:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16713:32;;16783:6;16765:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16755:35;;16827:6;16813:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16800:34;;16850:9;16862:1;16850:13;;16845:254;16869:6;16865:1;:10;16845:254;;;16896:18;16930:1;16917:10;:14;;;;:::i;:::-;16896:35;;16957:5;:17;16963:10;16957:17;;;;;;;;;;;:23;;;;;;;;;;;;16945:6;16952:1;16945:9;;;;;;;;:::i;:::-;;;;;;;:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;17007:5;:17;17013:10;17007:17;;;;;;;;;;;:24;;;;;;;;;;;;16994:7;17002:1;16994:10;;;;;;;;:::i;:::-;;;;;;;:37;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;17061:5;:17;17067:10;17061:17;;;;;;;;;;;:27;;;17045:10;17056:1;17045:13;;;;;;;;:::i;:::-;;;;;;;:43;;;;;16882:217;16877:3;;;;;;;16845:254;;;;17109:36;16258:894;;;;;:::o;5306:1831::-;5463:11;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;5514:8:::1;:15;5494:9;:16;:35;5486:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;5593:1;5574:9;:16;:20;5566:50;;;;;;;;;;;;:::i;:::-;;;;;;;;;5675:14;5647:42;;;;;;;;:::i;:::-;;:5;:18;5653:11;5647:18;;;;;;;;;;;:24;;;;;;;;;;;;:42;;;;;;;;:::i;:::-;;;5626:119;;;;;;;;;;;;:::i;:::-;;;;;;;;;5756:19;5778:1;5756:23;;5794:9;5806:1;5794:13;;5789:314;5813:8;:15;5809:1;:19;5789:314;;;5871:1;5857:8;5866:1;5857:11;;;;;;;;:::i;:::-;;;;;;;;:15;5849:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;5970:19;5954:35;;;;;;;;:::i;:::-;;:9;5964:1;5954:12;;;;;;;;:::i;:::-;;;;;;;;:35;;;;;;;;:::i;:::-;;::::0;5929:123:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;6081:8;6090:1;6081:11;;;;;;;;:::i;:::-;;;;;;;;6066:26;;;;;:::i;:::-;;;5830:3;;;;;;;5789:314;;;;6146:11;6133:9;:24;6112:113;;;;;;;;;;;;:::i;:::-;;;;;;;;;6236:17;6256:5;:18;6262:11;6256:18;;;;;;;;;;;6236:38;;6322:4;:11;;:23;6334:10;6322:23;;;;;;;;;;;;;;;;;;;;;;;;;6317:123;;6387:4;6361;:11;;:23;6373:10;6361:23;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;6405:4;:22;;;:24;;;;;;;;;:::i;:::-;;;;;;6317:123;6483:9;6495:1;6483:13;;6478:653;6502:9;:16;6498:1;:20;6478:653;;;6539:19;6561:9;6571:1;6561:12;;;;;;;;:::i;:::-;;;;;;;;6539:34;;6587:14;6604:8;6613:1;6604:11;;;;;;;;:::i;:::-;;;;;;;;6587:28;;6722:1;6684:4;:13;;:25;6698:10;6684:25;;;;;;;;;;;;;;;:34;6710:7;6684:34;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:39:::0;6680:116:::1;;6743:4;:12;;:21;6756:7;6743:21;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6770:10;6743:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6680:116;6847:6;6809:4;:13;;:25;6823:10;6809:25;;;;;;;;;;;;;;;:34;6835:7;6809:34;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:44;;;;;;;:::i;:::-;;;;;;;;6894:6;6867:4;:14;;:23;6882:7;6867:23;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;;;;;6932:6;6914:4;:14;;;:24;;;;;;;:::i;:::-;;;;;;;;7014:10;6958:162;;6985:11;6958:162;7042:7;7067:6;7091:15;6958:162;;;;;;;;:::i;:::-;;;;;;;;6525:606;;6520:3;;;;;;;6478:653;;;;5476:1661;;5306:1831:::0;;;;:::o;13910:114::-;13972:7;13998:12;:19;14011:5;13998:19;;;;;;;;;;;;;;;;13991:26;;13910:114;;;:::o;15852:161::-;2426:5;;;;;;;;;;;2412:19;;:10;:19;;;2404:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;15852:161::o;11776:1050::-;11924:15;11953:18;11985:17;12016:29;;:::i;:::-;12118:25;12157:16;12187:13;11881:11;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;12225:17:::1;12245:5;:18;12251:11;12245:18;;;;;;;;;;;12225:38;;12273:22;:330;;;;;;;;12312:4;:14;;:36;12327:20;12312:36;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;12273:330;;;;12362:4;:14;;:34;12377:18;12362:34;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;12273:330;;;;12410:4;:14;;:36;12425:20;12410:36;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;12273:330;;;;12460:4;:14;;:35;12475:19;12460:35;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;12273:330;;;;12509:4;:14;;:36;12524:20;12509:36;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;12273:330;;;;12559:4;:14;;:34;12574:18;12559:34:::0;::::1;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;12273:330;;::::0;::::1;;12635:4;:10;;;;;;;;;;;;12659:4;:11;;;;;;;;;;;;12684:4;:14;;;12712:4;12730;:22;;;12766:4;:16;;;;;;;;;;;;12796:4;:13;;;;;;;;;;;;12614:205;;;;;;;;;;;;;;;;11776:1050:::0;;;;;;;;;;:::o;12832:239::-;12994:7;12972:11;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;13020:5:::1;:18;13026:11;13020:18;;;;;;;;;;;:27;;:34;13048:5;13020:34;;;;;;;;;;;;;;;:44;13055:8;13020:44;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;13013:51;;12832:239:::0;;;;;;:::o;8036:504::-;2426:5;;;;;;;;;;;2412:19;;:10;:19;;;2404:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8152:11:::1;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;8224:16:::2;8196:44;;;;;;;;:::i;:::-;;:5;:18;8202:11;8196:18;;;;;;;;;;;:24;;;;;;;;;;;;:44;;;;;;;;:::i;:::-;;;8175:116;;;;;;;;;;;;:::i;:::-;;;;;;;;;8323:5;:18;8329:11;8323:18;;;;;;;;;;;:30;;;;;;;;;;;;8322:31;:63;;;;;8358:5;:18;8364:11;8358:18;;;;;;;;;;;:27;;;;;;;;;;;;8357:28;8322:63;8301:127;;;;;;;;;;;;:::i;:::-;;;;;;;;;8458:11;8444:52;8471:7;8480:15;8444:52;;;;;;;:::i;:::-;;;;;;;;8506:27;8521:11;8506:14;:27::i;:::-;2479:1:::1;8036:504:::0;;:::o;2997:568::-;2426:5;;;;;;;;;;;2412:19;;:10;:19;;;2404:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;3080:11:::1;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;3152:16:::2;3124:44;;;;;;;;:::i;:::-;;:5;:18;3130:11;3124:18;;;;;;;;;;;:24;;;;;;;;;;;;:44;;;;;;;;:::i;:::-;;;3103:122;;;;;;;;;;;;:::i;:::-;;;;;;;;;3272:1;3258:11;;:15;;;;:::i;:::-;3243:11;:30;3235:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;3348:11;3316:5;:18;3322:11;3316:18;;;;;;;;;;;:29;;:43;;;;3396:14;3369:5;:18;3375:11;3369:18;;;;;;;;;;;:24;;;:41;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;3448:19;3420:5;:18;3426:11;3420:18;;;;;;;;;;;:25;;;:47;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;3491:11;3477;:25;;;;3529:11;3518:40;3542:15;3518:40;;;;;;:::i;:::-;;;;;;;;2479:1:::1;2997:568:::0;:::o;13077:616::-;13214:16;13192:11;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;13242:17:::1;13262:5;:18;13268:11;13262:18;;;;;;;;;;;13242:38;;13303:4;:13;;:20;13317:5;13303:20;;;;;;;;;;;;;;;:42;13324:20;13303:42;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;13291:54;;;;;:::i;:::-;;;13367:4;:13;;:20;13381:5;13367:20;;;;;;;;;;;;;;;:40;13388:18;13367:40;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;13355:52;;;;;:::i;:::-;;;13429:4;:13;;:20;13443:5;13429:20;;;;;;;;;;;;;;;:42;13450:20;13429:42;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;13417:54;;;;;:::i;:::-;;;13493:4;:13;;:20;13507:5;13493:20;;;;;;;;;;;;;;;:41;13514:19;13493:41;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;13481:53;;;;;:::i;:::-;;;13556:4;:13;;:20;13570:5;13556:20;;;;;;;;;;;;;;;:42;13577:20;13556:42;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;13544:54;;;;;:::i;:::-;;;13620:4;:13;;:20;13634:5;13620:20;;;;;;;;;;;;;;;:40;13641:18;13620:40:::0;::::1;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;13608:52;;;;;:::i;:::-;;;13671:15;13077:616:::0;;;;;:::o;16070:107::-;16123:7;16149:21;16142:28;;16070:107;:::o;192:19::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;217:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;137:20::-;;;;;;;;;;;;;:::o;1278:37::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;340:30::-;;;;:::o;242:22::-;;;;:::o;14030:534::-;14119:13;14160:20;14148:32;;;;;;;;:::i;:::-;;:8;:32;;;;;;;;:::i;:::-;;;14144:61;;14182:23;;;;;;;;;;;;;;;;;;;;;14144:61;14231:18;14219:30;;;;;;;;:::i;:::-;;:8;:30;;;;;;;;:::i;:::-;;;14215:51;;14251:15;;;;;;;;;;;;;;;;;;;;;14215:51;14292:20;14280:32;;;;;;;;:::i;:::-;;:8;:32;;;;;;;;:::i;:::-;;;14276:55;;14314:17;;;;;;;;;;;;;;;;;;;;;14276:55;14357:19;14345:31;;;;;;;;:::i;:::-;;:8;:31;;;;;;;;:::i;:::-;;;14341:51;;14378:14;;;;;;;;;;;;;;;;;;;;;14341:51;14418:20;14406:32;;;;;;;;:::i;:::-;;:8;:32;;;;;;;;:::i;:::-;;;14402:53;;14440:15;;;;;;;;;;;;;;;;;;;;;14402:53;14481:18;14469:30;;;;;;;;:::i;:::-;;:8;:30;;;;;;;;:::i;:::-;;;14465:66;;14501:30;;;;;;;;;;;;;;;;;;;;;14465:66;14541:16;;;;;;;;;;;;;;;;;;;14030:534;;;;:::o;163:22::-;;;;;;;;;;;;;:::o;271:41::-;309:3;271:41;:::o;7185:743::-;2426:5;;;;;;;;;;;2412:19;;:10;:19;;;2404:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;7305:11:::1;2579:1;2565:11;:15;:45;;;;;309:3;2584:11;:26;;2565:45;2544:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;7377:16:::2;7349:44;;;;;;;;:::i;:::-;;:5;:18;7355:11;7349:18;;;;;;;;;;;:24;;;;;;;;;;;;:44;;;;;;;;:::i;:::-;;;7328:116;;;;;;;;;;;;:::i;:::-;;;;;;;;;7473:19;7462:30;;;;;;;;:::i;:::-;;:7;:30;;;;;;;;:::i;:::-;;::::0;7454:67:::2;;;;;;;;;;;;:::i;:::-;;;;;;;;;7553:5;:18;7559:11;7553:18;;;;;;;;;;;:30;;;;;;;;;;;;7552:31;:63;;;;;7588:5;:18;7594:11;7588:18;;;;;;;;;;;:27;;;;;;;;;;;;7587:28;7552:63;7531:127;;;;;;;;;;;;:::i;:::-;;;;;;;;;7697:7;7669:5;:18;7675:11;7669:18;;;;;;;;;;;:25;;;:35;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;7741:18;7714:5;:18;7720:11;7714:18;;;;;;;;;;;:24;;;:45;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;7786:11;7775:49;7799:7;7808:15;7775:49;;;;;;;:::i;:::-;;;;;;;;7890:31;7909:11;7890:18;:31::i;:::-;2479:1:::1;7185:743:::0;;:::o;10249:1208::-;10313:17;10333:5;:18;10339:11;10333:18;;;;;;;;;;;10313:38;;10361:21;10385:1;10361:25;;10396:20;10419:1;10396:24;;10462:30;:242;;;;;;;;10509:20;10462:242;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;10543:18;10462:242;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;10575:20;10462:242;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;10609:19;10462:242;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;10642:20;10462:242;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;10676:18;10462:242;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;10720:9;10732:1;10720:13;;10715:560;10739:15;10735:1;:19;10715:560;;;10775:19;10797:8;10806:1;10797:11;;;;;;;:::i;:::-;;;;;;10775:33;;10822:24;10849:4;:12;;:21;10862:7;10849:21;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;10822:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10890:9;10902:1;10890:13;;10885:380;10909:7;:14;10905:1;:18;10885:380;;;10948:14;10965:7;10973:1;10965:10;;;;;;;;:::i;:::-;;;;;;;;10948:27;;10993:20;11016:4;:13;;:21;11030:6;11016:21;;;;;;;;;;;;;;;:30;11038:7;11016:30;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;10993:53;;11084:1;11069:12;:16;11065:186;;;11133:12;11109;:20;11122:6;11109:20;;;;;;;;;;;;;;;;:36;;;;;;;:::i;:::-;;;;;;;;11184:12;11167:29;;;;;:::i;:::-;;;11218:14;;;;;:::i;:::-;;;;11065:186;10930:335;;10925:3;;;;;;;10885:380;;;;10761:514;;10756:3;;;;;;;10715:560;;;;11301:4;11285;:13;;;:20;;;;;;;;;;;;;;;;;;11347:11;11321:129;11372:13;11399:12;11425:15;11321:129;;;;;;;;:::i;:::-;;;;;;;;10303:1154;;;;10249:1208;:::o;8617:451::-;8685:17;8705:5;:18;8711:11;8705:18;;;;;;;;;;;8685:38;;8733:26;8762:4;:11;;;;;;;;;;;;8733:40;;8869:1;8835:4;:14;;:30;8850:14;8835:30;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:35;8831:157;;8930:27;8945:11;8930:14;:27::i;:::-;8971:7;;;;8831:157;9029:32;9049:11;9029:19;:32::i;:::-;8675:393;;8617:451;;:::o;9122:1066::-;9191:17;9211:5;:18;9217:11;9211:18;;;;;;;;;;;9191:38;;9239:26;9268:4;:11;;;;;;;;;;;;9239:40;;9290:24;9317:4;:12;;:28;9330:14;9317:28;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;9290:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9355:24;9382:4;:14;;:30;9397:14;9382:30;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;9355:57;;9422:17;9442:4;:14;;;9422:34;;9530:9;9542:1;9530:13;;9525:294;9549:7;:14;9545:1;:18;9525:294;;;9584:14;9601:7;9609:1;9601:10;;;;;;;;:::i;:::-;;;;;;;;9584:27;;9625:15;9643:4;:13;;:21;9657:6;9643:21;;;;;;;;;;;;;;;:37;9665:14;9643:37;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;9625:55;;9694:20;9741:16;9728:9;9718:7;:19;;;;:::i;:::-;9717:40;;;;:::i;:::-;9694:63;;9796:12;9772;:20;9785:6;9772:20;;;;;;;;;;;;;;;;:36;;;;;;;:::i;:::-;;;;;;;;9570:249;;;9565:3;;;;;;;9525:294;;;;9848:4;9829;:16;;;:23;;;;;;;;;;;;;;;;;;9901:11;9868:162;9926:14;9954:9;9977:7;:14;10005:15;9868:162;;;;;;;;;:::i;:::-;;;;;;;;309:3;10084:11;:26;10080:102;;10131:40;10146:7;;10155:15;10131:40;;;;;;;:::i;:::-;;;;;;;;10080:102;9181:1007;;;;;9122:1066;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:30:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:116::-;780:1;773:5;770:12;760:40;;796:1;793;786:12;760:40;690:116;:::o;812:173::-;875:5;913:6;900:20;891:29;;929:50;973:5;929:50;:::i;:::-;812:173;;;;:::o;991:508::-;1076:6;1084;1133:2;1121:9;1112:7;1108:23;1104:32;1101:119;;;1139:79;;:::i;:::-;1101:119;1259:1;1284:53;1329:7;1320:6;1309:9;1305:22;1284:53;:::i;:::-;1274:63;;1230:117;1386:2;1412:70;1474:7;1465:6;1454:9;1450:22;1412:70;:::i;:::-;1402:80;;1357:135;991:508;;;;;:::o;1505:99::-;1557:6;1591:5;1585:12;1575:22;;1505:99;;;:::o;1610:169::-;1694:11;1728:6;1723:3;1716:19;1768:4;1763:3;1759:14;1744:29;;1610:169;;;;:::o;1785:139::-;1874:6;1869:3;1864;1858:23;1915:1;1906:6;1901:3;1897:16;1890:27;1785:139;;;:::o;1930:102::-;1971:6;2022:2;2018:7;2013:2;2006:5;2002:14;1998:28;1988:38;;1930:102;;;:::o;2038:377::-;2126:3;2154:39;2187:5;2154:39;:::i;:::-;2209:71;2273:6;2268:3;2209:71;:::i;:::-;2202:78;;2289:65;2347:6;2342:3;2335:4;2328:5;2324:16;2289:65;:::i;:::-;2379:29;2401:6;2379:29;:::i;:::-;2374:3;2370:39;2363:46;;2130:285;2038:377;;;;:::o;2421:118::-;2508:24;2526:5;2508:24;:::i;:::-;2503:3;2496:37;2421:118;;:::o;2545:846::-;2790:4;2828:3;2817:9;2813:19;2805:27;;2878:9;2872:4;2868:20;2864:1;2853:9;2849:17;2842:47;2906:78;2979:4;2970:6;2906:78;:::i;:::-;2898:86;;3031:9;3025:4;3021:20;3016:2;3005:9;3001:18;2994:48;3059:78;3132:4;3123:6;3059:78;:::i;:::-;3051:86;;3147:72;3215:2;3204:9;3200:18;3191:6;3147:72;:::i;:::-;3229;3297:2;3286:9;3282:18;3273:6;3229:72;:::i;:::-;3311:73;3379:3;3368:9;3364:19;3355:6;3311:73;:::i;:::-;2545:846;;;;;;;;:::o;3397:329::-;3456:6;3505:2;3493:9;3484:7;3480:23;3476:32;3473:119;;;3511:79;;:::i;:::-;3473:119;3631:1;3656:53;3701:7;3692:6;3681:9;3677:22;3656:53;:::i;:::-;3646:63;;3602:117;3397:329;;;;:::o;3732:126::-;3769:7;3809:42;3802:5;3798:54;3787:65;;3732:126;;;:::o;3864:96::-;3901:7;3930:24;3948:5;3930:24;:::i;:::-;3919:35;;3864:96;;;:::o;3966:122::-;4039:24;4057:5;4039:24;:::i;:::-;4032:5;4029:35;4019:63;;4078:1;4075;4068:12;4019:63;3966:122;:::o;4094:139::-;4140:5;4178:6;4165:20;4156:29;;4194:33;4221:5;4194:33;:::i;:::-;4094:139;;;;:::o;4239:329::-;4298:6;4347:2;4335:9;4326:7;4322:23;4318:32;4315:119;;;4353:79;;:::i;:::-;4315:119;4473:1;4498:53;4543:7;4534:6;4523:9;4519:22;4498:53;:::i;:::-;4488:63;;4444:117;4239:329;;;;:::o;4574:222::-;4667:4;4705:2;4694:9;4690:18;4682:26;;4718:71;4786:1;4775:9;4771:17;4762:6;4718:71;:::i;:::-;4574:222;;;;:::o;4802:997::-;5091:4;5129:3;5118:9;5114:19;5106:27;;5143:71;5211:1;5200:9;5196:17;5187:6;5143:71;:::i;:::-;5224:72;5292:2;5281:9;5277:18;5268:6;5224:72;:::i;:::-;5306;5374:2;5363:9;5359:18;5350:6;5306:72;:::i;:::-;5388;5456:2;5445:9;5441:18;5432:6;5388:72;:::i;:::-;5470:73;5538:3;5527:9;5523:19;5514:6;5470:73;:::i;:::-;5553;5621:3;5610:9;5606:19;5597:6;5553:73;:::i;:::-;5636;5704:3;5693:9;5689:19;5680:6;5636:73;:::i;:::-;5719;5787:3;5776:9;5772:19;5763:6;5719:73;:::i;:::-;4802:997;;;;;;;;;;;:::o;5805:474::-;5873:6;5881;5930:2;5918:9;5909:7;5905:23;5901:32;5898:119;;;5936:79;;:::i;:::-;5898:119;6056:1;6081:53;6126:7;6117:6;6106:9;6102:22;6081:53;:::i;:::-;6071:63;;6027:117;6183:2;6209:53;6254:7;6245:6;6234:9;6230:22;6209:53;:::i;:::-;6199:63;;6154:118;5805:474;;;;;:::o;6285:129::-;6367:6;6401:5;6395:12;6385:22;;6285:129;;;:::o;6420:182::-;6517:11;6551:6;6546:3;6539:19;6591:4;6586:3;6582:14;6567:29;;6420:182;;;;:::o;6608:147::-;6690:4;6713:3;6705:11;;6743:4;6738:3;6734:14;6726:22;;6608:147;;;:::o;6761:180::-;6809:77;6806:1;6799:88;6906:4;6903:1;6896:15;6930:4;6927:1;6920:15;6947:120;7035:1;7028:5;7025:12;7015:46;;7041:18;;:::i;:::-;7015:46;6947:120;:::o;7073:141::-;7125:7;7154:5;7143:16;;7160:48;7202:5;7160:48;:::i;:::-;7073:141;;;:::o;7220:::-;7283:9;7316:39;7349:5;7316:39;:::i;:::-;7303:52;;7220:141;;;:::o;7367:147::-;7457:50;7501:5;7457:50;:::i;:::-;7452:3;7445:63;7367:147;;:::o;7520:205::-;7602:10;7623:59;7678:3;7670:6;7623:59;:::i;:::-;7714:4;7709:3;7705:14;7691:28;;7520:205;;;;:::o;7731:128::-;7816:4;7848;7843:3;7839:14;7831:22;;7731:128;;;:::o;7919:801::-;8051:3;8080:69;8143:5;8080:69;:::i;:::-;8165:84;8242:6;8237:3;8165:84;:::i;:::-;8158:91;;8273:71;8338:5;8273:71;:::i;:::-;8367:7;8398:1;8383:312;8408:6;8405:1;8402:13;8383:312;;;8484:6;8478:13;8511:76;8583:3;8568:13;8511:76;:::i;:::-;8504:83;;8610:75;8678:6;8610:75;:::i;:::-;8600:85;;8443:252;8430:1;8427;8423:9;8418:14;;8383:312;;;8387:14;8711:3;8704:10;;8056:664;;;7919:801;;;;:::o;8726:131::-;8810:6;8844:5;8838:12;8828:22;;8726:131;;;:::o;8863:149::-;8947:4;8970:3;8962:11;;9000:4;8995:3;8991:14;8983:22;;8863:149;;;:::o;9018:122::-;9108:1;9101:5;9098:12;9088:46;;9114:18;;:::i;:::-;9088:46;9018:122;:::o;9146:145::-;9200:7;9229:5;9218:16;;9235:50;9279:5;9235:50;:::i;:::-;9146:145;;;:::o;9297:::-;9362:9;9395:41;9430:5;9395:41;:::i;:::-;9382:54;;9297:145;;;:::o;9448:151::-;9540:52;9586:5;9540:52;:::i;:::-;9535:3;9528:65;9448:151;;:::o;9605:209::-;9689:10;9710:61;9767:3;9759:6;9710:61;:::i;:::-;9803:4;9798:3;9794:14;9780:28;;9605:209;;;;:::o;9820:130::-;9907:4;9939;9934:3;9930:14;9922:22;;9820:130;;;:::o;10012:811::-;10146:3;10175:71;10240:5;10175:71;:::i;:::-;10262:84;10339:6;10334:3;10262:84;:::i;:::-;10255:91;;10370:73;10437:5;10370:73;:::i;:::-;10466:7;10497:1;10482:316;10507:6;10504:1;10501:13;10482:316;;;10583:6;10577:13;10610:78;10684:3;10669:13;10610:78;:::i;:::-;10603:85;;10711:77;10781:6;10711:77;:::i;:::-;10701:87;;10542:256;10529:1;10526;10522:9;10517:14;;10482:316;;;10486:14;10814:3;10807:10;;10151:672;;;10012:811;;;;:::o;10829:114::-;10896:6;10930:5;10924:12;10914:22;;10829:114;;;:::o;10949:184::-;11048:11;11082:6;11077:3;11070:19;11122:4;11117:3;11113:14;11098:29;;10949:184;;;;:::o;11139:132::-;11206:4;11229:3;11221:11;;11259:4;11254:3;11250:14;11242:22;;11139:132;;;:::o;11277:108::-;11354:24;11372:5;11354:24;:::i;:::-;11349:3;11342:37;11277:108;;:::o;11391:179::-;11460:10;11481:46;11523:3;11515:6;11481:46;:::i;:::-;11559:4;11554:3;11550:14;11536:28;;11391:179;;;;:::o;11576:113::-;11646:4;11678;11673:3;11669:14;11661:22;;11576:113;;;:::o;11725:732::-;11844:3;11873:54;11921:5;11873:54;:::i;:::-;11943:86;12022:6;12017:3;11943:86;:::i;:::-;11936:93;;12053:56;12103:5;12053:56;:::i;:::-;12132:7;12163:1;12148:284;12173:6;12170:1;12167:13;12148:284;;;12249:6;12243:13;12276:63;12335:3;12320:13;12276:63;:::i;:::-;12269:70;;12362:60;12415:6;12362:60;:::i;:::-;12352:70;;12208:224;12195:1;12192;12188:9;12183:14;;12148:284;;;12152:14;12448:3;12441:10;;11849:608;;;11725:732;;;;:::o;12463:951::-;12790:4;12828:2;12817:9;12813:18;12805:26;;12877:9;12871:4;12867:20;12863:1;12852:9;12848:17;12841:47;12905:121;13021:4;13012:6;12905:121;:::i;:::-;12897:129;;13073:9;13067:4;13063:20;13058:2;13047:9;13043:18;13036:48;13101:123;13219:4;13210:6;13101:123;:::i;:::-;13093:131;;13271:9;13265:4;13261:20;13256:2;13245:9;13241:18;13234:48;13299:108;13402:4;13393:6;13299:108;:::i;:::-;13291:116;;12463:951;;;;;;:::o;13420:117::-;13529:1;13526;13519:12;13543:180;13591:77;13588:1;13581:88;13688:4;13685:1;13678:15;13712:4;13709:1;13702:15;13729:281;13812:27;13834:4;13812:27;:::i;:::-;13804:6;13800:40;13942:6;13930:10;13927:22;13906:18;13894:10;13891:34;13888:62;13885:88;;;13953:18;;:::i;:::-;13885:88;13993:10;13989:2;13982:22;13772:238;13729:281;;:::o;14016:129::-;14050:6;14077:20;;:::i;:::-;14067:30;;14106:33;14134:4;14126:6;14106:33;:::i;:::-;14016:129;;;:::o;14151:328::-;14245:4;14335:18;14327:6;14324:30;14321:56;;;14357:18;;:::i;:::-;14321:56;14407:4;14399:6;14395:17;14387:25;;14467:4;14461;14457:15;14449:23;;14151:328;;;:::o;14485:117::-;14594:1;14591;14584:12;14653:761;14766:5;14791:98;14807:81;14881:6;14807:81;:::i;:::-;14791:98;:::i;:::-;14782:107;;14909:5;14938:6;14931:5;14924:21;14972:4;14965:5;14961:16;14954:23;;15025:4;15017:6;15013:17;15005:6;15001:30;15054:3;15046:6;15043:15;15040:122;;;15073:79;;:::i;:::-;15040:122;15188:6;15171:237;15205:6;15200:3;15197:15;15171:237;;;15280:3;15309:54;15359:3;15347:10;15309:54;:::i;:::-;15304:3;15297:67;15393:4;15388:3;15384:14;15377:21;;15247:161;15231:4;15226:3;15222:14;15215:21;;15171:237;;;15175:21;14772:642;;14653:761;;;;;:::o;15465:404::-;15553:5;15602:3;15595:4;15587:6;15583:17;15579:27;15569:122;;15610:79;;:::i;:::-;15569:122;15727:6;15714:20;15752:111;15859:3;15851:6;15844:4;15836:6;15832:17;15752:111;:::i;:::-;15743:120;;15559:310;15465:404;;;;:::o;15875:311::-;15952:4;16042:18;16034:6;16031:30;16028:56;;;16064:18;;:::i;:::-;16028:56;16114:4;16106:6;16102:17;16094:25;;16174:4;16168;16164:15;16156:23;;15875:311;;;:::o;16209:710::-;16305:5;16330:81;16346:64;16403:6;16346:64;:::i;:::-;16330:81;:::i;:::-;16321:90;;16431:5;16460:6;16453:5;16446:21;16494:4;16487:5;16483:16;16476:23;;16547:4;16539:6;16535:17;16527:6;16523:30;16576:3;16568:6;16565:15;16562:122;;;16595:79;;:::i;:::-;16562:122;16710:6;16693:220;16727:6;16722:3;16719:15;16693:220;;;16802:3;16831:37;16864:3;16852:10;16831:37;:::i;:::-;16826:3;16819:50;16898:4;16893:3;16889:14;16882:21;;16769:144;16753:4;16748:3;16744:14;16737:21;;16693:220;;;16697:21;16311:608;;16209:710;;;;;:::o;16942:370::-;17013:5;17062:3;17055:4;17047:6;17043:17;17039:27;17029:122;;17070:79;;:::i;:::-;17029:122;17187:6;17174:20;17212:94;17302:3;17294:6;17287:4;17279:6;17275:17;17212:94;:::i;:::-;17203:103;;17019:293;16942:370;;;;:::o;17318:1073::-;17462:6;17470;17478;17527:2;17515:9;17506:7;17502:23;17498:32;17495:119;;;17533:79;;:::i;:::-;17495:119;17653:1;17678:53;17723:7;17714:6;17703:9;17699:22;17678:53;:::i;:::-;17668:63;;17624:117;17808:2;17797:9;17793:18;17780:32;17839:18;17831:6;17828:30;17825:117;;;17861:79;;:::i;:::-;17825:117;17966:95;18053:7;18044:6;18033:9;18029:22;17966:95;:::i;:::-;17956:105;;17751:320;18138:2;18127:9;18123:18;18110:32;18169:18;18161:6;18158:30;18155:117;;;18191:79;;:::i;:::-;18155:117;18296:78;18366:7;18357:6;18346:9;18342:22;18296:78;:::i;:::-;18286:88;;18081:303;17318:1073;;;;;:::o;18397:157::-;18497:50;18541:5;18497:50;:::i;:::-;18492:3;18485:63;18397:157;;:::o;18560:161::-;18662:52;18708:5;18662:52;:::i;:::-;18657:3;18650:65;18560:161;;:::o;18727:104::-;18792:6;18820:4;18810:14;;18727:104;;;:::o;18837:143::-;18934:11;18971:3;18956:18;;18837:143;;;;:::o;18986:98::-;19051:4;19074:3;19066:11;;18986:98;;;:::o;19090:111::-;19158:4;19190;19185:3;19181:14;19173:22;;19090:111;;;:::o;19239:694::-;19375:52;19421:5;19375:52;:::i;:::-;19443:84;19520:6;19515:3;19443:84;:::i;:::-;19436:91;;19551:54;19599:5;19551:54;:::i;:::-;19628:7;19659:1;19644:282;19669:6;19666:1;19663:13;19644:282;;;19745:6;19739:13;19772:63;19831:3;19816:13;19772:63;:::i;:::-;19765:70;;19858:58;19909:6;19858:58;:::i;:::-;19848:68;;19704:222;19691:1;19688;19684:9;19679:14;;19644:282;;;19648:14;19351:582;;;19239:694;;:::o;19939:90::-;19973:7;20016:5;20009:13;20002:21;19991:32;;19939:90;;;:::o;20035:109::-;20116:21;20131:5;20116:21;:::i;:::-;20111:3;20104:34;20035:109;;:::o;20150:1010::-;20473:4;20511:3;20500:9;20496:19;20488:27;;20525:84;20606:1;20595:9;20591:17;20582:6;20525:84;:::i;:::-;20619:87;20702:2;20691:9;20687:18;20678:6;20619:87;:::i;:::-;20716:72;20784:2;20773:9;20769:18;20760:6;20716:72;:::i;:::-;20798:118;20912:2;20901:9;20897:18;20888:6;20798:118;:::i;:::-;20926:73;20994:3;20983:9;20979:19;20970:6;20926:73;:::i;:::-;21009:67;21071:3;21060:9;21056:19;21047:6;21009:67;:::i;:::-;21086;21148:3;21137:9;21133:19;21124:6;21086:67;:::i;:::-;20150:1010;;;;;;;;;;:::o;21166:653::-;21260:6;21268;21276;21325:2;21313:9;21304:7;21300:23;21296:32;21293:119;;;21331:79;;:::i;:::-;21293:119;21451:1;21476:53;21521:7;21512:6;21501:9;21497:22;21476:53;:::i;:::-;21466:63;;21422:117;21578:2;21604:53;21649:7;21640:6;21629:9;21625:22;21604:53;:::i;:::-;21594:63;;21549:118;21706:2;21732:70;21794:7;21785:6;21774:9;21770:22;21732:70;:::i;:::-;21722:80;;21677:135;21166:653;;;;;:::o;21825:117::-;21934:1;21931;21924:12;21948:308;22010:4;22100:18;22092:6;22089:30;22086:56;;;22122:18;;:::i;:::-;22086:56;22160:29;22182:6;22160:29;:::i;:::-;22152:37;;22244:4;22238;22234:15;22226:23;;21948:308;;;:::o;22262:148::-;22360:6;22355:3;22350;22337:30;22401:1;22392:6;22387:3;22383:16;22376:27;22262:148;;;:::o;22416:425::-;22494:5;22519:66;22535:49;22577:6;22535:49;:::i;:::-;22519:66;:::i;:::-;22510:75;;22608:6;22601:5;22594:21;22646:4;22639:5;22635:16;22684:3;22675:6;22670:3;22666:16;22663:25;22660:112;;;22691:79;;:::i;:::-;22660:112;22781:54;22828:6;22823:3;22818;22781:54;:::i;:::-;22500:341;22416:425;;;;;:::o;22861:340::-;22917:5;22966:3;22959:4;22951:6;22947:17;22943:27;22933:122;;22974:79;;:::i;:::-;22933:122;23091:6;23078:20;23116:79;23191:3;23183:6;23176:4;23168:6;23164:17;23116:79;:::i;:::-;23107:88;;22923:278;22861:340;;;;:::o;23207:654::-;23285:6;23293;23342:2;23330:9;23321:7;23317:23;23313:32;23310:119;;;23348:79;;:::i;:::-;23310:119;23468:1;23493:53;23538:7;23529:6;23518:9;23514:22;23493:53;:::i;:::-;23483:63;;23439:117;23623:2;23612:9;23608:18;23595:32;23654:18;23646:6;23643:30;23640:117;;;23676:79;;:::i;:::-;23640:117;23781:63;23836:7;23827:6;23816:9;23812:22;23781:63;:::i;:::-;23771:73;;23566:288;23207:654;;;;;:::o;23867:474::-;23935:6;23943;23992:2;23980:9;23971:7;23967:23;23963:32;23960:119;;;23998:79;;:::i;:::-;23960:119;24118:1;24143:53;24188:7;24179:6;24168:9;24164:22;24143:53;:::i;:::-;24133:63;;24089:117;24245:2;24271:53;24316:7;24307:6;24296:9;24292:22;24271:53;:::i;:::-;24261:63;;24216:118;23867:474;;;;;:::o;24347:313::-;24460:4;24498:2;24487:9;24483:18;24475:26;;24547:9;24541:4;24537:20;24533:1;24522:9;24518:17;24511:47;24575:78;24648:4;24639:6;24575:78;:::i;:::-;24567:86;;24347:313;;;;:::o;24666:118::-;24753:24;24771:5;24753:24;:::i;:::-;24748:3;24741:37;24666:118;;:::o;24790:222::-;24883:4;24921:2;24910:9;24906:18;24898:26;;24934:71;25002:1;24991:9;24987:17;24978:6;24934:71;:::i;:::-;24790:222;;;;:::o;25018:918::-;25295:4;25333:3;25322:9;25318:19;25310:27;;25347:71;25415:1;25404:9;25400:17;25391:6;25347:71;:::i;:::-;25428:85;25509:2;25498:9;25494:18;25485:6;25428:85;:::i;:::-;25523:87;25606:2;25595:9;25591:18;25582:6;25523:87;:::i;:::-;25620:72;25688:2;25677:9;25673:18;25664:6;25620:72;:::i;:::-;25702:73;25770:3;25759:9;25755:19;25746:6;25702:73;:::i;:::-;25785:67;25847:3;25836:9;25832:19;25823:6;25785:67;:::i;:::-;25862;25924:3;25913:9;25909:19;25900:6;25862:67;:::i;:::-;25018:918;;;;;;;;;;:::o;25942:363::-;26018:6;26067:2;26055:9;26046:7;26042:23;26038:32;26035:119;;;26073:79;;:::i;:::-;26035:119;26193:1;26218:70;26280:7;26271:6;26260:9;26256:22;26218:70;:::i;:::-;26208:80;;26164:134;25942:363;;;;:::o;26311:169::-;26451:21;26447:1;26439:6;26435:14;26428:45;26311:169;:::o;26486:366::-;26628:3;26649:67;26713:2;26708:3;26649:67;:::i;:::-;26642:74;;26725:93;26814:3;26725:93;:::i;:::-;26843:2;26838:3;26834:12;26827:19;;26486:366;;;:::o;26858:419::-;27024:4;27062:2;27051:9;27047:18;27039:26;;27111:9;27105:4;27101:20;27097:1;27086:9;27082:17;27075:47;27139:131;27265:4;27139:131;:::i;:::-;27131:139;;26858:419;;;:::o;27283:220::-;27423:34;27419:1;27411:6;27407:14;27400:58;27492:3;27487:2;27479:6;27475:15;27468:28;27283:220;:::o;27509:366::-;27651:3;27672:67;27736:2;27731:3;27672:67;:::i;:::-;27665:74;;27748:93;27837:3;27748:93;:::i;:::-;27866:2;27861:3;27857:12;27850:19;;27509:366;;;:::o;27881:419::-;28047:4;28085:2;28074:9;28070:18;28062:26;;28134:9;28128:4;28124:20;28120:1;28109:9;28105:17;28098:47;28162:131;28288:4;28162:131;:::i;:::-;28154:139;;27881:419;;;:::o;28306:180::-;28446:32;28442:1;28434:6;28430:14;28423:56;28306:180;:::o;28492:366::-;28634:3;28655:67;28719:2;28714:3;28655:67;:::i;:::-;28648:74;;28731:93;28820:3;28731:93;:::i;:::-;28849:2;28844:3;28840:12;28833:19;;28492:366;;;:::o;28864:419::-;29030:4;29068:2;29057:9;29053:18;29045:26;;29117:9;29111:4;29107:20;29103:1;29092:9;29088:17;29081:47;29145:131;29271:4;29145:131;:::i;:::-;29137:139;;28864:419;;;:::o;29289:179::-;29429:31;29425:1;29417:6;29413:14;29406:55;29289:179;:::o;29474:366::-;29616:3;29637:67;29701:2;29696:3;29637:67;:::i;:::-;29630:74;;29713:93;29802:3;29713:93;:::i;:::-;29831:2;29826:3;29822:12;29815:19;;29474:366;;;:::o;29846:419::-;30012:4;30050:2;30039:9;30035:18;30027:26;;30099:9;30093:4;30089:20;30085:1;30074:9;30070:17;30063:47;30127:131;30253:4;30127:131;:::i;:::-;30119:139;;29846:419;;;:::o;30271:180::-;30319:77;30316:1;30309:88;30416:4;30413:1;30406:15;30440:4;30437:1;30430:15;30457:233;30496:3;30519:24;30537:5;30519:24;:::i;:::-;30510:33;;30565:66;30558:5;30555:77;30552:103;;30635:18;;:::i;:::-;30552:103;30682:1;30675:5;30671:13;30664:20;;30457:233;;;:::o;30696:191::-;30736:3;30755:20;30773:1;30755:20;:::i;:::-;30750:25;;30789:20;30807:1;30789:20;:::i;:::-;30784:25;;30832:1;30829;30825:9;30818:16;;30853:3;30850:1;30847:10;30844:36;;;30860:18;;:::i;:::-;30844:36;30696:191;;;;:::o;30893:472::-;31057:4;31095:2;31084:9;31080:18;31072:26;;31108:86;31191:1;31180:9;31176:17;31167:6;31108:86;:::i;:::-;31204:72;31272:2;31261:9;31257:18;31248:6;31204:72;:::i;:::-;31286;31354:2;31343:9;31339:18;31330:6;31286:72;:::i;:::-;30893:472;;;;;;:::o;31371:180::-;31419:77;31416:1;31409:88;31516:4;31513:1;31506:15;31540:4;31537:1;31530:15;31557:320;31601:6;31638:1;31632:4;31628:12;31618:22;;31685:1;31679:4;31675:12;31706:18;31696:81;;31762:4;31754:6;31750:17;31740:27;;31696:81;31824:2;31816:6;31813:14;31793:18;31790:38;31787:84;;31843:18;;:::i;:::-;31787:84;31608:269;31557:320;;;:::o;31883:220::-;32023:34;32019:1;32011:6;32007:14;32000:58;32092:3;32087:2;32079:6;32075:15;32068:28;31883:220;:::o;32109:366::-;32251:3;32272:67;32336:2;32331:3;32272:67;:::i;:::-;32265:74;;32348:93;32437:3;32348:93;:::i;:::-;32466:2;32461:3;32457:12;32450:19;;32109:366;;;:::o;32481:419::-;32647:4;32685:2;32674:9;32670:18;32662:26;;32734:9;32728:4;32724:20;32720:1;32709:9;32705:17;32698:47;32762:131;32888:4;32762:131;:::i;:::-;32754:139;;32481:419;;;:::o;32906:175::-;33046:27;33042:1;33034:6;33030:14;33023:51;32906:175;:::o;33087:366::-;33229:3;33250:67;33314:2;33309:3;33250:67;:::i;:::-;33243:74;;33326:93;33415:3;33326:93;:::i;:::-;33444:2;33439:3;33435:12;33428:19;;33087:366;;;:::o;33459:419::-;33625:4;33663:2;33652:9;33648:18;33640:26;;33712:9;33706:4;33702:20;33698:1;33687:9;33683:17;33676:47;33740:131;33866:4;33740:131;:::i;:::-;33732:139;;33459:419;;;:::o;33884:172::-;34024:24;34020:1;34012:6;34008:14;34001:48;33884:172;:::o;34062:366::-;34204:3;34225:67;34289:2;34284:3;34225:67;:::i;:::-;34218:74;;34301:93;34390:3;34301:93;:::i;:::-;34419:2;34414:3;34410:12;34403:19;;34062:366;;;:::o;34434:419::-;34600:4;34638:2;34627:9;34623:18;34615:26;;34687:9;34681:4;34677:20;34673:1;34662:9;34658:17;34651:47;34715:131;34841:4;34715:131;:::i;:::-;34707:139;;34434:419;;;:::o;34859:163::-;34999:15;34995:1;34987:6;34983:14;34976:39;34859:163;:::o;35028:366::-;35170:3;35191:67;35255:2;35250:3;35191:67;:::i;:::-;35184:74;;35267:93;35356:3;35267:93;:::i;:::-;35385:2;35380:3;35376:12;35369:19;;35028:366;;;:::o;35400:419::-;35566:4;35604:2;35593:9;35589:18;35581:26;;35653:9;35647:4;35643:20;35639:1;35628:9;35624:17;35617:47;35681:131;35807:4;35681:131;:::i;:::-;35673:139;;35400:419;;;:::o;35825:194::-;35865:4;35885:20;35903:1;35885:20;:::i;:::-;35880:25;;35919:20;35937:1;35919:20;:::i;:::-;35914:25;;35963:1;35960;35956:9;35948:17;;35987:1;35981:4;35978:11;35975:37;;;35992:18;;:::i;:::-;35975:37;35825:194;;;;:::o;36025:180::-;36073:77;36070:1;36063:88;36170:4;36167:1;36160:15;36194:4;36191:1;36184:15;36211:172;36351:24;36347:1;36339:6;36335:14;36328:48;36211:172;:::o;36389:366::-;36531:3;36552:67;36616:2;36611:3;36552:67;:::i;:::-;36545:74;;36628:93;36717:3;36628:93;:::i;:::-;36746:2;36741:3;36737:12;36730:19;;36389:366;;;:::o;36761:419::-;36927:4;36965:2;36954:9;36950:18;36942:26;;37014:9;37008:4;37004:20;37000:1;36989:9;36985:17;36978:47;37042:131;37168:4;37042:131;:::i;:::-;37034:139;;36761:419;;;:::o;37186:167::-;37326:19;37322:1;37314:6;37310:14;37303:43;37186:167;:::o;37359:366::-;37501:3;37522:67;37586:2;37581:3;37522:67;:::i;:::-;37515:74;;37598:93;37687:3;37598:93;:::i;:::-;37716:2;37711:3;37707:12;37700:19;;37359:366;;;:::o;37731:419::-;37897:4;37935:2;37924:9;37920:18;37912:26;;37984:9;37978:4;37974:20;37970:1;37959:9;37955:17;37948:47;38012:131;38138:4;38012:131;:::i;:::-;38004:139;;37731:419;;;:::o;38156:225::-;38296:34;38292:1;38284:6;38280:14;38273:58;38365:8;38360:2;38352:6;38348:15;38341:33;38156:225;:::o;38387:366::-;38529:3;38550:67;38614:2;38609:3;38550:67;:::i;:::-;38543:74;;38626:93;38715:3;38626:93;:::i;:::-;38744:2;38739:3;38735:12;38728:19;;38387:366;;;:::o;38759:419::-;38925:4;38963:2;38952:9;38948:18;38940:26;;39012:9;39006:4;39002:20;38998:1;38987:9;38983:17;38976:47;39040:131;39166:4;39040:131;:::i;:::-;39032:139;;38759:419;;;:::o;39184:229::-;39324:34;39320:1;39312:6;39308:14;39301:58;39393:12;39388:2;39380:6;39376:15;39369:37;39184:229;:::o;39419:366::-;39561:3;39582:67;39646:2;39641:3;39582:67;:::i;:::-;39575:74;;39658:93;39747:3;39658:93;:::i;:::-;39776:2;39771:3;39767:12;39760:19;;39419:366;;;:::o;39791:419::-;39957:4;39995:2;39984:9;39980:18;39972:26;;40044:9;40038:4;40034:20;40030:1;40019:9;40015:17;40008:47;40072:131;40198:4;40072:131;:::i;:::-;40064:139;;39791:419;;;:::o;40216:175::-;40356:27;40352:1;40344:6;40340:14;40333:51;40216:175;:::o;40397:366::-;40539:3;40560:67;40624:2;40619:3;40560:67;:::i;:::-;40553:74;;40636:93;40725:3;40636:93;:::i;:::-;40754:2;40749:3;40745:12;40738:19;;40397:366;;;:::o;40769:419::-;40935:4;40973:2;40962:9;40958:18;40950:26;;41022:9;41016:4;41012:20;41008:1;40997:9;40993:17;40986:47;41050:131;41176:4;41050:131;:::i;:::-;41042:139;;40769:419;;;:::o;41194:167::-;41334:19;41330:1;41322:6;41318:14;41311:43;41194:167;:::o;41367:366::-;41509:3;41530:67;41594:2;41589:3;41530:67;:::i;:::-;41523:74;;41606:93;41695:3;41606:93;:::i;:::-;41724:2;41719:3;41715:12;41708:19;;41367:366;;;:::o;41739:419::-;41905:4;41943:2;41932:9;41928:18;41920:26;;41992:9;41986:4;41982:20;41978:1;41967:9;41963:17;41956:47;42020:131;42146:4;42020:131;:::i;:::-;42012:139;;41739:419;;;:::o;42164:423::-;42305:4;42343:2;42332:9;42328:18;42320:26;;42392:9;42386:4;42382:20;42378:1;42367:9;42363:17;42356:47;42420:78;42493:4;42484:6;42420:78;:::i;:::-;42412:86;;42508:72;42576:2;42565:9;42561:18;42552:6;42508:72;:::i;:::-;42164:423;;;;;:::o;42593:181::-;42733:33;42729:1;42721:6;42717:14;42710:57;42593:181;:::o;42780:366::-;42922:3;42943:67;43007:2;43002:3;42943:67;:::i;:::-;42936:74;;43019:93;43108:3;43019:93;:::i;:::-;43137:2;43132:3;43128:12;43121:19;;42780:366;;;:::o;43152:419::-;43318:4;43356:2;43345:9;43341:18;43333:26;;43405:9;43399:4;43395:20;43391:1;43380:9;43376:17;43369:47;43433:131;43559:4;43433:131;:::i;:::-;43425:139;;43152:419;;;:::o;43577:177::-;43717:29;43713:1;43705:6;43701:14;43694:53;43577:177;:::o;43760:366::-;43902:3;43923:67;43987:2;43982:3;43923:67;:::i;:::-;43916:74;;43999:93;44088:3;43999:93;:::i;:::-;44117:2;44112:3;44108:12;44101:19;;43760:366;;;:::o;44132:419::-;44298:4;44336:2;44325:9;44321:18;44313:26;;44385:9;44379:4;44375:20;44371:1;44360:9;44356:17;44349:47;44413:131;44539:4;44413:131;:::i;:::-;44405:139;;44132:419;;;:::o;44557:174::-;44697:26;44693:1;44685:6;44681:14;44674:50;44557:174;:::o;44737:366::-;44879:3;44900:67;44964:2;44959:3;44900:67;:::i;:::-;44893:74;;44976:93;45065:3;44976:93;:::i;:::-;45094:2;45089:3;45085:12;45078:19;;44737:366;;;:::o;45109:419::-;45275:4;45313:2;45302:9;45298:18;45290:26;;45362:9;45356:4;45352:20;45348:1;45337:9;45333:17;45326:47;45390:131;45516:4;45390:131;:::i;:::-;45382:139;;45109:419;;;:::o;45534:362::-;45670:4;45708:2;45697:9;45693:18;45685:26;;45721:86;45804:1;45793:9;45789:17;45780:6;45721:86;:::i;:::-;45817:72;45885:2;45874:9;45870:18;45861:6;45817:72;:::i;:::-;45534:362;;;;;:::o;45902:442::-;46051:4;46089:2;46078:9;46074:18;46066:26;;46102:71;46170:1;46159:9;46155:17;46146:6;46102:71;:::i;:::-;46183:72;46251:2;46240:9;46236:18;46227:6;46183:72;:::i;:::-;46265;46333:2;46322:9;46318:18;46309:6;46265:72;:::i;:::-;45902:442;;;;;;:::o;46350:410::-;46390:7;46413:20;46431:1;46413:20;:::i;:::-;46408:25;;46447:20;46465:1;46447:20;:::i;:::-;46442:25;;46502:1;46499;46495:9;46524:30;46542:11;46524:30;:::i;:::-;46513:41;;46703:1;46694:7;46690:15;46687:1;46684:22;46664:1;46657:9;46637:83;46614:139;;46733:18;;:::i;:::-;46614:139;46398:362;46350:410;;;;:::o;46766:180::-;46814:77;46811:1;46804:88;46911:4;46908:1;46901:15;46935:4;46932:1;46925:15;46952:185;46992:1;47009:20;47027:1;47009:20;:::i;:::-;47004:25;;47043:20;47061:1;47043:20;:::i;:::-;47038:25;;47082:1;47072:35;;47087:18;;:::i;:::-;47072:35;47129:1;47126;47122:9;47117:14;;46952:185;;;;:::o;47143:583::-;47335:4;47373:3;47362:9;47358:19;47350:27;;47387:86;47470:1;47459:9;47455:17;47446:6;47387:86;:::i;:::-;47483:72;47551:2;47540:9;47536:18;47527:6;47483:72;:::i;:::-;47565;47633:2;47622:9;47618:18;47609:6;47565:72;:::i;:::-;47647;47715:2;47704:9;47700:18;47691:6;47647:72;:::i;:::-;47143:583;;;;;;;:::o;47732:332::-;47853:4;47891:2;47880:9;47876:18;47868:26;;47904:71;47972:1;47961:9;47957:17;47948:6;47904:71;:::i;:::-;47985:72;48053:2;48042:9;48038:18;48029:6;47985:72;:::i;:::-;47732:332;;;;;:::o","linkReferences":{}},"methodIdentifiers":{"TOTAL_BALLS()":"dba71be6","balls(uint256)":"90004781","cancelBall(uint256,string)":"67d85375","closeBall(uint256)":"162523b3","currentBall()":"98c40f35","emergencyPause()":"51858e27","factory()":"c45a0155","getBallBettingDetails(uint256)":"3371c0bf","getBallInfo(uint256)":"53be326a","getBallOutcomeString(uint8)":"9e4f372b","getContractBalance()":"6f9fb98a","getMatchInfo()":"063c67c2","getMultipleBallsInfo(uint256,uint256)":"3e98275f","getUserBalance(address)":"47734892","getUserBetForBall(uint256,address,uint8)":"55b00637","getUserTotalBetForBall(uint256,address)":"6e777921","matchId()":"99892e47","openBall(uint256)":"6c21e514","owner()":"8da5cb5b","placeBet(uint256,uint8)":"03edf914","placeBets(uint256,uint8[],uint256[])":"42c4ee5d","reportBallResult(uint256,uint8)":"edfbcba3","teamA()":"826df9aa","teamB()":"8aa7c3e8","userBalances(address)":"26224c64","withdraw()":"3ccfd60b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_teamB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ballNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BallCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ballNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BallClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ballNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BallOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ballNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CricketBettingGame.BallOutcome\",\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BallResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ballNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CricketBettingGame.BallOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ballNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefunded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bettorsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BetsRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MatchCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ballNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CricketBettingGame.BallOutcome\",\"name\":\"winningOutcome\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WinningsDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_BALLS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ballNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum CricketBettingGame.BallState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum CricketBettingGame.BallOutcome\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueBettorCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"distributed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"cancelBall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"}],\"name\":\"closeBall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"}],\"name\":\"getBallBettingDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boundaryBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wicketBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dotBallBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneRunBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twoRunsBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extrasBets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBettors\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"}],\"name\":\"getBallInfo\",\"outputs\":[{\"internalType\":\"enum CricketBettingGame.BallState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum CricketBettingGame.BallOutcome\",\"name\":\"result\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256[6]\",\"name\":\"outcomeBets\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256\",\"name\":\"uniqueBettorCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"distributed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CricketBettingGame.BallOutcome\",\"name\":\"_outcome\",\"type\":\"uint8\"}],\"name\":\"getBallOutcomeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMatchInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBall\",\"type\":\"uint256\"}],\"name\":\"getMultipleBallsInfo\",\"outputs\":[{\"internalType\":\"enum CricketBettingGame.BallState[]\",\"name\":\"states\",\"type\":\"uint8[]\"},{\"internalType\":\"enum CricketBettingGame.BallOutcome[]\",\"name\":\"results\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalPools\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum CricketBettingGame.BallOutcome\",\"name\":\"_outcome\",\"type\":\"uint8\"}],\"name\":\"getUserBetForBall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalBetForBall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"}],\"name\":\"openBall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum CricketBettingGame.BallOutcome\",\"name\":\"_outcome\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum CricketBettingGame.BallOutcome[]\",\"name\":\"_outcomes\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"placeBets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ballNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum CricketBettingGame.BallOutcome\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"reportBallResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamA\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamB\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CricketBettingGame.sol\":\"CricketBettingGame\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/CricketBettingGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// Individual Cricket Match Betting Contract\\ncontract CricketBettingGame {\\n    address public owner;\\n    address public factory;\\n\\n    string public teamA;\\n    string public teamB;\\n    uint256 public matchId;\\n\\n    uint256 public constant TOTAL_BALLS = 120; // 20 overs * 6 balls\\n    uint256 public currentBall = 0;\\n\\n    enum BallOutcome {\\n        PENDING, // 0 - Default state\\n        BOUNDARY, // 1 - 4 or 6 runs\\n        WICKET, // 2 - Batsman out\\n        DOT_BALL, // 3 - 0 runs\\n        ONE_RUN, // 4 - 1 run\\n        TWO_RUNS, // 5 - 2 runs\\n        EXTRAS // 6 - Wide or No ball\\n    }\\n\\n    enum BallState {\\n        CLOSED,\\n        OPEN,\\n        RESOLVED\\n    }\\n\\n    struct Ball {\\n        uint256 ballNumber;\\n        BallState state;\\n        BallOutcome result;\\n        mapping(BallOutcome => uint256) totalBets; // outcome => total amount\\n        mapping(BallOutcome => address[]) bettors; // outcome => list of bettors\\n        mapping(address => mapping(BallOutcome => uint256)) userBets; // user => outcome => amount\\n        mapping(address => bool) hasBet; // Track if user has bet on this ball\\n        uint256 totalPool;\\n        uint256 uniqueBettorCount;\\n        bool distributed;\\n        bool refunded;\\n    }\\n\\n    mapping(uint256 => Ball) public balls;\\n    mapping(address => uint256) public userBalances;\\n\\n    // Events for frontend consumption\\n    event BallOpened(uint256 indexed ballNumber, uint256 timestamp);\\n    event BallClosed(uint256 indexed ballNumber, uint256 timestamp);\\n    event BetPlaced(\\n        uint256 indexed ballNumber,\\n        address indexed bettor,\\n        BallOutcome outcome,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n    event BallResult(\\n        uint256 indexed ballNumber,\\n        BallOutcome result,\\n        uint256 timestamp\\n    );\\n    event WinningsDistributed(\\n        uint256 indexed ballNumber,\\n        BallOutcome winningOutcome,\\n        uint256 totalPool,\\n        uint256 winnersCount,\\n        uint256 timestamp\\n    );\\n    event BetsRefunded(\\n        uint256 indexed ballNumber,\\n        uint256 totalRefunded,\\n        uint256 bettorsCount,\\n        uint256 timestamp\\n    );\\n    event MatchCompleted(uint256 matchId, uint256 timestamp);\\n    event BallCancelled(\\n        uint256 indexed ballNumber,\\n        string reason,\\n        uint256 timestamp\\n    );\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner can call this function\\\");\\n        _;\\n    }\\n\\n    modifier ballExists(uint256 _ballNumber) {\\n        require(\\n            _ballNumber > 0 && _ballNumber <= TOTAL_BALLS,\\n            \\\"Invalid ball number\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _teamA,\\n        string memory _teamB,\\n        uint256 _matchId,\\n        address _owner\\n    ) {\\n        teamA = _teamA;\\n        teamB = _teamB;\\n        matchId = _matchId;\\n        owner = _owner;\\n        factory = msg.sender;\\n    }\\n\\n    // Owner opens betting for a specific ball\\n    function openBall(\\n        uint256 _ballNumber\\n    ) external onlyOwner ballExists(_ballNumber) {\\n        require(\\n            balls[_ballNumber].state == BallState.CLOSED,\\n            \\\"Ball already opened or resolved\\\"\\n        );\\n        require(_ballNumber == currentBall + 1, \\\"Must open balls in sequence\\\");\\n\\n        balls[_ballNumber].ballNumber = _ballNumber;\\n        balls[_ballNumber].state = BallState.OPEN;\\n        balls[_ballNumber].result = BallOutcome.PENDING;\\n        currentBall = _ballNumber;\\n\\n        emit BallOpened(_ballNumber, block.timestamp);\\n    }\\n\\n    // Owner closes betting for a specific ball\\n    function closeBall(\\n        uint256 _ballNumber\\n    ) external onlyOwner ballExists(_ballNumber) {\\n        require(\\n            balls[_ballNumber].state == BallState.OPEN,\\n            \\\"Ball not open for betting\\\"\\n        );\\n\\n        balls[_ballNumber].state = BallState.CLOSED;\\n\\n        emit BallClosed(_ballNumber, block.timestamp);\\n    }\\n\\n    // Users place bets on a ball outcome (can bet multiple times on different outcomes)\\n    function placeBet(\\n        uint256 _ballNumber,\\n        BallOutcome _outcome\\n    ) external payable ballExists(_ballNumber) {\\n        require(msg.value > 0, \\\"Bet amount must be greater than 0\\\");\\n        require(\\n            balls[_ballNumber].state == BallState.OPEN,\\n            \\\"Betting not open for this ball\\\"\\n        );\\n        require(\\n            _outcome != BallOutcome.PENDING,\\n            \\\"Cannot bet on PENDING outcome\\\"\\n        );\\n\\n        Ball storage ball = balls[_ballNumber];\\n\\n        // Track unique bettors\\n        if (!ball.hasBet[msg.sender]) {\\n            ball.hasBet[msg.sender] = true;\\n            ball.uniqueBettorCount++;\\n        }\\n\\n        // Add to user's bet for this outcome (allows multiple bets on same outcome)\\n        if (ball.userBets[msg.sender][_outcome] == 0) {\\n            ball.bettors[_outcome].push(msg.sender);\\n        }\\n        ball.userBets[msg.sender][_outcome] += msg.value;\\n        ball.totalBets[_outcome] += msg.value;\\n        ball.totalPool += msg.value;\\n\\n        emit BetPlaced(\\n            _ballNumber,\\n            msg.sender,\\n            _outcome,\\n            msg.value,\\n            block.timestamp\\n        );\\n    }\\n\\n    // Users can place multiple bets on different outcomes in a single transaction\\n    function placeBets(\\n        uint256 _ballNumber,\\n        BallOutcome[] memory _outcomes,\\n        uint256[] memory _amounts\\n    ) external payable ballExists(_ballNumber) {\\n        require(_outcomes.length == _amounts.length, \\\"Arrays length mismatch\\\");\\n        require(_outcomes.length > 0, \\\"No bets specified\\\");\\n        require(\\n            balls[_ballNumber].state == BallState.OPEN,\\n            \\\"Betting not open for this ball\\\"\\n        );\\n\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            require(_amounts[i] > 0, \\\"All bet amounts must be greater than 0\\\");\\n            require(\\n                _outcomes[i] != BallOutcome.PENDING,\\n                \\\"Cannot bet on PENDING outcome\\\"\\n            );\\n            totalAmount += _amounts[i];\\n        }\\n        require(\\n            msg.value == totalAmount,\\n            \\\"Sent value doesn't match total bet amounts\\\"\\n        );\\n\\n        Ball storage ball = balls[_ballNumber];\\n\\n        // Track unique bettors\\n        if (!ball.hasBet[msg.sender]) {\\n            ball.hasBet[msg.sender] = true;\\n            ball.uniqueBettorCount++;\\n        }\\n\\n        // Process each bet\\n        for (uint256 i = 0; i < _outcomes.length; i++) {\\n            BallOutcome outcome = _outcomes[i];\\n            uint256 amount = _amounts[i];\\n\\n            // Add to user's bet for this outcome\\n            if (ball.userBets[msg.sender][outcome] == 0) {\\n                ball.bettors[outcome].push(msg.sender);\\n            }\\n            ball.userBets[msg.sender][outcome] += amount;\\n            ball.totalBets[outcome] += amount;\\n            ball.totalPool += amount;\\n\\n            emit BetPlaced(\\n                _ballNumber,\\n                msg.sender,\\n                outcome,\\n                amount,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // Owner reports the result of a ball\\n    function reportBallResult(\\n        uint256 _ballNumber,\\n        BallOutcome _result\\n    ) external onlyOwner ballExists(_ballNumber) {\\n        require(\\n            balls[_ballNumber].state == BallState.CLOSED,\\n            \\\"Ball must be closed first\\\"\\n        );\\n        require(_result != BallOutcome.PENDING, \\\"Result cannot be PENDING\\\");\\n        require(\\n            !balls[_ballNumber].distributed && !balls[_ballNumber].refunded,\\n            \\\"Already processed\\\"\\n        );\\n\\n        balls[_ballNumber].result = _result;\\n        balls[_ballNumber].state = BallState.RESOLVED;\\n\\n        emit BallResult(_ballNumber, _result, block.timestamp);\\n\\n        // Automatically distribute winnings or refund\\n        _processBallResult(_ballNumber);\\n    }\\n\\n    // Owner can cancel a ball and refund all bets (for situations like rain delay, technical issues)\\n    function cancelBall(\\n        uint256 _ballNumber,\\n        string memory _reason\\n    ) external onlyOwner ballExists(_ballNumber) {\\n        require(\\n            balls[_ballNumber].state == BallState.CLOSED,\\n            \\\"Ball must be closed first\\\"\\n        );\\n        require(\\n            !balls[_ballNumber].distributed && !balls[_ballNumber].refunded,\\n            \\\"Already processed\\\"\\n        );\\n\\n        emit BallCancelled(_ballNumber, _reason, block.timestamp);\\n        _refundAllBets(_ballNumber);\\n    }\\n\\n    // Internal function to process ball result (distribute or refund)\\n    function _processBallResult(uint256 _ballNumber) internal {\\n        Ball storage ball = balls[_ballNumber];\\n        BallOutcome winningOutcome = ball.result;\\n\\n        // Check if there are any winning bets\\n        if (ball.totalBets[winningOutcome] == 0) {\\n            // No winners - refund all bets\\n            _refundAllBets(_ballNumber);\\n            return;\\n        }\\n\\n        // Distribute winnings\\n        _distributeWinnings(_ballNumber);\\n    }\\n\\n    // Internal function to distribute winnings\\n    function _distributeWinnings(uint256 _ballNumber) internal {\\n        Ball storage ball = balls[_ballNumber];\\n        BallOutcome winningOutcome = ball.result;\\n\\n        address[] memory winners = ball.bettors[winningOutcome];\\n        uint256 totalWinningBets = ball.totalBets[winningOutcome];\\n        uint256 totalPool = ball.totalPool;\\n\\n        // Distribute proportionally based on bet amounts\\n        for (uint256 i = 0; i < winners.length; i++) {\\n            address winner = winners[i];\\n            uint256 userBet = ball.userBets[winner][winningOutcome];\\n            uint256 userWinnings = (userBet * totalPool) / totalWinningBets;\\n\\n            userBalances[winner] += userWinnings;\\n        }\\n\\n        ball.distributed = true;\\n\\n        emit WinningsDistributed(\\n            _ballNumber,\\n            winningOutcome,\\n            totalPool,\\n            winners.length,\\n            block.timestamp\\n        );\\n\\n        // Check if match is completed\\n        if (_ballNumber == TOTAL_BALLS) {\\n            emit MatchCompleted(matchId, block.timestamp);\\n        }\\n    }\\n\\n    // Internal function to refund all bets for a ball\\n    function _refundAllBets(uint256 _ballNumber) internal {\\n        Ball storage ball = balls[_ballNumber];\\n        uint256 totalRefunded = 0;\\n        uint256 totalBettors = 0;\\n\\n        // Refund all outcomes\\n        BallOutcome[6] memory outcomes = [\\n            BallOutcome.BOUNDARY,\\n            BallOutcome.WICKET,\\n            BallOutcome.DOT_BALL,\\n            BallOutcome.ONE_RUN,\\n            BallOutcome.TWO_RUNS,\\n            BallOutcome.EXTRAS\\n        ];\\n\\n        for (uint256 i = 0; i < outcomes.length; i++) {\\n            BallOutcome outcome = outcomes[i];\\n            address[] memory bettors = ball.bettors[outcome];\\n\\n            for (uint256 j = 0; j < bettors.length; j++) {\\n                address bettor = bettors[j];\\n                uint256 refundAmount = ball.userBets[bettor][outcome];\\n\\n                if (refundAmount > 0) {\\n                    userBalances[bettor] += refundAmount;\\n                    totalRefunded += refundAmount;\\n                    totalBettors++;\\n                }\\n            }\\n        }\\n\\n        ball.refunded = true;\\n\\n        emit BetsRefunded(\\n            _ballNumber,\\n            totalRefunded,\\n            totalBettors,\\n            block.timestamp\\n        );\\n    }\\n\\n    // Users withdraw their winnings/refunds\\n    function withdraw() external {\\n        uint256 amount = userBalances[msg.sender];\\n        require(amount > 0, \\\"No balance to withdraw\\\");\\n\\n        userBalances[msg.sender] = 0;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    // View functions for frontend\\n    function getBallInfo(\\n        uint256 _ballNumber\\n    )\\n        external\\n        view\\n        ballExists(_ballNumber)\\n        returns (\\n            BallState state,\\n            BallOutcome result,\\n            uint256 totalPool,\\n            uint256[6] memory outcomeBets, // [BOUNDARY, WICKET, DOT_BALL, ONE_RUN, TWO_RUNS, EXTRAS]\\n            uint256 uniqueBettorCount,\\n            bool distributed,\\n            bool refunded\\n        )\\n    {\\n        Ball storage ball = balls[_ballNumber];\\n        uint256[6] memory bets = [\\n            ball.totalBets[BallOutcome.BOUNDARY],\\n            ball.totalBets[BallOutcome.WICKET],\\n            ball.totalBets[BallOutcome.DOT_BALL],\\n            ball.totalBets[BallOutcome.ONE_RUN],\\n            ball.totalBets[BallOutcome.TWO_RUNS],\\n            ball.totalBets[BallOutcome.EXTRAS]\\n        ];\\n\\n        return (\\n            ball.state,\\n            ball.result,\\n            ball.totalPool,\\n            bets,\\n            ball.uniqueBettorCount,\\n            ball.distributed,\\n            ball.refunded\\n        );\\n    }\\n\\n    function getUserBetForBall(\\n        uint256 _ballNumber,\\n        address _user,\\n        BallOutcome _outcome\\n    ) external view ballExists(_ballNumber) returns (uint256) {\\n        return balls[_ballNumber].userBets[_user][_outcome];\\n    }\\n\\n    function getUserTotalBetForBall(\\n        uint256 _ballNumber,\\n        address _user\\n    ) external view ballExists(_ballNumber) returns (uint256 totalBet) {\\n        Ball storage ball = balls[_ballNumber];\\n\\n        totalBet += ball.userBets[_user][BallOutcome.BOUNDARY];\\n        totalBet += ball.userBets[_user][BallOutcome.WICKET];\\n        totalBet += ball.userBets[_user][BallOutcome.DOT_BALL];\\n        totalBet += ball.userBets[_user][BallOutcome.ONE_RUN];\\n        totalBet += ball.userBets[_user][BallOutcome.TWO_RUNS];\\n        totalBet += ball.userBets[_user][BallOutcome.EXTRAS];\\n\\n        return totalBet;\\n    }\\n\\n    function getMatchInfo()\\n        external\\n        view\\n        returns (string memory, string memory, uint256, uint256, uint256)\\n    {\\n        return (teamA, teamB, matchId, currentBall, TOTAL_BALLS);\\n    }\\n\\n    function getUserBalance(address _user) external view returns (uint256) {\\n        return userBalances[_user];\\n    }\\n\\n    function getBallOutcomeString(\\n        BallOutcome _outcome\\n    ) external pure returns (string memory) {\\n        if (_outcome == BallOutcome.BOUNDARY) return \\\"Boundary (4/6)\\\";\\n        if (_outcome == BallOutcome.WICKET) return \\\"Wicket\\\";\\n        if (_outcome == BallOutcome.DOT_BALL) return \\\"Dot Ball\\\";\\n        if (_outcome == BallOutcome.ONE_RUN) return \\\"1 Run\\\";\\n        if (_outcome == BallOutcome.TWO_RUNS) return \\\"2 Runs\\\";\\n        if (_outcome == BallOutcome.EXTRAS) return \\\"Extras (Wide/No Ball)\\\";\\n        return \\\"Pending\\\";\\n    }\\n\\n    // Get detailed betting info for a ball\\n    function getBallBettingDetails(\\n        uint256 _ballNumber\\n    )\\n        external\\n        view\\n        ballExists(_ballNumber)\\n        returns (\\n            uint256 boundaryBets,\\n            uint256 wicketBets,\\n            uint256 dotBallBets,\\n            uint256 oneRunBets,\\n            uint256 twoRunsBets,\\n            uint256 extrasBets,\\n            uint256 totalPool,\\n            uint256 totalBettors\\n        )\\n    {\\n        Ball storage ball = balls[_ballNumber];\\n\\n        boundaryBets = ball.totalBets[BallOutcome.BOUNDARY];\\n        wicketBets = ball.totalBets[BallOutcome.WICKET];\\n        dotBallBets = ball.totalBets[BallOutcome.DOT_BALL];\\n        oneRunBets = ball.totalBets[BallOutcome.ONE_RUN];\\n        twoRunsBets = ball.totalBets[BallOutcome.TWO_RUNS];\\n        extrasBets = ball.totalBets[BallOutcome.EXTRAS];\\n        totalPool = ball.totalPool;\\n\\n        // Count total bettors (now returns accurate unique count)\\n        totalBettors = ball.uniqueBettorCount;\\n\\n        return (\\n            boundaryBets,\\n            wicketBets,\\n            dotBallBets,\\n            oneRunBets,\\n            twoRunsBets,\\n            extrasBets,\\n            totalPool,\\n            totalBettors\\n        );\\n    }\\n\\n    // Emergency functions\\n    function emergencyPause() external onlyOwner {\\n        // Implementation for emergency pause functionality\\n        // Could add a paused state and modifier\\n    }\\n\\n    // Get contract balance (for owner monitoring)\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    // Batch function to get multiple balls info (for frontend efficiency)\\n    function getMultipleBallsInfo(\\n        uint256 _startBall,\\n        uint256 _endBall\\n    )\\n        external\\n        view\\n        returns (\\n            BallState[] memory states,\\n            BallOutcome[] memory results,\\n            uint256[] memory totalPools\\n        )\\n    {\\n        require(\\n            _startBall <= _endBall && _endBall <= TOTAL_BALLS,\\n            \\\"Invalid range\\\"\\n        );\\n\\n        uint256 length = _endBall - _startBall + 1;\\n        states = new BallState[](length);\\n        results = new BallOutcome[](length);\\n        totalPools = new uint256[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 ballNumber = _startBall + i;\\n            states[i] = balls[ballNumber].state;\\n            results[i] = balls[ballNumber].result;\\n            totalPools[i] = balls[ballNumber].totalPool;\\n        }\\n\\n        return (states, results, totalPools);\\n    }\\n}\\n\",\"keccak256\":\"0x489873fa5f8d5fda6485ac893502ed071bbdc462b6721746d93e70cd41a03768\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.30+commit.73712a01"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"string","name":"_teamA","type":"string"},{"internalType":"string","name":"_teamB","type":"string"},{"internalType":"uint256","name":"_matchId","type":"uint256"},{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"ballNumber","type":"uint256","indexed":true},{"internalType":"string","name":"reason","type":"string","indexed":false},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false}],"type":"event","name":"BallCancelled","anonymous":false},{"inputs":[{"internalType":"uint256","name":"ballNumber","type":"uint256","indexed":true},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false}],"type":"event","name":"BallClosed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"ballNumber","type":"uint256","indexed":true},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false}],"type":"event","name":"BallOpened","anonymous":false},{"inputs":[{"internalType":"uint256","name":"ballNumber","type":"uint256","indexed":true},{"internalType":"enum CricketBettingGame.BallOutcome","name":"result","type":"uint8","indexed":false},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false}],"type":"event","name":"BallResult","anonymous":false},{"inputs":[{"internalType":"uint256","name":"ballNumber","type":"uint256","indexed":true},{"internalType":"address","name":"bettor","type":"address","indexed":true},{"internalType":"enum CricketBettingGame.BallOutcome","name":"outcome","type":"uint8","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false}],"type":"event","name":"BetPlaced","anonymous":false},{"inputs":[{"internalType":"uint256","name":"ballNumber","type":"uint256","indexed":true},{"internalType":"uint256","name":"totalRefunded","type":"uint256","indexed":false},{"internalType":"uint256","name":"bettorsCount","type":"uint256","indexed":false},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false}],"type":"event","name":"BetsRefunded","anonymous":false},{"inputs":[{"internalType":"uint256","name":"matchId","type":"uint256","indexed":false},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false}],"type":"event","name":"MatchCompleted","anonymous":false},{"inputs":[{"internalType":"uint256","name":"ballNumber","type":"uint256","indexed":true},{"internalType":"enum CricketBettingGame.BallOutcome","name":"winningOutcome","type":"uint8","indexed":false},{"internalType":"uint256","name":"totalPool","type":"uint256","indexed":false},{"internalType":"uint256","name":"winnersCount","type":"uint256","indexed":false},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false}],"type":"event","name":"WinningsDistributed","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"TOTAL_BALLS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"balls","outputs":[{"internalType":"uint256","name":"ballNumber","type":"uint256"},{"internalType":"enum CricketBettingGame.BallState","name":"state","type":"uint8"},{"internalType":"enum CricketBettingGame.BallOutcome","name":"result","type":"uint8"},{"internalType":"uint256","name":"totalPool","type":"uint256"},{"internalType":"uint256","name":"uniqueBettorCount","type":"uint256"},{"internalType":"bool","name":"distributed","type":"bool"},{"internalType":"bool","name":"refunded","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"},{"internalType":"string","name":"_reason","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"cancelBall"},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"closeBall"},{"inputs":[],"stateMutability":"view","type":"function","name":"currentBall","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"emergencyPause"},{"inputs":[],"stateMutability":"view","type":"function","name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"getBallBettingDetails","outputs":[{"internalType":"uint256","name":"boundaryBets","type":"uint256"},{"internalType":"uint256","name":"wicketBets","type":"uint256"},{"internalType":"uint256","name":"dotBallBets","type":"uint256"},{"internalType":"uint256","name":"oneRunBets","type":"uint256"},{"internalType":"uint256","name":"twoRunsBets","type":"uint256"},{"internalType":"uint256","name":"extrasBets","type":"uint256"},{"internalType":"uint256","name":"totalPool","type":"uint256"},{"internalType":"uint256","name":"totalBettors","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"}],"stateMutability":"view","type":"function","name":"getBallInfo","outputs":[{"internalType":"enum CricketBettingGame.BallState","name":"state","type":"uint8"},{"internalType":"enum CricketBettingGame.BallOutcome","name":"result","type":"uint8"},{"internalType":"uint256","name":"totalPool","type":"uint256"},{"internalType":"uint256[6]","name":"outcomeBets","type":"uint256[6]"},{"internalType":"uint256","name":"uniqueBettorCount","type":"uint256"},{"internalType":"bool","name":"distributed","type":"bool"},{"internalType":"bool","name":"refunded","type":"bool"}]},{"inputs":[{"internalType":"enum CricketBettingGame.BallOutcome","name":"_outcome","type":"uint8"}],"stateMutability":"pure","type":"function","name":"getBallOutcomeString","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getContractBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMatchInfo","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_startBall","type":"uint256"},{"internalType":"uint256","name":"_endBall","type":"uint256"}],"stateMutability":"view","type":"function","name":"getMultipleBallsInfo","outputs":[{"internalType":"enum CricketBettingGame.BallState[]","name":"states","type":"uint8[]"},{"internalType":"enum CricketBettingGame.BallOutcome[]","name":"results","type":"uint8[]"},{"internalType":"uint256[]","name":"totalPools","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"stateMutability":"view","type":"function","name":"getUserBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"},{"internalType":"address","name":"_user","type":"address"},{"internalType":"enum CricketBettingGame.BallOutcome","name":"_outcome","type":"uint8"}],"stateMutability":"view","type":"function","name":"getUserBetForBall","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"},{"internalType":"address","name":"_user","type":"address"}],"stateMutability":"view","type":"function","name":"getUserTotalBetForBall","outputs":[{"internalType":"uint256","name":"totalBet","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"matchId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"openBall"},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"},{"internalType":"enum CricketBettingGame.BallOutcome","name":"_outcome","type":"uint8"}],"stateMutability":"payable","type":"function","name":"placeBet"},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"},{"internalType":"enum CricketBettingGame.BallOutcome[]","name":"_outcomes","type":"uint8[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"stateMutability":"payable","type":"function","name":"placeBets"},{"inputs":[{"internalType":"uint256","name":"_ballNumber","type":"uint256"},{"internalType":"enum CricketBettingGame.BallOutcome","name":"_result","type":"uint8"}],"stateMutability":"nonpayable","type":"function","name":"reportBallResult"},{"inputs":[],"stateMutability":"view","type":"function","name":"teamA","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"teamB","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"userBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"withdraw"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/CricketBettingGame.sol":"CricketBettingGame"},"evmVersion":"cancun","libraries":{}},"sources":{"src/CricketBettingGame.sol":{"keccak256":"0x489873fa5f8d5fda6485ac893502ed071bbdc462b6721746d93e70cd41a03768","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n// Individual Cricket Match Betting Contract\ncontract CricketBettingGame {\n    address public owner;\n    address public factory;\n\n    string public teamA;\n    string public teamB;\n    uint256 public matchId;\n\n    uint256 public constant TOTAL_BALLS = 120; // 20 overs * 6 balls\n    uint256 public currentBall = 0;\n\n    enum BallOutcome {\n        PENDING, // 0 - Default state\n        BOUNDARY, // 1 - 4 or 6 runs\n        WICKET, // 2 - Batsman out\n        DOT_BALL, // 3 - 0 runs\n        ONE_RUN, // 4 - 1 run\n        TWO_RUNS, // 5 - 2 runs\n        EXTRAS // 6 - Wide or No ball\n    }\n\n    enum BallState {\n        CLOSED,\n        OPEN,\n        RESOLVED\n    }\n\n    struct Ball {\n        uint256 ballNumber;\n        BallState state;\n        BallOutcome result;\n        mapping(BallOutcome => uint256) totalBets; // outcome => total amount\n        mapping(BallOutcome => address[]) bettors; // outcome => list of bettors\n        mapping(address => mapping(BallOutcome => uint256)) userBets; // user => outcome => amount\n        mapping(address => bool) hasBet; // Track if user has bet on this ball\n        uint256 totalPool;\n        uint256 uniqueBettorCount;\n        bool distributed;\n        bool refunded;\n    }\n\n    mapping(uint256 => Ball) public balls;\n    mapping(address => uint256) public userBalances;\n\n    // Events for frontend consumption\n    event BallOpened(uint256 indexed ballNumber, uint256 timestamp);\n    event BallClosed(uint256 indexed ballNumber, uint256 timestamp);\n    event BetPlaced(\n        uint256 indexed ballNumber,\n        address indexed bettor,\n        BallOutcome outcome,\n        uint256 amount,\n        uint256 timestamp\n    );\n    event BallResult(\n        uint256 indexed ballNumber,\n        BallOutcome result,\n        uint256 timestamp\n    );\n    event WinningsDistributed(\n        uint256 indexed ballNumber,\n        BallOutcome winningOutcome,\n        uint256 totalPool,\n        uint256 winnersCount,\n        uint256 timestamp\n    );\n    event BetsRefunded(\n        uint256 indexed ballNumber,\n        uint256 totalRefunded,\n        uint256 bettorsCount,\n        uint256 timestamp\n    );\n    event MatchCompleted(uint256 matchId, uint256 timestamp);\n    event BallCancelled(\n        uint256 indexed ballNumber,\n        string reason,\n        uint256 timestamp\n    );\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    modifier ballExists(uint256 _ballNumber) {\n        require(\n            _ballNumber > 0 && _ballNumber <= TOTAL_BALLS,\n            \"Invalid ball number\"\n        );\n        _;\n    }\n\n    constructor(\n        string memory _teamA,\n        string memory _teamB,\n        uint256 _matchId,\n        address _owner\n    ) {\n        teamA = _teamA;\n        teamB = _teamB;\n        matchId = _matchId;\n        owner = _owner;\n        factory = msg.sender;\n    }\n\n    // Owner opens betting for a specific ball\n    function openBall(\n        uint256 _ballNumber\n    ) external onlyOwner ballExists(_ballNumber) {\n        require(\n            balls[_ballNumber].state == BallState.CLOSED,\n            \"Ball already opened or resolved\"\n        );\n        require(_ballNumber == currentBall + 1, \"Must open balls in sequence\");\n\n        balls[_ballNumber].ballNumber = _ballNumber;\n        balls[_ballNumber].state = BallState.OPEN;\n        balls[_ballNumber].result = BallOutcome.PENDING;\n        currentBall = _ballNumber;\n\n        emit BallOpened(_ballNumber, block.timestamp);\n    }\n\n    // Owner closes betting for a specific ball\n    function closeBall(\n        uint256 _ballNumber\n    ) external onlyOwner ballExists(_ballNumber) {\n        require(\n            balls[_ballNumber].state == BallState.OPEN,\n            \"Ball not open for betting\"\n        );\n\n        balls[_ballNumber].state = BallState.CLOSED;\n\n        emit BallClosed(_ballNumber, block.timestamp);\n    }\n\n    // Users place bets on a ball outcome (can bet multiple times on different outcomes)\n    function placeBet(\n        uint256 _ballNumber,\n        BallOutcome _outcome\n    ) external payable ballExists(_ballNumber) {\n        require(msg.value > 0, \"Bet amount must be greater than 0\");\n        require(\n            balls[_ballNumber].state == BallState.OPEN,\n            \"Betting not open for this ball\"\n        );\n        require(\n            _outcome != BallOutcome.PENDING,\n            \"Cannot bet on PENDING outcome\"\n        );\n\n        Ball storage ball = balls[_ballNumber];\n\n        // Track unique bettors\n        if (!ball.hasBet[msg.sender]) {\n            ball.hasBet[msg.sender] = true;\n            ball.uniqueBettorCount++;\n        }\n\n        // Add to user's bet for this outcome (allows multiple bets on same outcome)\n        if (ball.userBets[msg.sender][_outcome] == 0) {\n            ball.bettors[_outcome].push(msg.sender);\n        }\n        ball.userBets[msg.sender][_outcome] += msg.value;\n        ball.totalBets[_outcome] += msg.value;\n        ball.totalPool += msg.value;\n\n        emit BetPlaced(\n            _ballNumber,\n            msg.sender,\n            _outcome,\n            msg.value,\n            block.timestamp\n        );\n    }\n\n    // Users can place multiple bets on different outcomes in a single transaction\n    function placeBets(\n        uint256 _ballNumber,\n        BallOutcome[] memory _outcomes,\n        uint256[] memory _amounts\n    ) external payable ballExists(_ballNumber) {\n        require(_outcomes.length == _amounts.length, \"Arrays length mismatch\");\n        require(_outcomes.length > 0, \"No bets specified\");\n        require(\n            balls[_ballNumber].state == BallState.OPEN,\n            \"Betting not open for this ball\"\n        );\n\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            require(_amounts[i] > 0, \"All bet amounts must be greater than 0\");\n            require(\n                _outcomes[i] != BallOutcome.PENDING,\n                \"Cannot bet on PENDING outcome\"\n            );\n            totalAmount += _amounts[i];\n        }\n        require(\n            msg.value == totalAmount,\n            \"Sent value doesn't match total bet amounts\"\n        );\n\n        Ball storage ball = balls[_ballNumber];\n\n        // Track unique bettors\n        if (!ball.hasBet[msg.sender]) {\n            ball.hasBet[msg.sender] = true;\n            ball.uniqueBettorCount++;\n        }\n\n        // Process each bet\n        for (uint256 i = 0; i < _outcomes.length; i++) {\n            BallOutcome outcome = _outcomes[i];\n            uint256 amount = _amounts[i];\n\n            // Add to user's bet for this outcome\n            if (ball.userBets[msg.sender][outcome] == 0) {\n                ball.bettors[outcome].push(msg.sender);\n            }\n            ball.userBets[msg.sender][outcome] += amount;\n            ball.totalBets[outcome] += amount;\n            ball.totalPool += amount;\n\n            emit BetPlaced(\n                _ballNumber,\n                msg.sender,\n                outcome,\n                amount,\n                block.timestamp\n            );\n        }\n    }\n\n    // Owner reports the result of a ball\n    function reportBallResult(\n        uint256 _ballNumber,\n        BallOutcome _result\n    ) external onlyOwner ballExists(_ballNumber) {\n        require(\n            balls[_ballNumber].state == BallState.CLOSED,\n            \"Ball must be closed first\"\n        );\n        require(_result != BallOutcome.PENDING, \"Result cannot be PENDING\");\n        require(\n            !balls[_ballNumber].distributed && !balls[_ballNumber].refunded,\n            \"Already processed\"\n        );\n\n        balls[_ballNumber].result = _result;\n        balls[_ballNumber].state = BallState.RESOLVED;\n\n        emit BallResult(_ballNumber, _result, block.timestamp);\n\n        // Automatically distribute winnings or refund\n        _processBallResult(_ballNumber);\n    }\n\n    // Owner can cancel a ball and refund all bets (for situations like rain delay, technical issues)\n    function cancelBall(\n        uint256 _ballNumber,\n        string memory _reason\n    ) external onlyOwner ballExists(_ballNumber) {\n        require(\n            balls[_ballNumber].state == BallState.CLOSED,\n            \"Ball must be closed first\"\n        );\n        require(\n            !balls[_ballNumber].distributed && !balls[_ballNumber].refunded,\n            \"Already processed\"\n        );\n\n        emit BallCancelled(_ballNumber, _reason, block.timestamp);\n        _refundAllBets(_ballNumber);\n    }\n\n    // Internal function to process ball result (distribute or refund)\n    function _processBallResult(uint256 _ballNumber) internal {\n        Ball storage ball = balls[_ballNumber];\n        BallOutcome winningOutcome = ball.result;\n\n        // Check if there are any winning bets\n        if (ball.totalBets[winningOutcome] == 0) {\n            // No winners - refund all bets\n            _refundAllBets(_ballNumber);\n            return;\n        }\n\n        // Distribute winnings\n        _distributeWinnings(_ballNumber);\n    }\n\n    // Internal function to distribute winnings\n    function _distributeWinnings(uint256 _ballNumber) internal {\n        Ball storage ball = balls[_ballNumber];\n        BallOutcome winningOutcome = ball.result;\n\n        address[] memory winners = ball.bettors[winningOutcome];\n        uint256 totalWinningBets = ball.totalBets[winningOutcome];\n        uint256 totalPool = ball.totalPool;\n\n        // Distribute proportionally based on bet amounts\n        for (uint256 i = 0; i < winners.length; i++) {\n            address winner = winners[i];\n            uint256 userBet = ball.userBets[winner][winningOutcome];\n            uint256 userWinnings = (userBet * totalPool) / totalWinningBets;\n\n            userBalances[winner] += userWinnings;\n        }\n\n        ball.distributed = true;\n\n        emit WinningsDistributed(\n            _ballNumber,\n            winningOutcome,\n            totalPool,\n            winners.length,\n            block.timestamp\n        );\n\n        // Check if match is completed\n        if (_ballNumber == TOTAL_BALLS) {\n            emit MatchCompleted(matchId, block.timestamp);\n        }\n    }\n\n    // Internal function to refund all bets for a ball\n    function _refundAllBets(uint256 _ballNumber) internal {\n        Ball storage ball = balls[_ballNumber];\n        uint256 totalRefunded = 0;\n        uint256 totalBettors = 0;\n\n        // Refund all outcomes\n        BallOutcome[6] memory outcomes = [\n            BallOutcome.BOUNDARY,\n            BallOutcome.WICKET,\n            BallOutcome.DOT_BALL,\n            BallOutcome.ONE_RUN,\n            BallOutcome.TWO_RUNS,\n            BallOutcome.EXTRAS\n        ];\n\n        for (uint256 i = 0; i < outcomes.length; i++) {\n            BallOutcome outcome = outcomes[i];\n            address[] memory bettors = ball.bettors[outcome];\n\n            for (uint256 j = 0; j < bettors.length; j++) {\n                address bettor = bettors[j];\n                uint256 refundAmount = ball.userBets[bettor][outcome];\n\n                if (refundAmount > 0) {\n                    userBalances[bettor] += refundAmount;\n                    totalRefunded += refundAmount;\n                    totalBettors++;\n                }\n            }\n        }\n\n        ball.refunded = true;\n\n        emit BetsRefunded(\n            _ballNumber,\n            totalRefunded,\n            totalBettors,\n            block.timestamp\n        );\n    }\n\n    // Users withdraw their winnings/refunds\n    function withdraw() external {\n        uint256 amount = userBalances[msg.sender];\n        require(amount > 0, \"No balance to withdraw\");\n\n        userBalances[msg.sender] = 0;\n        payable(msg.sender).transfer(amount);\n    }\n\n    // View functions for frontend\n    function getBallInfo(\n        uint256 _ballNumber\n    )\n        external\n        view\n        ballExists(_ballNumber)\n        returns (\n            BallState state,\n            BallOutcome result,\n            uint256 totalPool,\n            uint256[6] memory outcomeBets, // [BOUNDARY, WICKET, DOT_BALL, ONE_RUN, TWO_RUNS, EXTRAS]\n            uint256 uniqueBettorCount,\n            bool distributed,\n            bool refunded\n        )\n    {\n        Ball storage ball = balls[_ballNumber];\n        uint256[6] memory bets = [\n            ball.totalBets[BallOutcome.BOUNDARY],\n            ball.totalBets[BallOutcome.WICKET],\n            ball.totalBets[BallOutcome.DOT_BALL],\n            ball.totalBets[BallOutcome.ONE_RUN],\n            ball.totalBets[BallOutcome.TWO_RUNS],\n            ball.totalBets[BallOutcome.EXTRAS]\n        ];\n\n        return (\n            ball.state,\n            ball.result,\n            ball.totalPool,\n            bets,\n            ball.uniqueBettorCount,\n            ball.distributed,\n            ball.refunded\n        );\n    }\n\n    function getUserBetForBall(\n        uint256 _ballNumber,\n        address _user,\n        BallOutcome _outcome\n    ) external view ballExists(_ballNumber) returns (uint256) {\n        return balls[_ballNumber].userBets[_user][_outcome];\n    }\n\n    function getUserTotalBetForBall(\n        uint256 _ballNumber,\n        address _user\n    ) external view ballExists(_ballNumber) returns (uint256 totalBet) {\n        Ball storage ball = balls[_ballNumber];\n\n        totalBet += ball.userBets[_user][BallOutcome.BOUNDARY];\n        totalBet += ball.userBets[_user][BallOutcome.WICKET];\n        totalBet += ball.userBets[_user][BallOutcome.DOT_BALL];\n        totalBet += ball.userBets[_user][BallOutcome.ONE_RUN];\n        totalBet += ball.userBets[_user][BallOutcome.TWO_RUNS];\n        totalBet += ball.userBets[_user][BallOutcome.EXTRAS];\n\n        return totalBet;\n    }\n\n    function getMatchInfo()\n        external\n        view\n        returns (string memory, string memory, uint256, uint256, uint256)\n    {\n        return (teamA, teamB, matchId, currentBall, TOTAL_BALLS);\n    }\n\n    function getUserBalance(address _user) external view returns (uint256) {\n        return userBalances[_user];\n    }\n\n    function getBallOutcomeString(\n        BallOutcome _outcome\n    ) external pure returns (string memory) {\n        if (_outcome == BallOutcome.BOUNDARY) return \"Boundary (4/6)\";\n        if (_outcome == BallOutcome.WICKET) return \"Wicket\";\n        if (_outcome == BallOutcome.DOT_BALL) return \"Dot Ball\";\n        if (_outcome == BallOutcome.ONE_RUN) return \"1 Run\";\n        if (_outcome == BallOutcome.TWO_RUNS) return \"2 Runs\";\n        if (_outcome == BallOutcome.EXTRAS) return \"Extras (Wide/No Ball)\";\n        return \"Pending\";\n    }\n\n    // Get detailed betting info for a ball\n    function getBallBettingDetails(\n        uint256 _ballNumber\n    )\n        external\n        view\n        ballExists(_ballNumber)\n        returns (\n            uint256 boundaryBets,\n            uint256 wicketBets,\n            uint256 dotBallBets,\n            uint256 oneRunBets,\n            uint256 twoRunsBets,\n            uint256 extrasBets,\n            uint256 totalPool,\n            uint256 totalBettors\n        )\n    {\n        Ball storage ball = balls[_ballNumber];\n\n        boundaryBets = ball.totalBets[BallOutcome.BOUNDARY];\n        wicketBets = ball.totalBets[BallOutcome.WICKET];\n        dotBallBets = ball.totalBets[BallOutcome.DOT_BALL];\n        oneRunBets = ball.totalBets[BallOutcome.ONE_RUN];\n        twoRunsBets = ball.totalBets[BallOutcome.TWO_RUNS];\n        extrasBets = ball.totalBets[BallOutcome.EXTRAS];\n        totalPool = ball.totalPool;\n\n        // Count total bettors (now returns accurate unique count)\n        totalBettors = ball.uniqueBettorCount;\n\n        return (\n            boundaryBets,\n            wicketBets,\n            dotBallBets,\n            oneRunBets,\n            twoRunsBets,\n            extrasBets,\n            totalPool,\n            totalBettors\n        );\n    }\n\n    // Emergency functions\n    function emergencyPause() external onlyOwner {\n        // Implementation for emergency pause functionality\n        // Could add a paused state and modifier\n    }\n\n    // Get contract balance (for owner monitoring)\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    // Batch function to get multiple balls info (for frontend efficiency)\n    function getMultipleBallsInfo(\n        uint256 _startBall,\n        uint256 _endBall\n    )\n        external\n        view\n        returns (\n            BallState[] memory states,\n            BallOutcome[] memory results,\n            uint256[] memory totalPools\n        )\n    {\n        require(\n            _startBall <= _endBall && _endBall <= TOTAL_BALLS,\n            \"Invalid range\"\n        );\n\n        uint256 length = _endBall - _startBall + 1;\n        states = new BallState[](length);\n        results = new BallOutcome[](length);\n        totalPools = new uint256[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            uint256 ballNumber = _startBall + i;\n            states[i] = balls[ballNumber].state;\n            results[i] = balls[ballNumber].result;\n            totalPools[i] = balls[ballNumber].totalPool;\n        }\n\n        return (states, results, totalPools);\n    }\n}\n","license":"MIT"}},"version":1},"id":28}